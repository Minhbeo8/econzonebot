# bot/cogs/earn.py
import nextcord
from nextcord.ext import commands
import random
from datetime import datetime # C·∫ßn thi·∫øt cho vi·ªác c·∫≠p nh·∫≠t timestamp

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from core.database import get_user_data, save_data, check_user # check_user c√≥ th·ªÉ c·∫ßn cho rob
from core.utils import try_send, get_time_left_str
from core.config import (
    CURRENCY_SYMBOL, WORK_COOLDOWN, DAILY_COOLDOWN, BEG_COOLDOWN,
    ROB_COOLDOWN, ROB_SUCCESS_RATE, ROB_FINE_RATE, CRIME_COOLDOWN,
    CRIME_SUCCESS_RATE, FISH_COOLDOWN, FISH_CATCHES
)

class EarnCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command(name='work', aliases=['w'])
    async def work(self, ctx: commands.Context):
        """L√†m vi·ªác ƒë·ªÉ ki·∫øm m·ªôt kho·∫£n ti·ªÅn ng·∫´u nhi√™n."""
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        
        time_left = get_time_left_str(user_data.get("last_work"), WORK_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"B·∫°n c·∫ßn ngh·ªâ ng∆°i! L·ªánh `work` ch·ªù: **{time_left}**.")
            return
            
        earnings = random.randint(100, 500)
        user_data["balance"] = user_data.get("balance", 0) + earnings
        user_data["last_work"] = datetime.now().timestamp()
        save_data(data)
        await try_send(ctx, content=f"{ctx.author.mention}, b·∫°n l√†m vi·ªác v√† ki·∫øm ƒë∆∞·ª£c **{earnings:,}** {CURRENCY_SYMBOL}! V√≠: **{user_data['balance']:,}**")

    @commands.command(name='daily', aliases=['d'])
    async def daily(self, ctx: commands.Context):
        """Nh·∫≠n ph·∫ßn th∆∞·ªüng h√†ng ng√†y c·ªßa b·∫°n."""
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        
        time_left = get_time_left_str(user_data.get("last_daily"), DAILY_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"Th∆∞·ªüng ng√†y ch·ªù: **{time_left}**.")
            return
            
        bonus = random.randint(500, 1500)
        user_data["balance"] = user_data.get("balance", 0) + bonus
        user_data["last_daily"] = datetime.now().timestamp()
        save_data(data)
        await try_send(ctx, content=f"{ctx.author.mention}, th∆∞·ªüng ng√†y: **{bonus:,}** {CURRENCY_SYMBOL}! V√≠: **{user_data['balance']:,}**")

    @commands.command(name='beg', aliases=['b'])
    async def beg(self, ctx: commands.Context):
        """Xin ti·ªÅn t·ª´ nh·ªØng ng∆∞·ªùi qua ƒë∆∞·ªùng. May r·ªßi!"""
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        
        time_left = get_time_left_str(user_data.get("last_beg"), BEG_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"ƒê·ª´ng xin li√™n t·ª•c! L·ªánh `beg` ch·ªù: **{time_left}**.")
            return
            
        user_data["last_beg"] = datetime.now().timestamp()
        if random.random() < 0.7: # 70% c∆° h·ªôi th√†nh c√¥ng
            earnings = random.randint(10, 100)
            user_data["balance"] = user_data.get("balance", 0) + earnings
            await try_send(ctx, content=f"C√≥ ng∆∞·ªùi cho {ctx.author.mention} **{earnings:,}** {CURRENCY_SYMBOL}! V√≠: **{user_data['balance']:,}**")
        else:
            await try_send(ctx, content=f"Kh√¥ng ai cho {ctx.author.mention} ti·ªÅn c·∫£. üò¢")
        save_data(data)

    @commands.command(name='rob', aliases=['steal'])
    async def rob(self, ctx: commands.Context, target: nextcord.Member):
        """C·ªë g·∫Øng c∆∞·ªõp ti·ªÅn t·ª´ v√≠ c·ªßa m·ªôt ng∆∞·ªùi d√πng kh√°c."""
        author = ctx.author
        if target.id == author.id:
            await try_send(ctx, content="B·∫°n kh√¥ng th·ªÉ t·ª± c∆∞·ªõp m√¨nh!")
            return
        if target.bot:
            await try_send(ctx, content="B·∫°n kh√¥ng th·ªÉ c∆∞·ªõp bot!")
            return

        # L·∫•y d·ªØ li·ªáu c·ªßa ng∆∞·ªùi th·ª±c hi·ªán l·ªánh (author)
        full_data = get_user_data(ctx.guild.id, author.id)
        author_data = full_data[str(ctx.guild.id)][str(author.id)]

        time_left = get_time_left_str(author_data.get("last_rob"), ROB_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"B·∫°n v·ª´a m·ªõi ƒëi c∆∞·ªõp xong! L·ªánh `rob` ch·ªù: **{time_left}**.")
            return

        # Ki·ªÉm tra v√† ƒë·∫£m b·∫£o d·ªØ li·ªáu c·ªßa m·ª•c ti√™u (target) t·ªìn t·∫°i trong full_data
        full_data = check_user(full_data, ctx.guild.id, target.id)
        target_data = full_data[str(ctx.guild.id)].get(str(target.id)) # Ph·∫£i l√† .get() ph√≤ng tr∆∞·ªùng h·ª£p target.id kh√¥ng c√≥ (d√π check_user ƒë√£ x·ª≠ l√Ω)

        # Ki·ªÉm tra m·ª•c ti√™u c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ªõp kh√¥ng (v√≠ d·ª•: √≠t nh·∫•t 100)
        if not target_data or target_data.get("balance", 0) < 100:
            await try_send(ctx, content=f"{target.mention} qu√° ngh√®o ƒë·ªÉ c∆∞·ªõp ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu.")
            author_data["last_rob"] = datetime.now().timestamp() # V·∫´n t√≠nh cooldown cho n·ªó l·ª±c c∆∞·ªõp
            save_data(full_data)
            return
        
        author_data["last_rob"] = datetime.now().timestamp() # ƒê·∫∑t cooldown ngay c·∫£ khi th·∫•t b·∫°i
        
        if random.random() < ROB_SUCCESS_RATE:
            # C∆∞·ªõp t·ª´ 10% ƒë·∫øn 40% s·ªë ti·ªÅn c·ªßa m·ª•c ti√™u
            min_rob_amount = int(target_data.get("balance", 0) * 0.10)
            max_rob_amount = int(target_data.get("balance", 0) * 0.40)
            
            # ƒê·∫£m b·∫£o max_rob_amount l·ªõn h∆°n ho·∫∑c b·∫±ng min_rob_amount v√† kh√¥ng √¢m
            max_rob_amount = max(min_rob_amount, max_rob_amount)
            if max_rob_amount <= 0 : # N·∫øu m·ª•c ti√™u c√≥ qu√° √≠t ti·ªÅn (v√≠ d·ª• 1 ƒë·ªìng) th√¨ % ra 0
                 await try_send(ctx,content=f"{target.mention} c√≥ qu√° √≠t ti·ªÅn ƒë·ªÉ c∆∞·ªõp c√≥ √Ω nghƒ©a.")
                 save_data(full_data) # V·∫´n l∆∞u v√¨ cooldown ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                 return

            robbed_amount = random.randint(min_rob_amount, max_rob_amount)
            
            author_data["balance"] = author_data.get("balance", 0) + robbed_amount
            target_data["balance"] -= robbed_amount # Tr·ª´ ti·ªÅn c·ªßa m·ª•c ti√™u
            await try_send(ctx, content=f"üî´ B·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng **{robbed_amount:,}** {CURRENCY_SYMBOL} t·ª´ {target.mention}!")
        else:
            # Th·∫•t b·∫°i, b·ªã ph·∫°t m·ªôt ph·∫ßn ti·ªÅn ƒëang c√≥
            fine_amount = min(int(author_data.get("balance", 0) * ROB_FINE_RATE), author_data.get("balance", 0)) # Ph·∫°t kh√¥ng qu√° s·ªë ti·ªÅn ƒëang c√≥
            author_data["balance"] -= fine_amount
            await try_send(ctx, content=f"üëÆ B·∫°n ƒë√£ b·ªã b·∫Øt khi c·ªë c∆∞·ªõp {target.mention} v√† b·ªã ph·∫°t **{fine_amount:,}** {CURRENCY_SYMBOL}.")
        save_data(full_data)


    @commands.command(name='crime')
    async def crime(self, ctx: commands.Context):
        """Th·ª±c hi·ªán m·ªôt h√†nh vi ph·∫°m t·ªôi ng·∫´u nhi√™n ƒë·ªÉ ki·∫øm ti·ªÅn."""
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]

        time_left = get_time_left_str(user_data.get("last_crime"), CRIME_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"C·∫£nh s√°t ƒëang theo d√µi! L·ªánh `crime` ch·ªù: **{time_left}**.")
            return
            
        user_data["last_crime"] = datetime.now().timestamp()
        crimes = ["tr·ªôm v·∫∑t", "bu√¥n l·∫≠u", "hack t√†i kho·∫£n", "t·ªï ch·ª©c ƒëua xe ƒë∆∞·ªùng ph·ªë", "gi·∫£ danh quan ch·ª©c"]
        chosen_crime = random.choice(crimes)

        if random.random() < CRIME_SUCCESS_RATE:
            earnings = random.randint(300, 1000)
            user_data["balance"] = user_data.get("balance", 0) + earnings
            await try_send(ctx, content=f"B·∫°n ƒë√£ th·ª±c hi·ªán th√†nh c√¥ng **{chosen_crime}** v√† ki·∫øm ƒë∆∞·ª£c **{earnings:,}** {CURRENCY_SYMBOL}!")
        else:
            fine = min(random.randint(100, 500), user_data.get("balance",0)) # Ph·∫°t kh√¥ng qu√° s·ªë ti·ªÅn ƒëang c√≥
            user_data["balance"] -= fine
            await try_send(ctx, content=f"B·∫°n ƒë√£ th·∫•t b·∫°i khi th·ª±c hi·ªán **{chosen_crime}** v√† b·ªã ph·∫°t **{fine:,}** {CURRENCY_SYMBOL}!")
        save_data(data)

    @commands.command(name='fish')
    async def fish(self, ctx: commands.Context):
        """ƒêi c√¢u c√° ƒë·ªÉ ki·∫øm ti·ªÅn t·ª´ vi·ªác b√°n c√° (ho·∫∑c r√°c)."""
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]

        time_left = get_time_left_str(user_data.get("last_fish"), FISH_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"C√° c·∫ßn th·ªùi gian ƒë·ªÉ c·∫Øn c√¢u! L·ªánh `fish` ch·ªù: **{time_left}**.")
            return
            
        user_data["last_fish"] = datetime.now().timestamp()
        catch, price = random.choice(list(FISH_CATCHES.items())) # L·∫•y ng·∫´u nhi√™n m·ªôt item t·ª´ dictionary FISH_CATCHES
        user_data["balance"] = user_data.get("balance", 0) + price
        save_data(data)

        if price > 20: # M·ªôt ng∆∞·ª°ng t√πy √Ω ƒë·ªÉ ph√¢n bi·ªát c√° "x·ªãn" v√† r√°c
            await try_send(ctx, content=f"üé£ B·∫°n c√¢u ƒë∆∞·ª£c m·ªôt con **{catch}** v√† b√°n n√≥ ƒë∆∞·ª£c **{price:,}** {CURRENCY_SYMBOL}!")
        else:
            await try_send(ctx, content=f"üé£ B·∫°n c√¢u ƒë∆∞·ª£c r√°c **{catch}**... ch·ªâ ƒë√°ng gi√° **{price:,}** {CURRENCY_SYMBOL}.")

# H√†m setup ƒë·ªÉ bot c√≥ th·ªÉ load cog n√†y
def setup(bot: commands.Bot):
    bot.add_cog(EarnCog(bot))
