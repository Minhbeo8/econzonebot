import nextcord
from nextcord.ext import commands
import random
from datetime import datetime
import logging

from core.utils import try_send, format_relative_timestamp, require_travel_check
# S·ª¨A: Import c√°c bi·∫øn c·∫•u h√¨nh m·ªõi
from core.config import BEG_COOLDOWN, BEG_SUCCESS_RATE, BEG_REWARD_MIN, BEG_REWARD_MAX
from core.icons import ICON_LOADING, ICON_GIFT, ICON_WARNING, ICON_BANK_MAIN

logger = logging.getLogger(__name__)

class BegCommandCog(commands.Cog, name="Beg Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("BegCommandCog (SQLite Ready) initialized.")

    @commands.command(name='beg', aliases=['b'])
    @commands.guild_only()
    @require_travel_check
    async def beg(self, ctx: commands.Context):
        author_id = ctx.author.id
        
        now = datetime.now().timestamp()
        last_beg = self.bot.db.get_cooldown(author_id, "beg")
        
        if last_beg and now < last_beg + BEG_COOLDOWN:
            cooldown_end_timestamp = last_beg + BEG_COOLDOWN
            relative_time_str = format_relative_timestamp(cooldown_end_timestamp)
            await try_send(ctx, content=f"{ICON_LOADING} ƒê·ª´ng xin li√™n t·ª•c th·∫ø ch·ª©! H√£y quay l·∫°i sau ({relative_time_str}).")
            return

        self.bot.db.set_cooldown(author_id, "beg", now)
        
        # S·ª¨A: S·ª≠ d·ª•ng t·ªâ l·ªá th√†nh c√¥ng t·ª´ config
        if random.random() < BEG_SUCCESS_RATE: 
            # S·ª¨A: S·ª≠ d·ª•ng kho·∫£ng ti·ªÅn t·ª´ config
            earnings = random.randint(BEG_REWARD_MIN, BEG_REWARD_MAX)
            
            # Logic g·ªëc c·ªßa b·∫°n: c·ªông ti·ªÅn v√†o bank
            user_profile = self.bot.db.get_or_create_global_user_profile(author_id)
            new_balance = user_profile['bank_balance'] + earnings
            # Ch√∫ √Ω: H√†m update_balance c√≥ v·∫ª kh√¥ng t·ªìn t·∫°i trong db c·ªßa b·∫°n, t√¥i gi·∫£ ƒë·ªãnh n√≥ l√† update_global_balance
            # N·∫øu bot b√°o l·ªói ·ªü ƒë√¢y, ch√∫ng ta s·∫Ω xem l·∫°i h√†m CSDL. T·∫°m th·ªùi d√πng h√†m ph√π h·ª£p nh·∫•t.
            self.bot.db.update_global_balance(author_id, 'bank_balance', earnings)
            
            # L·∫•y l·∫°i s·ªë d∆∞ m·ªõi nh·∫•t ƒë·ªÉ hi·ªÉn th·ªã ch√≠nh x√°c
            updated_profile = self.bot.db.get_or_create_global_user_profile(author_id)
            final_balance = updated_profile['bank_balance']

            await try_send(ctx, content=f"{ICON_GIFT} M·ªôt ng∆∞·ªùi t·ªët b·ª•ng ƒë√£ cho {ctx.author.mention} **{earnings:,}**! S·ªë d∆∞ {ICON_BANK_MAIN} c·ªßa b·∫°n gi·ªù l√†: **{final_balance:,}**")
        else:
            await try_send(ctx, content=f"{ICON_WARNING} Kh√¥ng ai cho {ctx.author.mention} ti·ªÅn c·∫£. üò¢")
            
def setup(bot: commands.Bot):
    bot.add_cog(BegCommandCog(bot))
