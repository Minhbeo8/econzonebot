# bot/cogs/earn/beg_cmd.py
import nextcord
from nextcord.ext import commands
import random
from datetime import datetime
import logging # <<< ƒê·∫£m b·∫£o ƒë√£ import logging

from core.database import get_user_data, save_data
from core.utils import try_send, get_time_left_str
from core.config import CURRENCY_SYMBOL, BEG_COOLDOWN
from core.icons import ICON_LOADING, ICON_GIFT, ICON_MONEY_BAG, ICON_WARNING, ICON_INFO # ƒê·∫£m b·∫£o c√≥ ICON_INFO

logger = logging.getLogger(__name__) # <<< ƒê√£ c√≥ logger

class BegCommandCog(commands.Cog, name="Beg Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info(f"{ICON_INFO} BegCommandCog initialized.") # S·ª≠ d·ª•ng INFO ƒë·ªÉ th·∫•y tr√™n console

    @commands.command(name='beg', aliases=['b'])
    async def beg(self, ctx: commands.Context):
        """Xin ti·ªÅn t·ª´ nh·ªØng ng∆∞·ªùi qua ƒë∆∞·ªùng. May r·ªßi!"""
        logger.debug(f"L·ªánh 'beg' ƒë∆∞·ª£c g·ªçi b·ªüi {ctx.author.name} (ID: {ctx.author.id}) t·∫°i guild {ctx.guild.id}.")
        
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        original_balance = user_data.get("balance", 0)
        
        time_left = get_time_left_str(user_data.get("last_beg"), BEG_COOLDOWN)
        if time_left:
            logger.debug(f"User {ctx.author.id} d√πng l·ªánh 'beg' khi ƒëang cooldown. C√≤n l·∫°i: {time_left}")
            # C√≥ th·ªÉ th√™m logger.info n·∫øu mu·ªën log c·∫£ vi·ªác b·ªã cooldown qua webhook
            # logger.info(f"User {ctx.author.display_name} ({ctx.author.id}) th·ª≠ 'beg' nh∆∞ng ƒëang cooldown ({time_left}).")
            await try_send(ctx, content=f"{ICON_LOADING} ƒê·ª´ng xin li√™n t·ª•c th·∫ø ch·ª©! L·ªánh `beg` ch·ªù: **{time_left}**.")
            return
            
        user_data["last_beg"] = datetime.now().timestamp()
        if random.random() < 0.7: 
            earnings = random.randint(10, 100)
            user_data["balance"] = original_balance + earnings
            save_data(data) 
            # --- GHI LOG INFO CHO H√ÄNH ƒê·ªòNG TH√ÄNH C√îNG ---
            logger.info(f"User {ctx.author.display_name} ({ctx.author.id}) ƒë√£ 'beg' th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c {earnings:,} {CURRENCY_SYMBOL}. S·ªë d∆∞: {original_balance:,} -> {user_data['balance']:,}.")
            # ---------------------------------------------
            await try_send(ctx, content=f"{ICON_GIFT} M·ªôt ng∆∞·ªùi t·ªët b·ª•ng ƒë√£ cho {ctx.author.mention} **{earnings:,}** {CURRENCY_SYMBOL}! {ICON_MONEY_BAG} V√≠: **{user_data['balance']:,}**")
        else:
            save_data(data) # V·∫´n l∆∞u v√¨ last_beg ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            # --- GHI LOG INFO CHO H√ÄNH ƒê·ªòNG TH·∫§T B·∫†I ---
            logger.info(f"User {ctx.author.display_name} ({ctx.author.id}) ƒë√£ 'beg' th·∫•t b·∫°i.")
            # -------------------------------------------
            await try_send(ctx, content=f"{ICON_WARNING} Kh√¥ng ai cho {ctx.author.mention} ti·ªÅn c·∫£. Th·ª≠ l·∫°i v·∫≠n may sau nh√©! üò¢")
        logger.debug(f"L·ªánh 'beg' cho {ctx.author.name} ƒë√£ x·ª≠ l√Ω xong.")

def setup(bot: commands.Bot):
    bot.add_cog(BegCommandCog(bot))
