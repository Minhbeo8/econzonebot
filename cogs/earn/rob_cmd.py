# bot/cogs/earn/rob_cmd.py
import nextcord
from nextcord.ext import commands
import random
from datetime import datetime

from core.database import get_user_data, save_data, check_user # check_user c·∫ßn thi·∫øt
from core.utils import try_send, get_time_left_str
from core.config import CURRENCY_SYMBOL, ROB_COOLDOWN, ROB_SUCCESS_RATE, ROB_FINE_RATE
from core.icons import ICON_LOADING, ICON_ERROR, ICON_INFO, ICON_ROB

class RobCommandCog(commands.Cog, name="Rob Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command(name='rob', aliases=['steal'])
    async def rob(self, ctx: commands.Context, target: nextcord.Member):
        """C·ªë g·∫Øng c∆∞·ªõp ti·ªÅn t·ª´ v√≠ c·ªßa m·ªôt ng∆∞·ªùi d√πng kh√°c."""
        author = ctx.author
        if target.id == author.id:
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng th·ªÉ t·ª± c∆∞·ªõp m√¨nh!")
            return
        if target.bot:
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng th·ªÉ c∆∞·ªõp bot!")
            return

        full_data = get_user_data(ctx.guild.id, author.id)
        author_data = full_data[str(ctx.guild.id)][str(author.id)]

        time_left = get_time_left_str(author_data.get("last_rob"), ROB_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"{ICON_LOADING} B·∫°n v·ª´a m·ªõi ƒëi c∆∞·ªõp xong! L·ªánh `rob` ch·ªù: **{time_left}**.")
            return

        # Ki·ªÉm tra v√† ƒë·∫£m b·∫£o d·ªØ li·ªáu c·ªßa m·ª•c ti√™u (target) t·ªìn t·∫°i trong full_data
        full_data = check_user(full_data, ctx.guild.id, target.id)
        # Truy c·∫≠p target_data sau khi ƒë√£ check_user
        target_data = full_data.get(str(ctx.guild.id), {}).get(str(target.id))


        author_data["last_rob"] = datetime.now().timestamp() # ƒê·∫∑t cooldown ngay khi b·∫Øt ƒë·∫ßu l·ªánh

        # Ph·∫£i ki·ªÉm tra target_data sau khi ƒë√£ g·ªçi check_user
        if not target_data or target_data.get("balance", 0) < 100:
            await try_send(ctx, content=f"{ICON_INFO} {target.mention} qu√° ngh√®o ƒë·ªÉ c∆∞·ªõp ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu.")
            save_data(full_data) # L∆∞u v√¨ last_rob c·ªßa author ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            return
        
        if random.random() < ROB_SUCCESS_RATE:
            min_rob_amount = int(target_data.get("balance", 0) * 0.10)
            max_rob_amount = int(target_data.get("balance", 0) * 0.40)
            max_rob_amount = max(min_rob_amount, max_rob_amount) # ƒê·∫£m b·∫£o max >= min
            
            if max_rob_amount <= 0 : # N·∫øu m·ª•c ti√™u c√≥ qu√° √≠t ti·ªÅn
                 await try_send(ctx,content=f"{ICON_INFO} {target.mention} c√≥ qu√° √≠t ti·ªÅn ƒë·ªÉ c∆∞·ªõp c√≥ √Ω nghƒ©a.")
                 save_data(full_data) # L∆∞u v√¨ last_rob c·ªßa author ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                 return

            robbed_amount = random.randint(min_rob_amount, max_rob_amount)
            
            author_data["balance"] = author_data.get("balance", 0) + robbed_amount
            target_data["balance"] -= robbed_amount # Tr·ª´ ti·ªÅn c·ªßa m·ª•c ti√™u
            await try_send(ctx, content=f"{ICON_ROB} B·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng **{robbed_amount:,}** {CURRENCY_SYMBOL} t·ª´ {target.mention}! Mwahaha!")
        else:
            fine_amount = min(int(author_data.get("balance", 0) * ROB_FINE_RATE), author_data.get("balance", 0))
            author_data["balance"] -= fine_amount
            await try_send(ctx, content=f"üëÆ {ICON_ERROR} B·∫°n ƒë√£ b·ªã b·∫Øt khi c·ªë c∆∞·ªõp {target.mention} v√† b·ªã ph·∫°t **{fine_amount:,}** {CURRENCY_SYMBOL}.")
        save_data(full_data)

def setup(bot: commands.Bot):
    bot.add_cog(RobCommandCog(bot))
