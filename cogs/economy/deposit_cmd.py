# bot/cogs/economy/deposit_cmd.py
import nextcord
from nextcord.ext import commands
import logging

from core.database import (
    load_economy_data,
    save_economy_data,
    get_or_create_global_user_profile,
    get_or_create_user_local_data
)
from core.utils import try_send
from core.config import DEPOSIT_FEE_PERCENTAGE, LAUNDER_EXCHANGE_RATE
# bot/cogs/economy/deposit_cmd.py
import nextcord
from nextcord.ext import commands
import logging

from core.database import get_or_create_global_user_profile, get_or_create_user_local_data
from core.utils import try_send, require_travel_check
from core.config import DEPOSIT_FEE_PERCENTAGE, LAUNDER_EXCHANGE_RATE
from core.icons import ICON_BANK_MAIN, ICON_MONEY_BAG, ICON_SUCCESS, ICON_ERROR, ICON_WARNING, ICON_INFO, ICON_ECOIN

logger = logging.getLogger(__name__)

class DepositCommandCog(commands.Cog, name="Deposit Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("DepositCommandCog (v5 - Refactored) initialized.")

    @commands.command(name='deposit', aliases=['dep'])
    @commands.guild_only()
    @require_travel_check
    async def deposit(self, ctx: commands.Context, amount_str: str):
        """G·ª≠i ü™ôEcoin (Ti·ªÅn S·∫°ch) t·ª´ V√≠ Local v√†o Bank trung t√¢m (ph√≠ 5%)."""
        author_id = ctx.author.id
        
        try:
            economy_data = self.bot.economy_data
            global_profile = get_or_create_global_user_profile(economy_data, author_id)
            local_data = get_or_create_user_local_data(global_profile, ctx.guild.id)
            earned_balance = local_data["local_balance"].get("earned", 0)

            # --- X·ª≠ l√Ω s·ªë ti·ªÅn mu·ªën g·ª≠i ---
            amount_to_deposit = 0
            if amount_str.lower() == 'all':
                amount_to_deposit = earned_balance
            else:
                try:
                    amount_to_deposit = int(amount_str)
                except ValueError:
                    await try_send(ctx, content=f"{ICON_WARNING} Vui l√≤ng nh·∫≠p m·ªôt s·ªë ti·ªÅn h·ª£p l·ªá ho·∫∑c 'all'.")
                    return

            if amount_to_deposit <= 0:
                await try_send(ctx, content=f"{ICON_ERROR} S·ªë ti·ªÅn g·ª≠i ph·∫£i l·ªõn h∆°n 0.")
                return

            if earned_balance < amount_to_deposit:
                await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng c√≥ ƒë·ªß {ICON_ECOIN} ƒë·ªÉ g·ª≠i. B·∫°n c√≥: **{earned_balance:,}**")
                return

            # --- T√≠nh ph√≠ v√† ki·ªÉm tra l·∫ßn cu·ªëi ---
            fee = int(amount_to_deposit * DEPOSIT_FEE_PERCENTAGE)
            total_cost = amount_to_deposit + fee

            if earned_balance < total_cost:
                await try_send(ctx, content=(
                    f"{ICON_ERROR} Kh√¥ng ƒë·ªß {ICON_ECOIN} ƒë·ªÉ tr·∫£ ph√≠!\n"
                    f"- Mu·ªën g·ª≠i: `{amount_to_deposit:,}`\n"
                    f"- Ph√≠ ({DEPOSIT_FEE_PERCENTAGE*100}%): `{fee:,}`\n"
                    f"- **T·ªïng c·ªông c·∫ßn: `{total_cost:,}`**\n"
                    f"- {ICON_ECOIN} B·∫°n ch·ªâ c√≥: **{earned_balance:,}**"))
                return

            # --- Th·ª±c hi·ªán giao d·ªãch ---
            local_data["local_balance"]["earned"] -= total_cost
            global_profile["bank_balance"] += amount_to_deposit
            
            # --- Logic gi·∫£m t·ªôi (wanted_level) ---
            original_wanted_level = global_profile.get("wanted_level", 0.0)
            reduction_amount = (amount_to_deposit / LAUNDER_EXCHANGE_RATE) * 0.5 
            new_wanted_level = max(0.0, original_wanted_level - reduction_amount)
            global_profile["wanted_level"] = new_wanted_level
            
            logger.info(f"User {author_id} ƒë√£ deposit {amount_to_deposit} Ecoin. Wanted level: {original_wanted_level:.2f} -> {new_wanted_level:.2f}.")

            # --- G·ª≠i th√¥ng b√°o th√†nh c√¥ng ---
            msg = (
                f"{ICON_SUCCESS} Giao d·ªãch th√†nh c√¥ng!\n"
                f"- ƒê√£ g·ª≠i v√†o Bank: **{amount_to_deposit:,}** {ICON_BANK_MAIN}\n"
                f"- Ph√≠ giao d·ªãch: **{fee:,}** {ICON_MONEY_BAG}\n"
                f"S·ªë d∆∞ m·ªõi:\n"
                f"- {ICON_ECOIN} Ecoin (trong V√≠ Local): **{local_data['local_balance']['earned']:,}**\n"
                f"- {ICON_BANK_MAIN} Bank: **{global_profile['bank_balance']:,}**"
            )
            
            if new_wanted_level < original_wanted_level:
                msg += f"\n\n{ICON_INFO} H√†nh ƒë·ªông t·ªët c·ªßa b·∫°n ƒë√£ gi√∫p **gi·∫£m ƒêi·ªÉm Nghi ng·ªù**!"

            await try_send(ctx, content=msg)

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'deposit' cho user {author_id}: {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi b·∫°n g·ª≠i ti·ªÅn.")

def setup(bot: commands.Bot):
    bot.add_cog(DepositCommandCog(bot))
      await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi b·∫°n g·ª≠i ti·ªÅn.")

def setup(bot: commands.Bot):
    bot.add_cog(DepositCommandCog(bot))
