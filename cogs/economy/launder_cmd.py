# bot/cogs/economy/launder_cmd.py
import nextcord
from nextcord.ext import commands
import random
import logging
from datetime import datetime

from core.database import get_or_create_global_user_profile, get_or_create_user_local_data
from core.utils import try_send, require_travel_check
from core.config import LAUNDER_EXCHANGE_RATE, BASE_CATCH_CHANCE, WANTED_LEVEL_CATCH_MULTIPLIER
from core.icons import ICON_ERROR, ICON_SUCCESS, ICON_WARNING, ICON_BANK_MAIN, ICON_ECOBIT, ICON_ECOIN

logger = logging.getLogger(__name__)

class LaunderCommandCog(commands.Cog, name="Launder Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("LaunderCommandCog (v3 - Refactored) initialized.")

    @commands.command(name="launder")
    @commands.guild_only()
    @require_travel_check
    async def launder(self, ctx: commands.Context, amount: int):
        """(Game ·∫©n) Th·ª≠ "r·ª≠a" üß™Ecobit th√†nh ti·ªÅn Bank v·ªõi r·ªßi ro b·ªã b·∫Øt."""
        author_id = ctx.author.id

        if amount <= 0:
            await try_send(ctx, content=f"{ICON_ERROR} S·ªë ti·ªÅn c·∫ßn r·ª≠a ph·∫£i l·ªõn h∆°n 0.")
            return
            
        try:
            economy_data = self.bot.economy_data
            global_profile = get_or_create_global_user_profile(economy_data, author_id)
            local_data = get_or_create_user_local_data(global_profile, ctx.guild.id)
            adadd_balance = local_data["local_balance"]["adadd"]
            if adadd_balance < amount:
                await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng c√≥ ƒë·ªß {amount:,} üß™Ecobit ƒë·ªÉ th·ª±c hi·ªán.")
                return

            # --- Logic R·ªßi ro ---
            wanted_level = global_profile.get("wanted_level", 0.0)
            catch_chance = min(0.9, BASE_CATCH_CHANCE + wanted_level * WANTED_LEVEL_CATCH_MULTIPLIER) # Gi·ªõi h·∫°n 90%

            # ƒê·∫∑t cooldown ngay l·∫≠p t·ª©c
            global_profile.setdefault("cooldowns", {})["launder"] = datetime.now().timestamp()

            if random.random() < catch_chance:
                # B·ªä B·∫ÆT
                earned_balance = local_data["local_balance"]["earned"]
                fine_amount = min(earned_balance, int(amount * 0.1)) # Ph·∫°t 10% s·ªë ti·ªÅn r·ª≠a v√†o ti·ªÅn s·∫°ch
                
                local_data["local_balance"]["adadd"] = 0  # T·ªãch thu to√†n b·ªô ti·ªÅn l·∫≠u
                local_data["local_balance"]["earned"] -= fine_amount
                global_profile["wanted_level"] += 1.0 # TƒÉng m·∫°nh ƒëi·ªÉm truy n√£

                logger.warning(f"LAUNDER FAILED: User {author_id} b·ªã b·∫Øt khi r·ª≠a {amount} Ecobit. M·∫•t h·∫øt Ecobit, ph·∫°t {fine_amount} Ecoin.")
                await try_send(ctx, content=f"üö® **B·ªä B·∫ÆT!** N·ªó l·ª±c r·ª≠a ti·ªÅn c·ªßa b·∫°n ƒë√£ b·ªã c·∫£nh s√°t ph√°t hi·ªán!\n- **To√†n b·ªô {adadd_balance:,}** {ICON_ECOBIT} c·ªßa b·∫°n ƒë√£ b·ªã t·ªãch thu.\n- B·∫°n b·ªã ph·∫°t th√™m **{fine_amount:,}** {ICON_ECOIN}.\n- M·ª©c ƒë·ªô truy n√£ c·ªßa b·∫°n ƒë√£ tƒÉng l√™n!")
            
            else:
                # TH√ÄNH C√îNG
                bank_gained = amount // LAUNDER_EXCHANGE_RATE
                
                local_data["local_balance"]["adadd"] -= amount
                global_profile["bank_balance"] += bank_gained
                global_profile["wanted_level"] += 0.5 # V·∫´n tƒÉng ƒëi·ªÉm truy n√£ nh·∫π

                logger.info(f"LAUNDER SUCCESS: User {author_id} ƒë√£ r·ª≠a {amount} Ecobit th√†nh {bank_gained} bank.")
                await try_send(ctx, content=f"{ICON_SUCCESS} Giao d·ªãch m·ªù √°m th√†nh c√¥ng!\n- B·∫°n ƒë√£ chi **{amount:,}** {ICON_ECOBIT}.\n- B·∫°n nh·∫≠n l·∫°i ƒë∆∞·ª£c **{bank_gained:,}** {ICON_BANK_MAIN} trong Bank.\n- {ICON_WARNING} M·ª©c ƒë·ªô truy n√£ c·ªßa b·∫°n ƒë√£ tƒÉng nh·∫π.")

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'launder': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} Giao d·ªãch g·∫∑p tr·ª•c tr·∫∑c kh√¥ng mong mu·ªën.")

def setup(bot: commands.Bot):
    bot.add_cog(LaunderCommandCog(bot))
