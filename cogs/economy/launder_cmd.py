# bot/cogs/economy/launder_cmd.py
import nextcord
from nextcord.ext import commands
import random
import logging

from core.database import (
    load_economy_data,
    save_economy_data,
    get_or_create_global_user_profile,
    get_or_create_user_local_data
)
from core.utils import try_send
from core.icons import ICON_ERROR, ICON_SUCCESS, ICON_WARNING, ICON_BANK, ICON_TIEN_LAU, ICON_TIEN_SACH

logger = logging.getLogger(__name__)

# C√°c h·∫±ng s·ªë cho vi·ªác r·ª≠a ti·ªÅn, c√≥ th·ªÉ chuy·ªÉn v√†o config.py sau
LAUNDER_EXCHANGE_RATE = 100_000_000  # 100 tri·ªáu adadd = 1 bank
BASE_CATCH_CHANCE = 0.05  # 5% c∆° h·ªôi b·ªã b·∫Øt c∆° b·∫£n
WANTED_LEVEL_CATCH_MULTIPLIER = 0.05 # M·ªói ƒëi·ªÉm wanted_level tƒÉng 5% c∆° h·ªôi b·ªã b·∫Øt

class LaunderCommandCog(commands.Cog, name="Launder Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("LaunderCommandCog (v3) initialized.")

    @commands.command(name="launder")
    async def launder(self, ctx: commands.Context, amount: int):
        """(Game ·∫©n) Th·ª≠ "r·ª≠a" Ti·ªÅn L·∫≠u (adadd) th√†nh ti·ªÅn Bank v·ªõi r·ªßi ro cao."""
        if not ctx.guild:
            await try_send(ctx, content=f"{ICON_ERROR} L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong m·ªôt server.")
            return

        author_id = ctx.author.id
        guild_id = ctx.guild.id

        if amount <= 0:
            await try_send(ctx, content=f"{ICON_ERROR} S·ªë ti·ªÅn r·ª≠a ph·∫£i l·ªõn h∆°n 0.")
            return
            
        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, author_id)
            local_data = get_or_create_user_local_data(global_profile, guild_id)

            adadd_balance = local_data["local_balance"]["adadd"]
            if adadd_balance < amount:
                await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng c√≥ ƒë·ªß {amount:,} Ti·ªÅn L·∫≠u ƒë·ªÉ th·ª±c hi·ªán.")
                return

            # --- Logic R·ªßi ro ---
            wanted_level = global_profile.get("wanted_level", 0.0)
            catch_chance = min(0.9, BASE_CATCH_CHANCE + wanted_level * WANTED_LEVEL_CATCH_MULTIPLIER) # Gi·ªõi h·∫°n 90%

            if random.random() < catch_chance:
                # B·ªä B·∫ÆT
                earned_balance = local_data["local_balance"]["earned"]
                fine_amount = min(earned_balance, int(amount * 0.1)) # Ph·∫°t 10% s·ªë ti·ªÅn r·ª≠a, nh∆∞ng kh√¥ng qu√° s·ªë ti·ªÅn s·∫°ch ƒëang c√≥
                
                local_data["local_balance"]["adadd"] = 0  # T·ªãch thu to√†n b·ªô ti·ªÅn l·∫≠u
                local_data["local_balance"]["earned"] -= fine_amount
                global_profile["wanted_level"] += 1.0 # TƒÉng m·∫°nh ƒëi·ªÉm truy n√£

                save_economy_data(economy_data)
                logger.warning(f"LAUNDER FAILED: User {author_id} b·ªã b·∫Øt khi r·ª≠a {amount} adadd. M·∫•t h·∫øt adadd, ph·∫°t {fine_amount} earned.")
                await try_send(ctx, content=f"üö® **B·ªä B·∫ÆT!** N·ªó l·ª±c r·ª≠a ti·ªÅn c·ªßa b·∫°n ƒë√£ b·ªã c·∫£nh s√°t ph√°t hi·ªán!\n- **To√†n b·ªô {adadd_balance:,}** {ICON_TIEN_LAU} c·ªßa b·∫°n ƒë√£ b·ªã t·ªãch thu.\n- B·∫°n b·ªã ph·∫°t th√™m **{fine_amount:,}** {ICON_TIEN_SACH}.\n- M·ª©c ƒë·ªô truy n√£ c·ªßa b·∫°n ƒë√£ tƒÉng l√™n!")
            
            else:
                # TH√ÄNH C√îNG
                bank_gained = amount // LAUNDER_EXCHANGE_RATE
                
                local_data["local_balance"]["adadd"] -= amount
                global_profile["bank_balance"] += bank_gained
                global_profile["wanted_level"] += 0.5 # V·∫´n tƒÉng ƒëi·ªÉm truy n√£ nh·∫π

                save_economy_data(economy_data)
                logger.info(f"LAUNDER SUCCESS: User {author_id} ƒë√£ r·ª≠a {amount} adadd th√†nh {bank_gained} bank.")
                await try_send(ctx, content=f"{ICON_SUCCESS} Giao d·ªãch m·ªù √°m th√†nh c√¥ng!\n- B·∫°n ƒë√£ chi **{amount:,}** {ICON_TIEN_LAU}.\n- B·∫°n nh·∫≠n l·∫°i ƒë∆∞·ª£c **{bank_gained:,}** {ICON_BANK} trong Bank.\n- {ICON_WARNING} M·ª©c ƒë·ªô truy n√£ c·ªßa b·∫°n ƒë√£ tƒÉng nh·∫π.")

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'launder': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} Giao d·ªãch g·∫∑p tr·ª•c tr·∫∑c kh√¥ng mong mu·ªën.")

def setup(bot: commands.Bot):
    bot.add_cog(LaunderCommandCog(bot))
