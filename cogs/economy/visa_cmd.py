# bot/cogs/economy/visa_cmd.py
import nextcord
from nextcord.ext import commands
import logging
import uuid

from core.database import (
    load_economy_data,
    save_economy_data,
    get_or_create_global_user_profile
)
from core.utils import try_send, format_large_number
from core.config import UTILITY_ITEMS, COMMAND_PREFIX, UPGRADE_VISA_COST
from core.icons import (
    ICON_SUCCESS, ICON_ERROR, ICON_WARNING, ICON_INFO, 
    ICON_BANK_MAIN, ICON_ECOBANK, ICON_ECOVISA
)

logger = logging.getLogger(__name__)

class VisaCommandCog(commands.Cog, name="Visa Commands"):
    """
    Cog ch·ª©a t·∫•t c·∫£ c√°c l·ªánh li√™n quan ƒë·∫øn vi·ªác qu·∫£n l√Ω v√† s·ª≠ d·ª•ng
    Ecobank (Visa N·ªôi ƒë·ªãa) v√† Ecovisa (Visa Qu·ªëc t·∫ø).
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("VisaCommandCog (v3 - Full) initialized.")

    @commands.group(name='visa', invoke_without_command=True)
    async def visa(self, ctx: commands.Context):
        """L·ªánh cha cho c√°c ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn th·∫ª Visa. G√µ !help visa ƒë·ªÉ xem c√°c l·ªánh con."""
        await try_send(ctx, content=f"{ICON_INFO} Vui l√≤ng s·ª≠ d·ª•ng m·ªôt l·ªánh con. G√µ `{COMMAND_PREFIX}help visa` ƒë·ªÉ xem chi ti·∫øt.")

    @visa.command(name="buy")
    async def buy_visa(self, ctx: commands.Context, visa_id_str: str):
        """Mua m·ªôt th·∫ª Visa m·ªõi b·∫±ng ti·ªÅn t·ª´ Bank trung t√¢m c·ªßa b·∫°n."""
        item_id_to_buy = visa_id_str.lower().strip()

        if item_id_to_buy not in UTILITY_ITEMS or UTILITY_ITEMS[item_id_to_buy].get("type") != "visa":
            await try_send(ctx, content=f"{ICON_ERROR} Lo·∫°i Visa `{visa_id_str}` kh√¥ng h·ª£p l·ªá. H√£y xem c√°c lo·∫°i th·∫ª c√≥ trong shop.")
            return

        if not ctx.guild and UTILITY_ITEMS[item_id_to_buy].get("visa_type") == "local":
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n ph·∫£i ·ªü trong m·ªôt server ƒë·ªÉ mua `Ecobank` (Visa N·ªôi ƒë·ªãa).")
            return

        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            
            visa_details = UTILITY_ITEMS[item_id_to_buy]
            price = visa_details.get("price", 0)

            if global_profile["bank_balance"] < price:
                await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë·ªß ti·ªÅn trong Bank trung t√¢m. C·∫ßn **{price:,}**, b·∫°n c√≥ **{global_profile['bank_balance']:,}**.")
                return

            global_profile["bank_balance"] -= price
            
            new_visa_item = {
                "item_id": item_id_to_buy,
                "unique_id": str(uuid.uuid4())[:8],
                "type": "visa",
                "visa_type": visa_details["visa_type"],
                "source_guild_id": ctx.guild.id if ctx.guild else None,
                "balance": 0,
                "capacity": visa_details["capacity"]
            }
            
            global_profile.setdefault("inventory_global", []).append(new_visa_item)
            save_economy_data(economy_data)

            logger.info(f"User {ctx.author.id} ƒë√£ mua {item_id_to_buy} v·ªõi gi√° {price} t·ª´ bank.")
            await try_send(ctx, content=f"{ICON_SUCCESS} B·∫°n ƒë√£ mua th√†nh c√¥ng **{visa_details['name']}**! Th·∫ª ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√∫i ƒë·ªì to√†n c·ª•c. D√πng `{COMMAND_PREFIX}visa topup` ƒë·ªÉ n·∫°p ti·ªÅn v√†o th·∫ª.")

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa buy': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi mua Visa.")

    @visa.command(name="balance", aliases=["bal", "list"])
    async def visa_balance(self, ctx: commands.Context):
        """Xem s·ªë d∆∞ c·ªßa t·∫•t c·∫£ c√°c th·∫ª Visa b·∫°n ƒëang s·ªü h·ªØu."""
        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            inventory_global = global_profile.get("inventory_global", [])
            
            visa_items = [item for item in inventory_global if isinstance(item, dict) and item.get("type") == "visa"]

            if not visa_items:
                await try_send(ctx, content=f"{ICON_INFO} B·∫°n ch∆∞a s·ªü h·ªØu th·∫ª Visa n√†o. D√πng `{COMMAND_PREFIX}visa buy` ƒë·ªÉ mua.")
                return

            embed = nextcord.Embed(title=f"üí≥ C√°c Th·∫ª Visa c·ªßa {ctx.author.name}", color=nextcord.Color.dark_purple())
            embed.set_footer(text=f"D√πng {COMMAND_PREFIX}visa topup <ID_th·∫ª> <s·ªë_ti·ªÅn> ƒë·ªÉ n·∫°p ti·ªÅn.")

            for visa in visa_items:
                visa_icon = ICON_ECOBANK if visa.get("visa_type") == "local" else ICON_ECOVISA
                visa_name = UTILITY_ITEMS.get(visa['item_id'], {}).get('name', 'Visa kh√¥ng x√°c ƒë·ªãnh')
                
                source_server_name = "To√†n c·∫ßu"
                if source_guild_id := visa.get("source_guild_id"):
                    source_guild = self.bot.get_guild(source_guild_id)
                    if source_guild:
                        source_server_name = source_guild.name
                
                embed.add_field(
                    name=f"{visa_icon} {visa_name} (ID: `{visa.get('unique_id')}`)",
                    value=(f"**S·ªë d∆∞:** `{format_large_number(visa.get('balance', 0))}` / `{format_large_number(visa.get('capacity', 0))}`\n"
                           f"**Lo·∫°i:** `{visa.get('visa_type', 'N/A').capitalize()}`\n"
                           f"**N∆°i ph√°t h√†nh:** `{source_server_name}`"),
                    inline=False
                )

            await try_send(ctx, embed=embed)

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa balance': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi xem s·ªë d∆∞ Visa.")

    @visa.command(name="topup")
    async def topup_visa(self, ctx: commands.Context, unique_visa_id: str, amount: int):
        """N·∫°p ti·ªÅn t·ª´ Bank trung t√¢m v√†o m·ªôt th·∫ª Visa c·ª• th·ªÉ."""
        if amount <= 0:
            await try_send(ctx, content=f"{ICON_ERROR} S·ªë ti·ªÅn n·∫°p ph·∫£i l·ªõn h∆°n 0.")
            return

        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            
            if global_profile["bank_balance"] < amount:
                await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë·ªß ti·ªÅn trong Bank trung t√¢m. C·∫ßn **{amount:,}**, b·∫°n c√≥ **{global_profile['bank_balance']:,}**.")
                return

            target_visa = next((item for item in global_profile.get("inventory_global", []) if isinstance(item, dict) and item.get("unique_id") == unique_visa_id), None)
            
            if not target_visa:
                await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y th·∫ª Visa n√†o c√≥ ID `{unique_visa_id}`.")
                return

            current_balance = target_visa.get("balance", 0)
            capacity = target_visa.get("capacity", 0)
            if current_balance + amount > capacity:
                await try_send(ctx, content=f"{ICON_ERROR} Th·∫ª n√†y kh√¥ng ƒë·ªß s·ª©c ch·ª©a. C·∫ßn n·∫°p **{amount:,}**, nh∆∞ng ch·ªâ c√≤n tr·ªëng **{capacity - current_balance:,}**.")
                return

            global_profile["bank_balance"] -= amount
            target_visa["balance"] += amount
            save_economy_data(economy_data)
            
            logger.info(f"User {ctx.author.id} ƒë√£ topup {amount} v√†o visa {unique_visa_id}.")
            await try_send(ctx, content=f"{ICON_SUCCESS} ƒê√£ n·∫°p th√†nh c√¥ng **{amount:,}** v√†o th·∫ª `{unique_visa_id}`.\nS·ªë d∆∞ m·ªõi c·ªßa th·∫ª: **{target_visa['balance']:,}** / `{format_large_number(capacity)}`")

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa topup': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi n·∫°p ti·ªÅn.")

    @visa.command(name="withdraw")
    async def withdraw_visa(self, ctx: commands.Context, unique_visa_id: str, amount: int):
        """R√∫t ti·ªÅn t·ª´ m·ªôt th·∫ª Visa c·ª• th·ªÉ v·ªÅ Bank trung t√¢m (mi·ªÖn ph√≠)."""
        if amount <= 0:
            await try_send(ctx, content=f"{ICON_ERROR} S·ªë ti·ªÅn r√∫t ph·∫£i l·ªõn h∆°n 0.")
            return

        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            
            target_visa = next((item for item in global_profile.get("inventory_global", []) if isinstance(item, dict) and item.get("unique_id") == unique_visa_id), None)
            
            if not target_visa:
                await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y th·∫ª Visa n√†o c√≥ ID `{unique_visa_id}`.")
                return

            if target_visa.get("balance", 0) < amount:
                await try_send(ctx, content=f"{ICON_ERROR} Th·∫ª `{unique_visa_id}` kh√¥ng ƒë·ªß s·ªë d∆∞. C·∫ßn r√∫t **{amount:,}**, nh∆∞ng th·∫ª ch·ªâ c√≥ **{target_visa.get('balance', 0):,}**.")
                return

            target_visa["balance"] -= amount
            global_profile["bank_balance"] += amount
            save_economy_data(economy_data)
            
            logger.info(f"User {ctx.author.id} ƒë√£ withdraw {amount} t·ª´ visa {unique_visa_id}.")
            await try_send(ctx, content=f"{ICON_SUCCESS} ƒê√£ r√∫t th√†nh c√¥ng **{amount:,}** t·ª´ th·∫ª `{unique_visa_id}` v·ªÅ Bank trung t√¢m.\nS·ªë d∆∞ Bank m·ªõi c·ªßa b·∫°n: **{global_profile['bank_balance']:,}** {ICON_BANK_MAIN}")

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa withdraw': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi r√∫t ti·ªÅn.")

    @visa.command(name="upgrade")
    async def upgrade_visa(self, ctx: commands.Context, unique_visa_id: str):
        """N√¢ng c·∫•p m·ªôt Ecobank (Visa N·ªôi ƒë·ªãa) th√†nh Ecovisa (Visa Qu·ªëc t·∫ø)."""
        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            
            target_visa = next((item for item in global_profile.get("inventory_global", []) if isinstance(item, dict) and item.get("unique_id") == unique_visa_id), None)
            
            if not target_visa:
                await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y th·∫ª Visa n√†o c√≥ ID `{unique_visa_id}`.")
                return

            if target_visa.get("visa_type") != "local":
                await try_send(ctx, content=f"{ICON_ERROR} Th·∫ª n√†y kh√¥ng ph·∫£i l√† `Ecobank` (Visa N·ªôi ƒë·ªãa) n√™n kh√¥ng th·ªÉ n√¢ng c·∫•p.")
                return

            upgrade_target_id = "ecovisa_standard"
            upgrade_details = UTILITY_ITEMS.get(upgrade_target_id)
            if not upgrade_details:
                await try_send(ctx, content=f"{ICON_ERROR} L·ªói h·ªá th·ªëng: kh√¥ng t√¨m th·∫•y th√¥ng tin n√¢ng c·∫•p `{upgrade_target_id}`.")
                return
            
            upgrade_cost = UPGRADE_VISA_COST
            if global_profile["bank_balance"] < upgrade_cost:
                await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë·ªß ti·ªÅn trong Bank ƒë·ªÉ n√¢ng c·∫•p. C·∫ßn **{upgrade_cost:,}**, b·∫°n c√≥ **{global_profile['bank_balance']:,}**.")
                return

            global_profile["bank_balance"] -= upgrade_cost
            original_name = UTILITY_ITEMS.get(target_visa['item_id'], {}).get('name', 'Visa c≈©')
            
            target_visa["item_id"] = upgrade_target_id
            target_visa["visa_type"] = "international"
            target_visa["capacity"] = upgrade_details["capacity"]
            
            save_economy_data(economy_data)

            logger.info(f"User {ctx.author.id} ƒë√£ n√¢ng c·∫•p visa {unique_visa_id} l√™n {upgrade_target_id}.")
            await try_send(ctx, content=(
                f"{ICON_SUCCESS} N√¢ng c·∫•p th√†nh c√¥ng!\n"
                f"  - ƒê√£ tr·ª´ ph√≠: **{upgrade_cost:,}** {ICON_BANK_MAIN} t·ª´ Bank trung t√¢m.\n"
                f"  - Th·∫ª `{unique_visa_id}` (`{original_name}`) c·ªßa b·∫°n gi·ªù ƒë√£ l√† **{upgrade_details['name']}**!"
            ))

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa upgrade': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi n√¢ng c·∫•p th·∫ª.")

def setup(bot: commands.Bot):
    bot.add_cog(VisaCommandCog(bot))
