# bot/cogs/economy/visa_cmd.py
import nextcord
from nextcord.ext import commands
import logging
import uuid

from core.database import get_or_create_global_user_profile
from core.utils import try_send, format_large_number, require_travel_check
from core.config import COMMAND_PREFIX, UPGRADE_VISA_COST
from core.icons import ICON_SUCCESS, ICON_ERROR, ICON_INFO, ICON_BANK_MAIN, ICON_ECOBANK, ICON_ECOVISA

logger = logging.getLogger(__name__)

class VisaCommandCog(commands.Cog, name="Visa Commands"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("VisaCommandCog (v3 - Refactored) initialized.")

    @commands.group(name='visa', invoke_without_command=True)
    async def visa(self, ctx: commands.Context):
        """L·ªánh cha cho c√°c ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn th·∫ª Visa."""
        await try_send(ctx, content=f"{ICON_INFO} Vui l√≤ng s·ª≠ d·ª•ng m·ªôt l·ªánh con. G√µ `{COMMAND_PREFIX}help visa` ƒë·ªÉ xem chi ti·∫øt.")

    @visa.command(name="buy")
    @commands.guild_only()
    @require_travel_check
    async def buy_visa(self, ctx: commands.Context, visa_id_str: str):
        """Mua m·ªôt th·∫ª Visa m·ªõi b·∫±ng ti·ªÅn t·ª´ Bank trung t√¢m c·ªßa b·∫°n."""
        item_id_to_buy = visa_id_str.lower().strip()
        # [S·ª¨A] S·ª≠ d·ª•ng item definitions t·ª´ cache
        all_items = self.bot.item_definitions

        if item_id_to_buy not in all_items or all_items[item_id_to_buy].get("type") != "visa":
            await try_send(ctx, content=f"{ICON_ERROR} Lo·∫°i Visa `{visa_id_str}` kh√¥ng h·ª£p l·ªá.")
            return

        try:
            # [S·ª¨A] S·ª≠ d·ª•ng cache
            economy_data = self.bot.economy_data
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            
            visa_details = all_items[item_id_to_buy]
            price = visa_details.get("price", 0)

            if global_profile.get("bank_balance", 0) < price:
                await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë·ªß ti·ªÅn trong Bank. C·∫ßn **{price:,}**, b·∫°n c√≥ **{global_profile.get('bank_balance', 0):,}**.")
                return

            global_profile["bank_balance"] -= price
            
            new_visa_item = {
                "item_id": item_id_to_buy,
                "unique_id": str(uuid.uuid4())[:8],
                "type": "visa",
                "visa_type": visa_details["visa_type"],
                "source_guild_id": ctx.guild.id,
                "balance": 0,
                "capacity": visa_details["capacity"]
            }
            
            global_profile.setdefault("inventory_global", []).append(new_visa_item)

            logger.info(f"User {ctx.author.id} ƒë√£ mua {item_id_to_buy} v·ªõi gi√° {price} t·ª´ bank.")
            await try_send(ctx, content=f"{ICON_SUCCESS} B·∫°n ƒë√£ mua th√†nh c√¥ng **{visa_details['name']}**! Th·∫ª ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√∫i ƒë·ªì to√†n c·ª•c. D√πng `{COMMAND_PREFIX}visa topup` ƒë·ªÉ n·∫°p ti·ªÅn.")

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa buy': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi mua Visa.")

    @visa.command(name="balance", aliases=["bal", "list"])
    @require_travel_check
    async def visa_balance(self, ctx: commands.Context):
        """Xem s·ªë d∆∞ c·ªßa t·∫•t c·∫£ c√°c th·∫ª Visa b·∫°n ƒëang s·ªü h·ªØu."""
        try:
            # [S·ª¨A] S·ª≠ d·ª•ng cache
            economy_data = self.bot.economy_data
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            inventory_global = global_profile.get("inventory_global", [])
            
            visa_items = [item for item in inventory_global if isinstance(item, dict) and item.get("type") == "visa"]

            if not visa_items:
                await try_send(ctx, content=f"{ICON_INFO} B·∫°n ch∆∞a s·ªü h·ªØu th·∫ª Visa n√†o.")
                return

            embed = nextcord.Embed(title=f"üí≥ C√°c Th·∫ª Visa c·ªßa {ctx.author.name}", color=nextcord.Color.dark_purple())
            embed.set_footer(text=f"D√πng {COMMAND_PREFIX}visa topup <ID_th·∫ª> <s·ªë_ti·ªÅn> ƒë·ªÉ n·∫°p ti·ªÅn.")
            
            # [S·ª¨A] S·ª≠ d·ª•ng item definitions t·ª´ cache
            all_items = self.bot.item_definitions
            for visa in visa_items:
                visa_icon = ICON_ECOBANK if visa.get("visa_type") == "local" else ICON_ECOVISA
                visa_name = all_items.get(visa['item_id'], {}).get('name', 'Visa kh√¥ng x√°c ƒë·ªãnh')
                
                source_server_name = "To√†n c·∫ßu"
                if source_guild_id := visa.get("source_guild_id"):
                    source_guild = self.bot.get_guild(source_guild_id)
                    if source_guild:
                        source_server_name = source_guild.name
                
                embed.add_field(
                    name=f"{visa_icon} {visa_name} (ID: `{visa.get('unique_id')}`)",
                    value=(f"**S·ªë d∆∞:** `{format_large_number(visa.get('balance', 0))}` / `{format_large_number(visa.get('capacity', 0))}`\n"
                           f"**Lo·∫°i:** `{visa.get('visa_type', 'N/A').capitalize()}`\n"
                           f"**N∆°i ph√°t h√†nh:** `{source_server_name}`"),
                    inline=False
                )

            await try_send(ctx, embed=embed)

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa balance': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi xem s·ªë d∆∞ Visa.")

def setup(bot: commands.Bot):
    bot.add_cog(VisaCommandCog(bot))
