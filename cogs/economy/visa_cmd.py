# bot/cogs/economy/visa_cmd.py
import nextcord
from nextcord.ext import commands
import logging
import uuid

from core.database import (
    load_economy_data,
    save_economy_data,
    get_or_create_global_user_profile
)
from core.utils import try_send, format_large_number
from core.config import UTILITY_ITEMS, COMMAND_PREFIX
from core.icons import ICON_SUCCESS, ICON_ERROR, ICON_WARNING, ICON_INFO, ICON_BANK, ICON_ECOBANK, ICON_ECOVISA

logger = logging.getLogger(__name__)

class VisaCommandCog(commands.Cog, name="Visa Commands"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("VisaCommandCog (v3) initialized.")

    @commands.group(name='visa', invoke_without_command=True)
    async def visa(self, ctx: commands.Context):
        """
        L·ªánh cha cho c√°c ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn th·∫ª Visa.
        G√µ !help visa ƒë·ªÉ xem c√°c l·ªánh con.
        """
        await try_send(ctx, content=f"{ICON_INFO} Vui l√≤ng s·ª≠ d·ª•ng m·ªôt l·ªánh con, v√≠ d·ª•: `{COMMAND_PREFIX}visa buy`, `{COMMAND_PREFIX}visa balance`.")

    @visa.command(name="buy")
    async def buy_visa(self, ctx: commands.Context, visa_id: str):
        """Mua m·ªôt th·∫ª Visa m·ªõi b·∫±ng ti·ªÅn t·ª´ Bank trung t√¢m c·ªßa b·∫°n."""
        item_id_to_buy = visa_id.lower().strip()

        if item_id_to_buy not in UTILITY_ITEMS or UTILITY_ITEMS[item_id_to_buy].get("type") != "visa":
            await try_send(ctx, content=f"{ICON_ERROR} Lo·∫°i Visa `{visa_id}` kh√¥ng h·ª£p l·ªá. D√πng `!shop` ƒë·ªÉ xem c√°c lo·∫°i th·∫ª c√≥ s·∫µn.")
            return

        if not ctx.guild:
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n ph·∫£i ·ªü trong m·ªôt server ƒë·ªÉ mua Visa N·ªôi ƒë·ªãa (`Ecobank`).")
            return

        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            
            visa_details = UTILITY_ITEMS[item_id_to_buy]
            price = visa_details.get("price", 0)

            # Ki·ªÉm tra ti·ªÅn trong Bank trung t√¢m
            if global_profile["bank_balance"] < price:
                await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë·ªß ti·ªÅn trong Bank trung t√¢m. C·∫ßn **{price:,}**, b·∫°n c√≥ **{global_profile['bank_balance']:,}**.")
                return

            # Tr·ª´ ti·ªÅn v√† t·∫°o v·∫≠t ph·∫©m Visa
            global_profile["bank_balance"] -= price
            
            new_visa_item = {
                "item_id": item_id_to_buy,
                "unique_id": str(uuid.uuid4())[:8], # ID duy nh·∫•t cho m·ªói th·∫ª
                "type": "visa",
                "visa_type": visa_details["visa_type"],
                "source_guild_id": ctx.guild.id, # G·∫Øn v·ªõi server n∆°i mua
                "balance": 0, # S·ªë d∆∞ ban ƒë·∫ßu l√† 0
                "capacity": visa_details["capacity"]
            }
            
            global_profile.setdefault("inventory_global", []).append(new_visa_item)
            save_economy_data(economy_data)

            logger.info(f"User {ctx.author.id} ƒë√£ mua {item_id_to_buy} v·ªõi gi√° {price} t·ª´ bank.")
            await try_send(ctx, content=f"{ICON_SUCCESS} B·∫°n ƒë√£ mua th√†nh c√¥ng **{visa_details['name']}**! Th·∫ª ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√∫i ƒë·ªì to√†n c·ª•c c·ªßa b·∫°n. H√£y d√πng `{COMMAND_PREFIX}visa topup` ƒë·ªÉ n·∫°p ti·ªÅn v√†o th·∫ª.")

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa buy': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi mua Visa.")

    @visa.command(name="balance", aliases=["bal", "list"])
    async def visa_balance(self, ctx: commands.Context):
        """Xem s·ªë d∆∞ c·ªßa t·∫•t c·∫£ c√°c th·∫ª Visa b·∫°n ƒëang s·ªü h·ªØu."""
        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, ctx.author.id)
            inventory_global = global_profile.get("inventory_global", [])
            
            visa_items = [item for item in inventory_global if isinstance(item, dict) and item.get("type") == "visa"]

            if not visa_items:
                await try_send(ctx, content=f"{ICON_INFO} B·∫°n ch∆∞a s·ªü h·ªØu th·∫ª Visa n√†o. D√πng `{COMMAND_PREFIX}visa buy` ƒë·ªÉ mua.")
                return

            embed = nextcord.Embed(
                title=f"üí≥ C√°c Th·∫ª Visa c·ªßa {ctx.author.name}",
                color=nextcord.Color.dark_purple()
            )
            embed.set_footer(text="D√πng !visa topup <ID_th·∫ª> <s·ªë_ti·ªÅn> ƒë·ªÉ n·∫°p ti·ªÅn.")

            for visa in visa_items:
                visa_icon = ICON_ECOBANK if visa.get("visa_type") == "local" else ICON_ECOVISA
                visa_name = UTILITY_ITEMS.get(visa['item_id'], {}).get('name', 'Visa kh√¥ng x√°c ƒë·ªãnh')
                
                # C·ªë g·∫Øng l·∫•y t√™n server g·ªëc
                source_server_name = "Kh√¥ng r√µ"
                if source_guild_id := visa.get("source_guild_id"):
                    source_guild = self.bot.get_guild(source_guild_id)
                    if source_guild:
                        source_server_name = source_guild.name
                
                embed.add_field(
                    name=f"{visa_icon} {visa_name} (ID: `{visa.get('unique_id')}`)",
                    value=(
                        f"**S·ªë d∆∞:** `{format_large_number(visa.get('balance', 0))}` / `{format_large_number(visa.get('capacity', 0))}`\n"
                        f"**Lo·∫°i:** `{visa.get('visa_type', 'N/A').capitalize()}`\n"
                        f"**N∆°i ph√°t h√†nh:** `{source_server_name}`"
                    ),
                    inline=False
                )

            await try_send(ctx, embed=embed)

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh 'visa balance': {e}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi xem s·ªë d∆∞ Visa.")


def setup(bot: commands.Bot):
    bot.add_cog(VisaCommandCog(bot))
