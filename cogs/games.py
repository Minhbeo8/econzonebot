# bot/cogs/games.py
import nextcord
from nextcord.ext import commands
import random
from datetime import datetime # C·∫ßn cho cooldown

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from core.database import get_user_data, save_data
from core.utils import try_send, get_time_left_str
from core.config import (
    CURRENCY_SYMBOL, SLOTS_COOLDOWN, SLOTS_EMOJIS,
    CF_COOLDOWN, DICE_COOLDOWN
)

class GamesCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command(name='slots', aliases=['sl'])
    async def slots(self, ctx: commands.Context, bet: int):
        """Ch∆°i m√°y x√®ng may m·∫Øn! ƒê·∫∑t c∆∞·ª£c v√† th·ª≠ v·∫≠n may quay ra c√°c bi·ªÉu t∆∞·ª£ng gi·ªëng nhau."""
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]

        time_left = get_time_left_str(user_data.get("last_slots"), SLOTS_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"Ch∆°i ch·∫≠m th√¥i! L·ªánh `slots` ch·ªù: **{time_left}**.")
            return
        
        if bet <= 0:
            await try_send(ctx, content="Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        if user_data.get("balance", 0) < bet:
            await try_send(ctx, content=f"Kh√¥ng ƒë·ªß ti·ªÅn! V√≠ c·ªßa b·∫°n: **{user_data.get('balance',0):,}** {CURRENCY_SYMBOL}.")
            return

        user_data["balance"] -= bet
        rolls = [random.choice(SLOTS_EMOJIS) for _ in range(3)]
        result_msg = f"**[{' | '.join(rolls)}]**\n"
        winnings = 0

        if rolls[0] == rolls[1] == rolls[2]: # Ba bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
            winnings = bet * 10 # Th∆∞·ªüng g·∫•p 10 l·∫ßn ti·ªÅn c∆∞·ª£c
            result_msg += f"üéâ **JACKPOT!** B·∫°n th·∫Øng **{winnings:,}** {CURRENCY_SYMBOL}! üéâ"
        elif rolls[0] == rolls[1] or rolls[1] == rolls[2] or rolls[0] == rolls[2]: # Hai bi·ªÉu t∆∞·ª£ng gi·ªëng nhau
            winnings = bet * 2 # Th∆∞·ªüng g·∫•p 2 l·∫ßn ti·ªÅn c∆∞·ª£c
            result_msg += f"‚ú® B·∫°n th·∫Øng **{winnings:,}** {CURRENCY_SYMBOL}! ‚ú®"
        else: # Kh√¥ng c√≥ bi·ªÉu t∆∞·ª£ng n√†o gi·ªëng nhau
            result_msg += f"üò≠ B·∫°n thua r·ªìi v√† m·∫•t **{bet:,}** {CURRENCY_SYMBOL}. üò≠" # Th√¥ng b√°o thua c∆∞·ª£c
            # Ti·ªÅn c∆∞·ª£c ƒë√£ b·ªã tr·ª´, kh√¥ng c·∫ßn tr·ª´ th√™m. Winnings l√† 0.

        # N·∫øu th·∫Øng, user_data["balance"] s·∫Ω ƒë∆∞·ª£c c·ªông winnings (ti·ªÅn th·∫Øng + ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu)
        # N·∫øu thua, winnings l√† 0, user_data["balance"] kh√¥ng ƒë·ªïi (ti·ªÅn c∆∞·ª£c ƒë√£ b·ªã tr·ª´ ·ªü tr√™n)
        if winnings > 0: # Ch·ªâ c·ªông l·∫°i n·∫øu th·∫Øng
             user_data["balance"] += winnings # Th·∫Øng th√¨ nh·∫≠n l·∫°i ti·ªÅn c∆∞·ª£c + ti·ªÅn th∆∞·ªüng (winnings ƒë√£ bao g·ªìm c·∫£ ti·ªÅn c∆∞·ª£c g·ªëc)
                                            # V√≠ d·ª•: c∆∞·ª£c 10, th·∫Øng x2 -> winnings = 20. Tr·ª´ 10, r·ªìi c·ªông 20 -> l·ªùi 10.
        
        user_data["last_slots"] = datetime.now().timestamp()
        save_data(data)
        await try_send(ctx, content=result_msg + f"\nV√≠ c·ªßa b·∫°n gi·ªù l√†: **{user_data['balance']:,}** {CURRENCY_SYMBOL}.")

    @commands.command(name='coinflip', aliases=['cf'])
    async def coinflip(self, ctx: commands.Context, bet: int, choice: str):
        """Tung ƒë·ªìng xu v√† c∆∞·ª£c v√†o m·∫∑t S·∫•p (tails) ho·∫∑c Ng·ª≠a (heads)."""
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]

        time_left = get_time_left_str(user_data.get("last_cf"), CF_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"Ch∆°i ch·∫≠m th√¥i! L·ªánh `coinflip` ch·ªù: **{time_left}**.")
            return
            
        choice_lower = choice.lower()
        valid_choices = {'heads', 'tails', 'ng·ª≠a', 's·∫•p', 'n', 's', 'h', 't'} # Th√™m c√°c l·ª±a ch·ªçn vi·∫øt t·∫Øt
        if choice_lower not in valid_choices:
            await try_send(ctx, content=f"L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. H√£y ch·ªçn: heads/ng·ª≠a (h/n) ho·∫∑c tails/s·∫•p (t/s).")
            return
        if bet <= 0:
            await try_send(ctx, content="Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        
        player_choice_internal = "heads" if choice_lower in ["heads", "ng·ª≠a", "h", "n"] else "tails"

        if user_data.get("balance", 0) < bet:
            await try_send(ctx, content=f"Kh√¥ng ƒë·ªß ti·ªÅn! V√≠ c·ªßa b·∫°n: **{user_data.get('balance',0):,}** {CURRENCY_SYMBOL}.")
            return

        user_data["balance"] -= bet # Tr·ª´ ti·ªÅn c∆∞·ª£c tr∆∞·ªõc
        result_internal = random.choice(['heads', 'tails'])
        result_vn = "Ng·ª≠a" if result_internal == "heads" else "S·∫•p"
        
        msg = f"ƒê·ªìng xu l·∫≠t ra: **{result_vn}**! "
        if player_choice_internal == result_internal:
            winnings = bet * 2 # T·ªïng nh·∫≠n l·∫°i (ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu + ti·ªÅn th·∫Øng b·∫±ng ti·ªÅn c∆∞·ª£c)
            user_data["balance"] += winnings
            msg += f"B·∫°n ƒëo√°n ƒë√∫ng v√† th·∫Øng c∆∞·ª£c, nh·∫≠n l·∫°i t·ªïng c·ªông **{winnings:,}** {CURRENCY_SYMBOL} (l·ªùi **{bet:,}** {CURRENCY_SYMBOL})!"
        else:
            msg += f"B·∫°n ƒëo√°n sai v√† m·∫•t **{bet:,}** {CURRENCY_SYMBOL}."
        
        user_data["last_cf"] = datetime.now().timestamp()
        save_data(data)
        await try_send(ctx, content=msg + f"\nV√≠ c·ªßa b·∫°n gi·ªù l√†: **{user_data['balance']:,}** {CURRENCY_SYMBOL}.")

    @commands.command(name='dice', aliases=['roll'])
    async def dice(self, ctx: commands.Context, bet: int):
        """ƒê·ªï m·ªôt c·∫∑p x√∫c x·∫Øc. N·∫øu t·ªïng ƒëi·ªÉm l·ªõn h∆°n 7, b·∫°n th·∫Øng v√† nh·∫≠n l·∫°i 1.5 l·∫ßn ti·ªÅn c∆∞·ª£c c·ªßa m√¨nh (t·ª©c l√† l·ªùi 0.5 l·∫ßn)."""
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]

        time_left = get_time_left_str(user_data.get("last_dice"), DICE_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"Ch∆°i ch·∫≠m th√¥i! L·ªánh `dice` ch·ªù: **{time_left}**.")
            return
            
        if bet <= 0:
            await try_send(ctx, content="Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        if user_data.get("balance", 0) < bet:
            await try_send(ctx, content=f"Kh√¥ng ƒë·ªß ti·ªÅn! V√≠ c·ªßa b·∫°n: **{user_data.get('balance',0):,}** {CURRENCY_SYMBOL}.")
            return

        user_data["balance"] -= bet # Tr·ª´ ti·ªÅn c∆∞·ª£c tr∆∞·ªõc
        d1, d2 = random.randint(1, 6), random.randint(1, 6)
        total = d1 + d2
        
        msg = f"B·∫°n ƒë·ªï ra: üé≤ **{d1}** + **{d2}** = **{total}** üé≤. "
        if total > 7:
            # Th·∫Øng: nh·∫≠n l·∫°i ti·ªÅn c∆∞·ª£c + 0.5 l·∫ßn ti·ªÅn c∆∞·ª£c
            profit = int(bet * 0.5) # Ti·ªÅn l·ªùi
            total_received = bet + profit # T·ªïng nh·∫≠n l·∫°i
            user_data["balance"] += total_received
            msg += f"B·∫°n th·∫Øng! Nh·∫≠n l·∫°i t·ªïng c·ªông **{total_received:,}** {CURRENCY_SYMBOL} (l·ªùi **{profit:,}** {CURRENCY_SYMBOL})!"
        else:
            # Thua: m·∫•t ti·ªÅn c∆∞·ª£c (ƒë√£ tr·ª´ ·ªü tr√™n)
            msg += f"B·∫°n thua v√† m·∫•t **{bet:,}** {CURRENCY_SYMBOL}."
            
        user_data["last_dice"] = datetime.now().timestamp()
        save_data(data)
        await try_send(ctx, content=msg + f"\nV√≠ c·ªßa b·∫°n gi·ªù l√†: **{user_data['balance']:,}** {CURRENCY_SYMBOL}.")

# H√†m setup ƒë·ªÉ bot c√≥ th·ªÉ load cog n√†y
def setup(bot: commands.Bot):
    bot.add_cog(GamesCog(bot))

