import nextcord
from nextcord.ext import commands
import random
from datetime import datetime
import logging

from core.database import (
    load_economy_data,
    get_or_create_global_user_profile,
    save_economy_data
)
from core.utils import try_send, get_time_left_str
from core.config import CURRENCY_SYMBOL, CF_COOLDOWN
from core.icons import ICON_LOADING, ICON_ERROR, ICON_WARNING, ICON_MONEY_BAG, ICON_COINFLIP_HEADS, ICON_COINFLIP_TAILS

logger = logging.getLogger(__name__)

class CoinflipCommandCog(commands.Cog, name="Coinflip Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.debug(f"CoinflipCommandCog initialized for Ecoworld Economy.")

    @commands.command(name='coinflip', aliases=['cf'])
    async def coinflip(self, ctx: commands.Context, bet: int, choice: str):
        author_id = ctx.author.id
        guild_name_for_log = ctx.guild.name if ctx.guild else "DM"

        logger.debug(f"L·ªánh 'coinflip' ƒë∆∞·ª£c g·ªçi b·ªüi {ctx.author.name} ({author_id}) v·ªõi c∆∞·ª£c {bet}, l·ª±a ch·ªçn '{choice}' t·∫°i guild '{guild_name_for_log}'.")
        
        economy_data = load_economy_data()
        user_profile = get_or_create_global_user_profile(economy_data, author_id)
        original_global_balance = user_profile.get("global_balance", 0)

        time_left = get_time_left_str(user_profile.get("last_cf_global"), CF_COOLDOWN)
        if time_left:
            await try_send(ctx, content=f"{ICON_LOADING} Ch∆°i ch·∫≠m th√¥i! L·ªánh `coinflip` (to√†n c·ª•c) ch·ªù: **{time_left}**.")
            return
            
        choice_lower = choice.lower()
        valid_choices_heads = {'heads', 'ng·ª≠a', 'h', 'n'}
        valid_choices_tails = {'tails', 's·∫•p', 't', 's'}
        
        player_choice_internal = None
        if choice_lower in valid_choices_heads:
            player_choice_internal = "heads"
        elif choice_lower in valid_choices_tails:
            player_choice_internal = "tails"
        else:
            await try_send(ctx, content=f"{ICON_WARNING} L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. H√£y ch·ªçn: heads/ng·ª≠a (h/n) ho·∫∑c tails/s·∫•p (t/s).")
            return

        if bet <= 0:
            await try_send(ctx, content=f"{ICON_ERROR} Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        
        if original_global_balance < bet:
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng ƒë·ªß ti·ªÅn trong V√≠ To√†n C·ª•c! {ICON_MONEY_BAG} V√≠ c·ªßa b·∫°n: **{original_global_balance:,}** {CURRENCY_SYMBOL}.")
            return

        user_profile["global_balance"] = original_global_balance - bet
        
        result_internal = random.choice(['heads', 'tails'])
        logger.debug(f"User {author_id} ch∆°i 'coinflip'. L·ª±a ch·ªçn: {player_choice_internal}, K·∫øt qu·∫£ tung: {result_internal}")
        
        result_display_icon = ICON_COINFLIP_HEADS if result_internal == "heads" else ICON_COINFLIP_TAILS
        result_vn_text = "Ng·ª≠a" if result_internal == "heads" else "S·∫•p"
        
        msg_to_user = f"ƒê·ªìng xu ƒë∆∞·ª£c tung... K·∫øt qu·∫£ l√†: {result_display_icon} **{result_vn_text}**!\n"
        log_outcome_message = ""
        
        if player_choice_internal == result_internal:
            winnings_payout = bet * 2
            user_profile["global_balance"] += winnings_payout
            msg_to_user += f"üéâ Ch√∫c m·ª´ng! B·∫°n ƒëo√°n ƒë√∫ng v√† th·∫Øng c∆∞·ª£c, nh·∫≠n l·∫°i t·ªïng c·ªông **{winnings_payout:,}** {CURRENCY_SYMBOL} (l·ªùi **{bet:,}** {CURRENCY_SYMBOL})!"
            log_outcome_message = f"Th·∫Øng. L·ªùi {bet:,} {CURRENCY_SYMBOL}."
        else:
            msg_to_user += f"üò≠ Ti·∫øc qu√°! B·∫°n ƒëo√°n sai v√† m·∫•t **{bet:,}** {CURRENCY_SYMBOL}."
            log_outcome_message = f"Thua. M·∫•t {bet:,} {CURRENCY_SYMBOL}."
        
        user_profile["last_cf_global"] = datetime.now().timestamp()
        save_economy_data(economy_data)

        logger.info(f"Guild Context: '{guild_name_for_log}' - User: {ctx.author.display_name} ({author_id}) ch∆°i 'coinflip'. C∆∞·ª£c: {bet:,} {CURRENCY_SYMBOL} v√†o '{player_choice_internal}'. "
                    f"K·∫øt qu·∫£: {result_internal}. {log_outcome_message} "
                    f"V√≠ To√†n C·ª•c: {original_global_balance:,} -> {user_profile['global_balance']:,}.")
        
        await try_send(ctx, content=msg_to_user + f"\n{ICON_MONEY_BAG} V√≠ To√†n C·ª•c c·ªßa b·∫°n gi·ªù l√†: **{user_profile['global_balance']:,}** {CURRENCY_SYMBOL}.")

def setup(bot: commands.Bot):
    bot.add_cog(CoinflipCommandCog(bot))
