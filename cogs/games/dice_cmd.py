# bot/cogs/games/dice_cmd.py
import nextcord
from nextcord.ext import commands
import random
from datetime import datetime
import logging

from core.database import (
    load_economy_data,
    get_or_create_global_user_profile,
    save_economy_data
)
from core.utils import try_send, get_time_left_str
from core.config import CURRENCY_SYMBOL, DICE_COOLDOWN # DICE_COOLDOWN gi·ªù l√† global
from core.icons import ICON_LOADING, ICON_ERROR, ICON_MONEY_BAG, ICON_DICE, ICON_INFO

logger = logging.getLogger(__name__)

class DiceCommandCog(commands.Cog, name="Dice Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.debug(f"DiceCommandCog initialized.")

    @commands.command(name='dice', aliases=['roll'])
    async def dice(self, ctx: commands.Context, bet: int):
        """ƒê·ªï m·ªôt c·∫∑p x√∫c x·∫Øc. N·∫øu t·ªïng ƒëi·ªÉm l·ªõn h∆°n 7, b·∫°n th·∫Øng v√† nh·∫≠n l·∫°i 1.5 l·∫ßn ti·ªÅn c∆∞·ª£c (l·ªùi 0.5 l·∫ßn)."""
        author_id = ctx.author.id
        guild_id = ctx.guild.id if ctx.guild else None
        guild_name_for_log = ctx.guild.name if ctx.guild else "DM"

        logger.debug(f"L·ªánh 'dice' ƒë∆∞·ª£c g·ªçi b·ªüi {ctx.author.name} ({author_id}) v·ªõi s·ªë ti·ªÅn c∆∞·ª£c {bet} t·∫°i guild '{guild_name_for_log}' ({guild_id}).")
        
        economy_data = load_economy_data()
        user_profile = get_or_create_global_user_profile(economy_data, author_id)
        original_global_balance = user_profile.get("global_balance", 0)

        # S·ª≠ d·ª•ng cooldown to√†n c·ª•c
        time_left = get_time_left_str(user_profile.get("last_dice_global"), DICE_COOLDOWN)
        if time_left:
            logger.debug(f"User {author_id} d√πng l·ªánh 'dice' khi ƒëang cooldown. C√≤n l·∫°i: {time_left}")
            await try_send(ctx, content=f"{ICON_LOADING} Ch∆°i ch·∫≠m th√¥i! L·ªánh `dice` (to√†n c·ª•c) ch·ªù: **{time_left}**.")
            return
            
        if bet <= 0:
            logger.warning(f"User {author_id} ƒë·∫∑t c∆∞·ª£c kh√¥ng h·ª£p l·ªá (<=0) cho 'dice': {bet} t·∫°i guild '{guild_name_for_log}' ({guild_id}).")
            await try_send(ctx, content=f"{ICON_ERROR} Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        if original_global_balance < bet:
            logger.warning(f"User {author_id} kh√¥ng ƒë·ªß ti·ªÅn c∆∞·ª£c {bet} cho 'dice'. S·ªë d∆∞ V√≠ To√†n C·ª•c: {original_global_balance} t·∫°i guild '{guild_name_for_log}' ({guild_id}).")
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng ƒë·ªß ti·ªÅn trong V√≠ To√†n C·ª•c! {ICON_MONEY_BAG} V√≠ c·ªßa b·∫°n: **{original_global_balance:,}** {CURRENCY_SYMBOL}.")
            return

        # Tr·ª´ ti·ªÅn c∆∞·ª£c t·ª´ V√≠ To√†n C·ª•c
        user_profile["global_balance"] = original_global_balance - bet
        
        d1 = random.randint(1, 6)
        d2 = random.randint(1, 6)
        total_roll = d1 + d2
        logger.debug(f"User {author_id} ch∆°i 'dice'. K·∫øt qu·∫£ ƒë·ªï x√∫c x·∫Øc: {d1} + {d2} = {total_roll}")
        
        dice_unicode_map = {
            1: "‚öÄ", 2: "‚öÅ", 3: "‚öÇ", 4: "‚öÉ", 5: "‚öÑ", 6: "‚öÖ"
        }
        d1_emoji = dice_unicode_map.get(d1, str(d1))
        d2_emoji = dice_unicode_map.get(d2, str(d2))

        msg_to_user = f"{ICON_DICE} B·∫°n ƒë·ªï ra: {d1_emoji} + {d2_emoji} = **{total_roll}**.\n"
        log_outcome_message = ""
        
        if total_roll > 7: # Th·∫Øng
            profit = int(bet * 0.5) 
            total_received = bet + profit # Bao g·ªìm c·∫£ ti·ªÅn c∆∞·ª£c g·ªëc tr·∫£ l·∫°i
            user_profile["global_balance"] += total_received # Ti·ªÅn th·∫Øng ƒë∆∞·ª£c c·ªông v√†o V√≠ To√†n C·ª•c
            msg_to_user += f"üéâ Ch√∫c m·ª´ng! B·∫°n th·∫Øng c∆∞·ª£c, nh·∫≠n l·∫°i t·ªïng c·ªông **{total_received:,}** {CURRENCY_SYMBOL} (l·ªùi **{profit:,}** {CURRENCY_SYMBOL})!"
            log_outcome_message = f"Th·∫Øng. L·ªùi {profit:,} {CURRENCY_SYMBOL}."
        else: # Thua
            msg_to_user += f"üò≠ Ti·∫øc qu√°! B·∫°n thua v√† m·∫•t **{bet:,}** {CURRENCY_SYMBOL}."
            log_outcome_message = f"Thua. M·∫•t {bet:,} {CURRENCY_SYMBOL}."
            
        user_profile["last_dice_global"] = datetime.now().timestamp() # C·∫≠p nh·∫≠t cooldown to√†n c·ª•c
        save_economy_data(economy_data)

        logger.info(f"Guild: {guild_name_for_log} ({guild_id}) - User: {ctx.author.display_name} ({author_id}) ch∆°i 'dice' v·ªõi c∆∞·ª£c {bet:,} {CURRENCY_SYMBOL}. "
                    f"K·∫øt qu·∫£ x√∫c x·∫Øc: {d1}+{d2}={total_roll}. {log_outcome_message} "
                    f"V√≠ To√†n C·ª•c: {original_global_balance:,} -> {user_profile['global_balance']:,}.")
        
        await try_send(ctx, content=msg_to_user + f"\n{ICON_MONEY_BAG} V√≠ To√†n C·ª•c c·ªßa b·∫°n gi·ªù l√†: **{user_profile['global_balance']:,}** {CURRENCY_SYMBOL}.")
        logger.debug(f"L·ªánh 'dice' cho {ctx.author.name} t·∫°i guild '{guild_name_for_log}' ({guild_id}) ƒë√£ x·ª≠ l√Ω xong.")

def setup(bot: commands.Bot):
    bot.add_cog(DiceCommandCog(bot))
