# bot/cogs/games/slots_cmd.py
import nextcord
from nextcord.ext import commands
import random
from datetime import datetime
import logging

from core.database import (
    load_economy_data,
    get_or_create_global_user_profile,
    save_economy_data
)
from core.utils import try_send, get_time_left_str
from core.config import CURRENCY_SYMBOL, SLOTS_COOLDOWN, SLOTS_EMOJIS
from core.icons import ICON_LOADING, ICON_ERROR, ICON_SLOTS, ICON_MONEY_BAG, ICON_INFO

logger = logging.getLogger(__name__)

class SlotsCommandCog(commands.Cog, name="Slots Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.debug(f"SlotsCommandCog initialized.")

    @commands.command(name='slots', aliases=['sl'])
    async def slots(self, ctx: commands.Context, bet: int):
        author_id = ctx.author.id
        guild_id = ctx.guild.id if ctx.guild else None
        guild_name_for_log = ctx.guild.name if ctx.guild else "DM"

        logger.debug(f"L·ªánh 'slots' ƒë∆∞·ª£c g·ªçi b·ªüi {ctx.author.name} ({author_id}) v·ªõi s·ªë ti·ªÅn c∆∞·ª£c {bet} t·∫°i guild '{guild_name_for_log}' ({guild_id}).")
        
        economy_data = load_economy_data()
        user_profile = get_or_create_global_user_profile(economy_data, author_id)
        original_global_balance = user_profile.get("global_balance", 0)

        time_left = get_time_left_str(user_profile.get("last_slots_global"), SLOTS_COOLDOWN)
        if time_left:
            logger.debug(f"User {author_id} d√πng l·ªánh 'slots' khi ƒëang cooldown. C√≤n l·∫°i: {time_left}")
            await try_send(ctx, content=f"{ICON_LOADING} Ch∆°i ch·∫≠m th√¥i! L·ªánh `slots` (to√†n c·ª•c) ch·ªù: **{time_left}**.")
            return
        
        if bet <= 0:
            logger.warning(f"User {author_id} ƒë·∫∑t c∆∞·ª£c kh√¥ng h·ª£p l·ªá (<=0) cho 'slots': {bet}")
            await try_send(ctx, content=f"{ICON_ERROR} Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        if original_global_balance < bet:
            logger.warning(f"User {author_id} kh√¥ng ƒë·ªß ti·ªÅn c∆∞·ª£c {bet} cho 'slots'. S·ªë d∆∞ V√≠ To√†n C·ª•c: {original_global_balance}")
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng ƒë·ªß ti·ªÅn trong V√≠ To√†n C·ª•c! {ICON_MONEY_BAG} V√≠ c·ªßa b·∫°n: **{original_global_balance:,}** {CURRENCY_SYMBOL}.")
            return

        # Tr·ª´ ti·ªÅn c∆∞·ª£c t·ª´ V√≠ To√†n C·ª•c
        user_profile["global_balance"] = original_global_balance - bet
        
        rolls = [random.choice(SLOTS_EMOJIS) for _ in range(3)]
        logger.debug(f"User {author_id} ch∆°i 'slots', k·∫øt qu·∫£ quay: {' | '.join(rolls)}")
        
        header_msg = f"{ICON_SLOTS} M√°y x√®ng quay: **[{' | '.join(rolls)}]** {ICON_SLOTS}\n"
        result_text_for_log = "" 
        result_msg_for_user = "" 
        winnings_payout = 0 

        if rolls[0] == rolls[1] == rolls[2]: 
            winnings_payout = bet * 10 
            result_text_for_log = f"JACKPOT! Th·∫Øng {winnings_payout - bet}" 
            result_msg_for_user = f"üéâ **JACKPOT!** B·∫°n th·∫Øng l·ªõn, nh·∫≠n l·∫°i t·ªïng c·ªông **{winnings_payout:,}** {CURRENCY_SYMBOL}! (L·ªùi **{winnings_payout - bet:,}** {CURRENCY_SYMBOL})"
        elif rolls[0] == rolls[1] or rolls[1] == rolls[2] or rolls[0] == rolls[2]: 
            winnings_payout = bet * 2 
            result_text_for_log = f"Th·∫Øng th∆∞·ªùng. Th·∫Øng {winnings_payout - bet}"
            result_msg_for_user = f"‚ú® Ch√∫c m·ª´ng! B·∫°n th·∫Øng, nh·∫≠n l·∫°i t·ªïng c·ªông **{winnings_payout:,}** {CURRENCY_SYMBOL}! (L·ªùi **{winnings_payout - bet:,}** {CURRENCY_SYMBOL})"
        else: 
            result_text_for_log = f"Thua c∆∞·ª£c {bet}"
            result_msg_for_user = f"üò≠ Ti·∫øc qu√°, b·∫°n thua r·ªìi v√† m·∫•t **{bet:,}** {CURRENCY_SYMBOL}."
            
        if winnings_payout > 0:
            user_profile["global_balance"] += winnings_payout # Ti·ªÅn th·∫Øng ƒë∆∞·ª£c c·ªông v√†o V√≠ To√†n C·ª•c
        
        user_profile["last_slots_global"] = datetime.now().timestamp() # C·∫≠p nh·∫≠t cooldown to√†n c·ª•c
        save_economy_data(economy_data)

        logger.info(f"Guild: {guild_name_for_log} ({guild_id}) - User: {ctx.author.display_name} ({author_id}) ch∆°i 'slots' v·ªõi c∆∞·ª£c {bet:,} {CURRENCY_SYMBOL}. "
                    f"K·∫øt qu·∫£: {' '.join(rolls)}. {result_text_for_log}. "
                    f"V√≠ To√†n C·ª•c: {original_global_balance:,} -> {user_profile['global_balance']:,}.")
        
        final_message_to_user = header_msg + result_msg_for_user + f"\n{ICON_MONEY_BAG} V√≠ To√†n C·ª•c c·ªßa b·∫°n gi·ªù l√†: **{user_profile['global_balance']:,}** {CURRENCY_SYMBOL}."
        await try_send(ctx, content=final_message_to_user)
        logger.debug(f"L·ªánh 'slots' cho {ctx.author.name} t·∫°i guild '{guild_name_for_log}' ({guild_id}) ƒë√£ x·ª≠ l√Ω xong.")

def setup(bot: commands.Bot):
    bot.add_cog(SlotsCommandCog(bot))
