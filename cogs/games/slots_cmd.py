# bot/cogs/games/slots_cmd.py
import nextcord
from nextcord.ext import commands
import random
from datetime import datetime
import logging # <<< TH√äM IMPORT N√ÄY

from core.database import get_user_data, save_data
from core.utils import try_send, get_time_left_str
from core.config import CURRENCY_SYMBOL, SLOTS_COOLDOWN, SLOTS_EMOJIS
from core.icons import ICON_LOADING, ICON_ERROR, ICON_SLOTS, ICON_MONEY_BAG, ICON_INFO # ƒê·∫£m b·∫£o c√≥ ICON_INFO

logger = logging.getLogger(__name__) # <<< L·∫§Y LOGGER CHO MODULE N√ÄY

class SlotsCommandCog(commands.Cog, name="Slots Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.debug(f"SlotsCommandCog initialized.")

    @commands.command(name='slots', aliases=['sl'])
    async def slots(self, ctx: commands.Context, bet: int):
        """Ch∆°i m√°y x√®ng may m·∫Øn! ƒê·∫∑t c∆∞·ª£c v√† th·ª≠ v·∫≠n may."""
        logger.debug(f"L·ªánh 'slots' ƒë∆∞·ª£c g·ªçi b·ªüi {ctx.author.name} (ID: {ctx.author.id}) v·ªõi s·ªë ti·ªÅn c∆∞·ª£c {bet} t·∫°i guild {ctx.guild.id}.")
        
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]

        original_balance = user_data.get("balance", 0) # L·∫•y s·ªë d∆∞ ban ƒë·∫ßu ƒë·ªÉ log

        time_left = get_time_left_str(user_data.get("last_slots"), SLOTS_COOLDOWN)
        if time_left:
            logger.debug(f"User {ctx.author.id} d√πng l·ªánh 'slots' khi ƒëang cooldown. C√≤n l·∫°i: {time_left}")
            await try_send(ctx, content=f"{ICON_LOADING} Ch∆°i ch·∫≠m th√¥i! L·ªánh `slots` ch·ªù: **{time_left}**.")
            return
        
        if bet <= 0:
            logger.warning(f"User {ctx.author.id} ƒë·∫∑t c∆∞·ª£c kh√¥ng h·ª£p l·ªá (<=0) cho 'slots': {bet}")
            await try_send(ctx, content=f"{ICON_ERROR} Ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!")
            return
        if original_balance < bet:
            logger.warning(f"User {ctx.author.id} kh√¥ng ƒë·ªß ti·ªÅn c∆∞·ª£c {bet} cho 'slots'. S·ªë d∆∞: {original_balance}")
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng ƒë·ªß ti·ªÅn! V√≠ c·ªßa b·∫°n: **{original_balance:,}** {CURRENCY_SYMBOL}.")
            return

        user_data["balance"] -= bet 
        rolls = [random.choice(SLOTS_EMOJIS) for _ in range(3)]
        logger.debug(f"User {ctx.author.id} ch∆°i 'slots', k·∫øt qu·∫£ quay: {' | '.join(rolls)}")
        
        header_msg = f"{ICON_SLOTS} M√°y x√®ng quay: **[{' | '.join(rolls)}]** {ICON_SLOTS}\n"
        result_text_for_log = "" # ƒê·ªÉ ghi log k·∫øt qu·∫£
        result_msg_for_user = "" # ƒê·ªÉ g·ª≠i cho ng∆∞·ªùi d√πng
        winnings_payout = 0 

        if rolls[0] == rolls[1] == rolls[2]: 
            winnings_payout = bet * 10 
            result_text_for_log = f"JACKPOT! Th·∫Øng {winnings_payout - bet}" # L·ªùi
            result_msg_for_user = f"üéâ **JACKPOT!** B·∫°n th·∫Øng l·ªõn, nh·∫≠n l·∫°i t·ªïng c·ªông **{winnings_payout:,}** {CURRENCY_SYMBOL}! (L·ªùi **{winnings_payout - bet:,}** {CURRENCY_SYMBOL})"
        elif rolls[0] == rolls[1] or rolls[1] == rolls[2] or rolls[0] == rolls[2]: 
            winnings_payout = bet * 2 
            result_text_for_log = f"Th·∫Øng th∆∞·ªùng. Th·∫Øng {winnings_payout - bet}" # L·ªùi
            result_msg_for_user = f"‚ú® Ch√∫c m·ª´ng! B·∫°n th·∫Øng, nh·∫≠n l·∫°i t·ªïng c·ªông **{winnings_payout:,}** {CURRENCY_SYMBOL}! (L·ªùi **{winnings_payout - bet:,}** {CURRENCY_SYMBOL})"
        else: 
            result_text_for_log = f"Thua c∆∞·ª£c {bet}"
            result_msg_for_user = f"üò≠ Ti·∫øc qu√°, b·∫°n thua r·ªìi v√† m·∫•t **{bet:,}** {CURRENCY_SYMBOL}."
            
        if winnings_payout > 0:
            user_data["balance"] += winnings_payout
        
        user_data["last_slots"] = datetime.now().timestamp()
        save_data(data)

        # Ghi log h√†nh ƒë·ªông c·ªßa ng∆∞·ªùi ch∆°i
        logger.info(f"User {ctx.author.display_name} ({ctx.author.id}) ch∆°i 'slots' v·ªõi c∆∞·ª£c {bet:,} {CURRENCY_SYMBOL}. "
                    f"K·∫øt qu·∫£: {' '.join(rolls)}. {result_text_for_log}. "
                    f"S·ªë d∆∞: {original_balance:,} -> {user_data['balance']:,}.")
        
        final_message_to_user = header_msg + result_msg_for_user + f"\n{ICON_MONEY_BAG} V√≠ c·ªßa b·∫°n gi·ªù l√†: **{user_data['balance']:,}** {CURRENCY_SYMBOL}."
        await try_send(ctx, content=final_message_to_user)
        logger.debug(f"L·ªánh 'slots' cho {ctx.author.name} ƒë√£ x·ª≠ l√Ω xong.")

def setup(bot: commands.Bot):
    bot.add_cog(SlotsCommandCog(bot))
