# bot/cogs/misc.py
import nextcord
from nextcord.ext import commands

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from core.database import load_data # Leaderboard/richest th∆∞·ªùng load to√†n b·ªô data ƒë·ªÉ s·∫Øp x·∫øp
from core.utils import try_send
from core.config import (
    COMMAND_PREFIX, CURRENCY_SYMBOL, WORK_COOLDOWN, DAILY_COOLDOWN,
    BEG_COOLDOWN, ROB_COOLDOWN, CRIME_COOLDOWN, FISH_COOLDOWN,
    SLOTS_COOLDOWN, CF_COOLDOWN, DICE_COOLDOWN
)

class MiscCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command(name='leaderboard', aliases=['lb', 'top'])
    async def leaderboard(self, ctx: commands.Context, page: int = 1):
        """Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng nh·ªØng ng∆∞·ªùi gi√†u nh·∫•t server."""
        data = load_data() # Load to√†n b·ªô d·ªØ li·ªáu t·ª´ file
        guild_id = str(ctx.guild.id)

        # Ki·ªÉm tra xem guild c√≥ d·ªØ li·ªáu kh√¥ng, v√† d·ªØ li·ªáu ƒë√≥ c√≥ ph·∫£i ch·ªâ l√† 'config' kh√¥ng
        if guild_id not in data or not data[guild_id] or all(key == "config" for key in data[guild_id]):
            await try_send(ctx, content="Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng c·ªßa server n√†y!")
            return

        # L·ªçc ra ch·ªâ d·ªØ li·ªáu ng∆∞·ªùi d√πng, lo·∫°i b·ªè 'config' v√† c√°c entry kh√¥ng ph·∫£i dict
        guild_user_data = {
            uid: udata for uid, udata in data[guild_id].items()
            if uid != "config" and isinstance(udata, dict) and ("balance" in udata or "bank_balance" in udata)
        }
        
        if not guild_user_data: # N·∫øu sau khi l·ªçc kh√¥ng c√≤n user n√†o
            await try_send(ctx, content="Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng c·ªßa server n√†y!")
            return
            
        # S·∫Øp x·∫øp ng∆∞·ªùi d√πng theo t·ªïng t√†i s·∫£n (v√≠ + ng√¢n h√†ng)
        sorted_users = sorted(
            guild_user_data.items(), # items() tr·∫£ v·ªÅ list c√°c (user_id, user_data_dict)
            key=lambda item: item[1].get('balance', 0) + item[1].get('bank_balance', 0),
            reverse=True # S·∫Øp x·∫øp gi·∫£m d·∫ßn
        )

        items_per_page = 10 # S·ªë ng∆∞·ªùi d√πng hi·ªÉn th·ªã tr√™n m·ªói trang
        start_index = (page - 1) * items_per_page
        end_index = start_index + items_per_page
        total_pages = (len(sorted_users) + items_per_page - 1) // items_per_page # T√≠nh t·ªïng s·ªë trang

        if not sorted_users and page == 1: # Tr∆∞·ªùng h·ª£p n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü tr√™n
            await try_send(ctx, content="Kh√¥ng c√≥ ai ƒë·ªÉ x·∫øp h·∫°ng!")
            return
        if (page < 1 or page > total_pages) and total_pages > 0 :
            await try_send(ctx, content=f"S·ªë trang kh√¥ng h·ª£p l·ªá. Server n√†y ch·ªâ c√≥ {total_pages} trang b·∫£ng x·∫øp h·∫°ng.")
            return
        elif page < 1 and total_pages == 0 : # Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ai v√† page < 1
             await try_send(ctx, content="Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng!")
             return

        embed = nextcord.Embed(
            title=f"üèÜ B·∫£ng X·∫øp H·∫°ng Gi√†u Nh·∫•t - {ctx.guild.name} üèÜ",
            color=nextcord.Color.gold()
        )
        description_parts = []
        rank = start_index + 1 # Th·ª© h·∫°ng b·∫Øt ƒë·∫ßu t·ª´ trang hi·ªán t·∫°i

        for user_id_str, user_data_dict in sorted_users[start_index:end_index]:
            try:
                user_obj = await self.bot.fetch_user(int(user_id_str)) # L·∫•y ƒë·ªëi t∆∞·ª£ng user t·ª´ ID
                total_wealth = user_data_dict.get('balance', 0) + user_data_dict.get('bank_balance', 0)
                description_parts.append(f"{rank}. {user_obj.name} - **{total_wealth:,}** {CURRENCY_SYMBOL}")
                rank += 1
            except (nextcord.NotFound, ValueError, KeyError) as e:
                print(f"Leaderboard: Kh√¥ng th·ªÉ fetch/x·ª≠ l√Ω user ID {user_id_str}. L·ªói: {e}")
                continue # B·ªè qua user n√†y n·∫øu c√≥ l·ªói
        
        if not description_parts and total_pages > 0 and page <= total_pages :
            # C√≥ th·ªÉ x·∫£y ra n·∫øu t·∫•t c·∫£ user tr√™n trang n√†y ƒë·ªÅu kh√¥ng fetch ƒë∆∞·ª£c
            await try_send(ctx, content="Kh√¥ng th·ªÉ t·∫°o b·∫£ng x·∫øp h·∫°ng cho trang n√†y (c√≥ th·ªÉ do l·ªói fetch th√¥ng tin ng∆∞·ªùi d√πng).")
            return
        if not description_parts and (total_pages == 0 or page > total_pages) :
             await try_send(ctx, content="Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng ho·∫∑c trang kh√¥ng t·ªìn t·∫°i.")
             return

        embed.description = "\n".join(description_parts)
        embed.set_footer(text=f"Trang {page}/{total_pages} | Y√™u c·∫ßu b·ªüi {ctx.author.name}")
        await try_send(ctx, embed=embed)

    @commands.command(name='richest')
    async def richest(self, ctx: commands.Context):
        """Hi·ªÉn th·ªã ng∆∞·ªùi gi√†u nh·∫•t tr√™n server."""
        data = load_data()
        guild_id = str(ctx.guild.id)

        if guild_id not in data or not data[guild_id] or all(key == "config" for key in data[guild_id]):
            await try_send(ctx, content="Ch∆∞a c√≥ ai ƒë·ªÉ x·∫øp h·∫°ng tr√™n server n√†y!")
            return
        
        guild_user_data = {
            uid: udata for uid, udata in data[guild_id].items()
            if uid != "config" and isinstance(udata, dict) and ("balance" in udata or "bank_balance" in udata)
        }
        if not guild_user_data:
            await try_send(ctx, content="Ch∆∞a c√≥ ai ƒë·ªÉ x·∫øp h·∫°ng tr√™n server n√†y!")
            return
            
        sorted_users = sorted(
            guild_user_data.items(),
            key=lambda item: item[1].get('balance', 0) + item[1].get('bank_balance', 0),
            reverse=True
        )

        if not sorted_users: # N·∫øu kh√¥ng c√≥ ai sau khi s·∫Øp x·∫øp (d√π ƒë√£ ki·ªÉm tra guild_user_data)
            await try_send(ctx, content="Ch∆∞a c√≥ ai ƒë·ªÉ x·∫øp h·∫°ng tr√™n server n√†y!")
            return

        top_user_id, top_user_data_dict = sorted_users[0] # L·∫•y ng∆∞·ªùi ƒë·ª©ng ƒë·∫ßu
        try:
            user_obj = await self.bot.fetch_user(int(top_user_id))
            total_wealth = top_user_data_dict.get('balance', 0) + top_user_data_dict.get('bank_balance', 0)
            await try_send(ctx, content=f"üëë Ng∆∞·ªùi gi√†u nh·∫•t server l√† **{user_obj.name}** v·ªõi t·ªïng t√†i s·∫£n **{total_wealth:,}** {CURRENCY_SYMBOL}!")
        except (nextcord.NotFound, ValueError, KeyError) as e:
            print(f"Richest: Kh√¥ng th·ªÉ fetch/x·ª≠ l√Ω user ID {top_user_id}. L·ªói: {e}")
            await try_send(ctx, content="Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi gi√†u nh·∫•t (c√≥ th·ªÉ do l·ªói fetch user).")


    @nextcord.slash_command(name="help", description="Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p cho c√°c l·ªánh c·ªßa bot.")
    async def help_slash_command(self,
                                 interaction: nextcord.Interaction,
                                 command_name: str = nextcord.SlashOption(
                                     name="t√™n_l·ªánh", # T√™n tham s·ªë hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
                                     description="T√™n l·ªánh (c√≥ prefix) b·∫°n mu·ªën xem chi ti·∫øt.",
                                     required=False, # Tham s·ªë n√†y kh√¥ng b·∫Øt bu·ªôc
                                     default=None    # Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
                                 )):
        """Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh ho·∫∑c th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh (prefix) c·ª• th·ªÉ."""
        prefix = COMMAND_PREFIX # L·∫•y prefix t·ª´ config
        
        if not command_name: # N·∫øu kh√¥ng c√≥ t√™n l·ªánh c·ª• th·ªÉ, hi·ªÉn th·ªã help chung
            embed = nextcord.Embed(
                title="üìú Menu Tr·ª£ Gi√∫p - Bot Kinh T·∫ø üìú",
                description=(
                    f"C√°c l·ªánh c·ªßa bot s·ª≠ d·ª•ng prefix `{prefix}`. \n"
                    f"ƒê·ªÉ xem chi ti·∫øt m·ªôt l·ªánh, g√µ `/help t√™n_l·ªánh <t√™n_l·ªánh_prefix>` (v√≠ d·ª•: `/help t√™n_l·ªánh work`).\n"
                    f"Qu·∫£n tr·ªã vi√™n c√≥ th·ªÉ b·∫≠t l·ªánh kh√¥ng c·∫ßn prefix cho k√™nh b·∫±ng l·ªánh `{prefix}auto`."
                ),
                color=nextcord.Color.blurple()
            )
            # Ph√¢n lo·∫°i l·ªánh cho d·ªÖ nh√¨n
            embed.add_field(name="üè¶ T√†i Kho·∫£n & Kinh T·∫ø", value="`balance` (bal, $, cash, money), `bank`, `deposit` (dep), `withdraw` (wd), `transfer` (give, pay), `leaderboard` (lb, top), `richest`", inline=False)
            embed.add_field(name="üí∏ Ki·∫øm Ti·ªÅn", value="`work` (w), `daily` (d), `beg` (b
