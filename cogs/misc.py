# bot/cogs/misc.py
import nextcord
from nextcord.ext import commands

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from core.database import load_data
from core.utils import try_send
from core.config import (
    COMMAND_PREFIX, CURRENCY_SYMBOL, WORK_COOLDOWN, DAILY_COOLDOWN,
    BEG_COOLDOWN, ROB_COOLDOWN, CRIME_COOLDOWN, FISH_COOLDOWN,
    SLOTS_COOLDOWN, CF_COOLDOWN, DICE_COOLDOWN
)

class MiscCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    # ... (c√°c l·ªánh leaderboard, richest gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc) ...
    @commands.command(name='leaderboard', aliases=['lb', 'top'])
    async def leaderboard(self, ctx: commands.Context, page: int = 1):
        """Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng nh·ªØng ng∆∞·ªùi gi√†u nh·∫•t server."""
        data = load_data() 
        guild_id = str(ctx.guild.id)

        if guild_id not in data or not data[guild_id] or all(key == "config" for key in data[guild_id]):
            await try_send(ctx, content="Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng c·ªßa server n√†y!")
            return

        guild_user_data = {
            uid: udata for uid, udata in data[guild_id].items()
            if uid != "config" and isinstance(udata, dict) and ("balance" in udata or "bank_balance" in udata)
        }
        
        if not guild_user_data: 
            await try_send(ctx, content="Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng c·ªßa server n√†y!")
            return
            
        sorted_users = sorted(
            guild_user_data.items(), 
            key=lambda item: item[1].get('balance', 0) + item[1].get('bank_balance', 0),
            reverse=True 
        )

        items_per_page = 10 
        start_index = (page - 1) * items_per_page
        end_index = start_index + items_per_page
        total_pages = (len(sorted_users) + items_per_page - 1) // items_per_page 

        if not sorted_users and page == 1: 
            await try_send(ctx, content="Kh√¥ng c√≥ ai ƒë·ªÉ x·∫øp h·∫°ng!")
            return
        if (page < 1 or page > total_pages) and total_pages > 0 :
            await try_send(ctx, content=f"S·ªë trang kh√¥ng h·ª£p l·ªá. Server n√†y ch·ªâ c√≥ {total_pages} trang b·∫£ng x·∫øp h·∫°ng.")
            return
        elif page < 1 and total_pages == 0 : 
             await try_send(ctx, content="Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng!")
             return

        embed = nextcord.Embed(
            title=f"üèÜ B·∫£ng X·∫øp H·∫°ng Gi√†u Nh·∫•t - {ctx.guild.name} üèÜ",
            color=nextcord.Color.gold()
        )
        description_parts = []
        rank = start_index + 1 

        for user_id_str, user_data_dict in sorted_users[start_index:end_index]:
            try:
                user_obj = await self.bot.fetch_user(int(user_id_str)) 
                total_wealth = user_data_dict.get('balance', 0) + user_data_dict.get('bank_balance', 0)
                description_parts.append(f"{rank}. {user_obj.name} - **{total_wealth:,}** {CURRENCY_SYMBOL}")
                rank += 1
            except (nextcord.NotFound, ValueError, KeyError) as e:
                print(f"Leaderboard: Kh√¥ng th·ªÉ fetch/x·ª≠ l√Ω user ID {user_id_str}. L·ªói: {e}")
                continue 
        
        if not description_parts and total_pages > 0 and page <= total_pages :
            await try_send(ctx, content="Kh√¥ng th·ªÉ t·∫°o b·∫£ng x·∫øp h·∫°ng cho trang n√†y (c√≥ th·ªÉ do l·ªói fetch th√¥ng tin ng∆∞·ªùi d√πng).")
            return
        if not description_parts and (total_pages == 0 or page > total_pages) :
             await try_send(ctx, content="Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng ho·∫∑c trang kh√¥ng t·ªìn t·∫°i.")
             return

        embed.description = "\n".join(description_parts)
        embed.set_footer(text=f"Trang {page}/{total_pages} | Y√™u c·∫ßu b·ªüi {ctx.author.name}")
        await try_send(ctx, embed=embed)

    @commands.command(name='richest')
    async def richest(self, ctx: commands.Context):
        """Hi·ªÉn th·ªã ng∆∞·ªùi gi√†u nh·∫•t tr√™n server."""
        data = load_data()
        guild_id = str(ctx.guild.id)

        if guild_id not in data or not data[guild_id] or all(key == "config" for key in data[guild_id]):
            await try_send(ctx, content="Ch∆∞a c√≥ ai ƒë·ªÉ x·∫øp h·∫°ng tr√™n server n√†y!")
            return
        
        guild_user_data = {
            uid: udata for uid, udata in data[guild_id].items()
            if uid != "config" and isinstance(udata, dict) and ("balance" in udata or "bank_balance" in udata)
        }
        if not guild_user_data:
            await try_send(ctx, content="Ch∆∞a c√≥ ai ƒë·ªÉ x·∫øp h·∫°ng tr√™n server n√†y!")
            return
            
        sorted_users = sorted(
            guild_user_data.items(),
            key=lambda item: item[1].get('balance', 0) + item[1].get('bank_balance', 0),
            reverse=True
        )

        if not sorted_users: 
            await try_send(ctx, content="Ch∆∞a c√≥ ai ƒë·ªÉ x·∫øp h·∫°ng tr√™n server n√†y!")
            return

        top_user_id, top_user_data_dict = sorted_users[0] 
        try:
            user_obj = await self.bot.fetch_user(int(top_user_id))
            total_wealth = top_user_data_dict.get('balance', 0) + top_user_data_dict.get('bank_balance', 0)
            await try_send(ctx, content=f"üëë Ng∆∞·ªùi gi√†u nh·∫•t server l√† **{user_obj.name}** v·ªõi t·ªïng t√†i s·∫£n **{total_wealth:,}** {CURRENCY_SYMBOL}!")
        except (nextcord.NotFound, ValueError, KeyError) as e:
            print(f"Richest: Kh√¥ng th·ªÉ fetch/x·ª≠ l√Ω user ID {top_user_id}. L·ªói: {e}")
            await try_send(ctx, content="Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi gi√†u nh·∫•t (c√≥ th·ªÉ do l·ªói fetch user).")
    
    @nextcord.slash_command(name="help", description="‚ÑπÔ∏è Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p cho c√°c l·ªánh c·ªßa bot.")
    async def help_slash_command(self,
                                 interaction: nextcord.Interaction,
                                 command_name: str = nextcord.SlashOption(
                                     name="l·ªánh", # ƒê·ªïi t√™n hi·ªÉn th·ªã cho th√¢n thi·ªán h∆°n
                                     description="T√™n l·ªánh prefix b·∫°n mu·ªën xem chi ti·∫øt (v√≠ d·ª•: work, balance).",
                                     required=False,
                                     default=None
                                 )):
        """Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh ho·∫∑c th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh (prefix) c·ª• th·ªÉ."""
        prefix = COMMAND_PREFIX
        
        if not command_name: # Hi·ªÉn th·ªã menu tr·ª£ gi√∫p chung
            embed = nextcord.Embed(
                title="üìú Menu Tr·ª£ Gi√∫p - Bot Kinh T·∫ø üìú",
                description=(
                    f"Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot Kinh T·∫ø! D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng.\n"
                    f"ƒê·ªÉ xem chi ti·∫øt m·ªôt l·ªánh, d√πng `/help l·ªánh <t√™n_l·ªánh>` (v√≠ d·ª•: `/help l·ªánh work`).\n"
                    f"*L∆∞u √Ω: H·∫ßu h·∫øt c√°c l·ªánh ƒë·ªÅu c√≥ t√™n g·ªçi t·∫Øt (alias) ƒë∆∞·ª£c li·ªát k√™ trong chi ti·∫øt l·ªánh.*\n"
                    f"Qu·∫£n tr·ªã vi√™n c√≥ th·ªÉ d√πng `{prefix}auto` ƒë·ªÉ b·∫≠t/t·∫Øt l·ªánh kh√¥ng c·∫ßn prefix trong m·ªôt k√™nh."
                ),
                color=nextcord.Color.dark_embed() # Th·ª≠ m√†u kh√°c cho ƒë·∫πp
            )
            
            # Danh s√°ch c√°c l·ªánh ƒë∆∞·ª£c ph√¢n lo·∫°i (ƒë·∫£m b·∫£o c·∫≠p nh·∫≠t khi th√™m/x√≥a l·ªánh)
            embed.add_field(name="üè¶ T√†i Kho·∫£n & T·ªïng Quan",
                            value="`balance` `bank` `deposit` `withdraw` `transfer` `leaderboard` `richest` `inventory`",
                            inline=False)
            embed.add_field(name="üí∏ Ki·∫øm Ti·ªÅn & C∆° H·ªôi",
                            value="`work` `daily` `beg` `crime` `fish` `rob`",
                            inline=False)
            embed.add_field(name="üé≤ Gi·∫£i Tr√≠ & C·ªù B·∫°c",
                            value="`slots` `coinflip` `dice`",
                            inline=False)
            embed.add_field(name="üè™ C·ª≠a H√†ng V·∫≠t Ph·∫©m",
                            value="`shop` `buy` `sell`",
                            inline=False)
            embed.add_field(name="üëë Qu·∫£n Tr·ªã Server (L·ªánh Prefix)",
                            value=f"`{prefix}addmoney` `{prefix}removemoney` `{prefix}auto` `{prefix}mutebot` `{prefix}unmutebot`",
                            inline=False)
            
            embed.set_footer(text=f"Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi [T√™n c·ªßa b·∫°n ho·∫∑c Bot]. G√µ /help l·ªánh <t√™n_l·ªánh> ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
            await try_send(interaction, embed=embed, ephemeral=True)
        else:
            # Hi·ªÉn th·ªã chi ti·∫øt cho m·ªôt l·ªánh c·ª• th·ªÉ
            cmd_name_to_find = command_name.lower().lstrip(prefix) # Ng∆∞·ªùi d√πng c√≥ th·ªÉ g√µ "work" ho·∫∑c "!work"
            command_obj = self.bot.get_command(cmd_name_to_find)
            
            if not command_obj:
                await try_send(interaction, content=f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªánh prefix n√†o c√≥ t√™n l√† `{command_name}`. H√£y ch·∫Øc ch·∫Øn b·∫°n nh·∫≠p ƒë√∫ng t√™n l·ªánh (v√≠ d·ª•: `work`, `balance` ho·∫∑c t√™n g·ªçi t·∫Øt c·ªßa n√≥).", ephemeral=True)
                return

            embed = nextcord.Embed(title=f"üìò Chi ti·∫øt l·ªánh: {prefix}{command_obj.name}", color=nextcord.Color.green())
            
            # M√¥ t·∫£ l·ªánh (l·∫•y t·ª´ docstring)
            help_text = command_obj.help # Docstring ƒë·∫ßy ƒë·ªß
            if not help_text:
                help_text = command_obj.short_doc or "L·ªánh n√†y ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt." # M√¥ t·∫£ ng·∫Øn n·∫øu c√≥
            embed.description = help_text

            # C√°ch s·ª≠ d·ª•ng (signature)
            usage = f"`{prefix}{command_obj.name} {command_obj.signature}`".strip()
            embed.add_field(name="üìù C√°ch s·ª≠ d·ª•ng", value=usage, inline=False)

            # T√™n g·ªçi kh√°c (aliases)
            if command_obj.aliases:
                aliases_str = ", ".join([f"`{prefix}{alias}`" for alias in command_obj.aliases])
                embed.add_field(name="üè∑Ô∏è T√™n g·ªçi kh√°c (Aliases)", value=aliases_str, inline=False)
            else:
                embed.add_field(name="üè∑Ô∏è T√™n g·ªçi kh√°c (Aliases)", value="L·ªánh n√†y kh√¥ng c√≥ t√™n g·ªçi t·∫Øt.", inline=False)


            # Th√¥ng tin cooldown (l·∫•y t·ª´ config)
            manual_cooldown_commands = {
                "work": WORK_COOLDOWN, "daily": DAILY_COOLDOWN, "beg": BEG_COOLDOWN,
                "rob": ROB_COOLDOWN, "crime": CRIME_COOLDOWN, "fish": FISH_COOLDOWN,
                "slots": SLOTS_COOLDOWN, "coinflip": CF_COOLDOWN, "dice": DICE_COOLDOWN
            }
            if command_obj.name in manual_cooldown_commands:
                cd_seconds = manual_cooldown_commands[command_obj.name]
                if cd_seconds >= 3600 and cd_seconds % 3600 == 0: cd_text = f"{cd_seconds // 3600} gi·ªù"
                elif cd_seconds >= 60 and cd_seconds % 60 == 0: cd_text = f"{cd_seconds // 60} ph√∫t"
                else: cd_text = f"{cd_seconds} gi√¢y"
                embed.add_field(name="‚è≥ Th·ªùi gian ch·ªù (Cooldown)", value=cd_text, inline=False)

            # Y√™u c·∫ßu quy·ªÅn h·∫°n (v√≠ d·ª•)
            if command_obj.name in ["addmoney", "removemoney"]:
                embed.add_field(name="üîë Y√™u c·∫ßu", value="Ch·ªâ Ch·ªß Server (Ng∆∞·ªùi t·∫°o server).", inline=False)
            elif command_obj.name in ["auto", "mutebot", "unmutebot"]:
                embed.add_field(name="üîë Y√™u c·∫ßu", value="Quy·ªÅn `Administrator` trong server.", inline=False)
            
            await try_send(interaction, embed=embed, ephemeral=True)

# H√†m setup ƒë·ªÉ bot c√≥ th·ªÉ load cog n√†y
def setup(bot: commands.Bot):
    bot.add_cog(MiscCog(bot))

