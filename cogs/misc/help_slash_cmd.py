import nextcord
from nextcord.ext import commands
import logging
from typing import List, Dict, Any

from core.config import COMMAND_PREFIX
from core.icons import ICON_HELP, ICON_COMMAND_DETAIL, ICON_BANK, ICON_MONEY_BAG, ICON_GAME, ICON_SHOP, ICON_ADMIN, ICON_INFO, ICON_WARNING, ICON_ERROR
from core.utils import try_send

logger = logging.getLogger(__name__)

# --- View cho Menu ---
class HelpMenuView(nextcord.ui.View):
    def __init__(self, cogs_data: List[Dict[str, Any]], original_author: nextcord.User, bot: commands.Bot):
        super().__init__(timeout=180)
        self.cogs_data = cogs_data
        self.original_author = original_author
        self.bot = bot
        self.message = None

        options = [
            nextcord.SelectOption(label="Trang ch√≠nh", description="Quay v·ªÅ menu tr·ª£ gi√∫p ch√≠nh.", emoji="üè†", value="main_menu")
        ]
        for cog in cogs_data:
            options.append(
                nextcord.SelectOption(label=cog["name"], description=cog["description"], emoji=cog["emoji"], value=cog["id"])
            )
        
        self.add_item(nextcord.ui.Select(placeholder="Ch·ªçn m·ªôt m·ª•c ƒë·ªÉ xem...", options=options, custom_id="help_menu_select"))

    async def interaction_check(self, interaction: nextcord.Interaction) -> bool:
        if interaction.user.id != self.original_author.id:
            await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i l√† menu c·ªßa b·∫°n!", ephemeral=True)
            return False
        return True

    async def callback(self, interaction: nextcord.Interaction):
        # Callback cho Select Menu
        try:
            await interaction.response.defer(ephemeral=True) # Defer ƒë·ªÉ c√≥ th·ªùi gian x·ª≠ l√Ω
            
            selected_value = interaction.data['values'][0]
            new_embed = None

            if selected_value == "main_menu":
                new_embed = self._create_main_embed()
            else:
                for cog in self.cogs_data:
                    if cog["id"] == selected_value:
                        new_embed = self._create_cog_embed(cog)
                        break
            
            if new_embed and self.message:
                await self.message.edit(embed=new_embed, view=self)

        except Exception as e:
            logger.error(f"L·ªói trong callback c·ªßa HelpMenuView: {e}", exc_info=True)


    def _create_main_embed(self) -> nextcord.Embed:
        return nextcord.Embed(
            title=f"{ICON_HELP} Menu Tr·ª£ gi√∫p",
            description="Ch√†o m·ª´ng ƒë·∫øn v·ªõi EconZone! Vui l√≤ng ch·ªçn m·ªôt m·ª•c t·ª´ menu b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt c√°c l·ªánh.",
            color=nextcord.Color.blue()
        ).set_footer(text="Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi minhbeo8")

    def _create_cog_embed(self, cog_info: Dict[str, Any]) -> nextcord.Embed:
        embed = nextcord.Embed(title=f"{cog_info['emoji']} {cog_info['name']}", description=cog_info["description"], color=nextcord.Color.blue())
        for cmd in cog_info["commands"]:
            command_obj = self.bot.get_command(cmd)
            if command_obj:
                usage = f"`{COMMAND_PREFIX}{command_obj.name} {command_obj.signature}`".strip()
                help_text = command_obj.short_doc or "Ch∆∞a c√≥ m√¥ t·∫£."
                embed.add_field(name=f"`{COMMAND_PREFIX}{command_obj.name}`", value=f"{help_text}\n*C√°ch d√πng: {usage}*", inline=False)
        return embed


# --- Cog ch√≠nh ---
class HelpSlashCommandCog(commands.Cog, name="Help Slash Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # D·ªØ li·ªáu cho menu, b·∫°n c√≥ th·ªÉ d·ªÖ d√†ng th√™m/b·ªõt m·ª•c ·ªü ƒë√¢y
        self.cogs_data = [
            {"id": "economy", "name": "L·ªánh Kinh t·∫ø", "description": "C√°c l·ªánh li√™n quan ƒë·∫øn ti·ªÅn t·ªá, t√†i kho·∫£n.", "emoji": ICON_MONEY_BAG, "commands": ["balance", "deposit", "withdraw", "transfer"]},
            {"id": "earning", "name": "L·ªánh Ki·∫øm ti·ªÅn", "description": "C√°c c√°ch ƒë·ªÉ ki·∫øm th√™m thu nh·∫≠p.", "emoji": "üíº", "commands": ["work", "daily", "crime", "fish", "rob", "beg"]},
            {"id": "games", "name": "L·ªánh Tr√≤ ch∆°i", "description": "C√°c tr√≤ ch∆°i may r·ªßi.", "emoji": ICON_GAME, "commands": ["coinflip", "dice", "slots"]},
            {"id": "shop", "name": "L·ªánh C·ª≠a h√†ng", "description": "C√°c l·ªánh li√™n quan ƒë·∫øn mua, b√°n v√† t√∫i ƒë·ªì.", "emoji": ICON_SHOP, "commands": ["shop", "buy", "sell", "inventory"]},
        ]

    @nextcord.slash_command(name="menu", description="M·ªü menu tr·ª£ gi√∫p ch√≠nh c·ªßa bot.")
    async def menu_slash_command(self, interaction: nextcord.Interaction):
        # [S·ª¨A] B·ªçc to√†n b·ªô logic trong try...except
        try:
            # Defer ngay l·∫≠p t·ª©c ƒë·ªÉ b√°o cho Discord r·∫±ng "t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c l·ªánh"
            await interaction.response.defer(ephemeral=True)

            initial_embed = nextcord.Embed(
                title=f"{ICON_INFO} Menu Tr·ª£ gi√∫p",
                description="Ch√†o m·ª´ng ƒë·∫øn v·ªõi EconZone! Vui l√≤ng ch·ªçn m·ªôt m·ª•c t·ª´ menu b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt c√°c l·ªánh.",
                color=nextcord.Color.blue()
            )
            initial_embed.set_footer(text="Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi minhbeo8")
            
            view = HelpMenuView(self.cogs_data, interaction.user, self.bot)

            # G·ª≠i tin nh·∫Øn tr·∫£ l·ªùi b·∫±ng followup v√¨ ƒë√£ defer
            await interaction.followup.send(embed=initial_embed, view=view, ephemeral=True)
            view.message = await interaction.original_message()

        except nextcord.errors.HTTPException as e:
            # Ghi l·∫°i log khi c√≥ l·ªói timeout ho·∫∑c double-ack, thay v√¨ l√†m s·∫≠p ch∆∞∆°ng tr√¨nh
            logger.warning(f"L·ªói khi ph·∫£n h·ªìi t∆∞∆°ng t√°c /menu (c√≥ th·ªÉ do timeout): {e}")
            pass # B·ªè qua l·ªói v√† kh√¥ng l√†m g√¨ c·∫£, bot v·∫´n ch·∫°y ti·∫øp
        except Exception as e:
            # B·∫Øt c√°c l·ªói kh√¥ng l∆∞·ªùng tr∆∞·ªõc kh√°c
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong /menu: {e}", exc_info=True)

def setup(bot: commands.Bot):
    bot.add_cog(HelpSlashCommandCog(bot))
