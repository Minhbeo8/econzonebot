import nextcord
from nextcord.ext import commands
import logging
import math
from typing import List, Dict, Any

from core.config import COMMAND_PREFIX
from core.icons import ICON_HELP, ICON_MONEY_BAG, ICON_GAME, ICON_SHOP, ICON_INFO
from core.utils import try_send

logger = logging.getLogger(__name__)

# S·ªë danh m·ª•c l·ªánh hi·ªÉn th·ªã tr√™n m·ªói trang c·ªßa dropdown
CATEGORIES_PER_PAGE = 20

class HelpMenuView(nextcord.ui.View):
    def __init__(self, cogs_data: List[Dict[str, Any]], original_author: nextcord.User, bot: commands.Bot):
        super().__init__(timeout=180)
        self.cogs_data = cogs_data
        self.original_author = original_author
        self.bot = bot
        self.message = None
        
        self.current_category_page = 0
        self.total_category_pages = math.ceil(len(self.cogs_data) / CATEGORIES_PER_PAGE)

        self.update_view_components()

    def update_view_components(self):
        """T·∫°o l·∫°i c√°c th√†nh ph·∫ßn c·ªßa View (dropdown, n√∫t) d·ª±a tr√™n trang danh m·ª•c hi·ªán t·∫°i."""
        self.clear_items()

        # --- T·∫°o Dropdown Menu ---
        start_index = self.current_category_page * CATEGORIES_PER_PAGE
        end_index = start_index + CATEGORIES_PER_PAGE
        page_cogs = self.cogs_data[start_index:end_index]

        options = [
            nextcord.SelectOption(label="Trang ch√≠nh", description="Quay v·ªÅ menu tr·ª£ gi√∫p ch√≠nh.", emoji="üè†", value="main_menu")
        ]
        for cog in page_cogs:
            options.append(
                nextcord.SelectOption(label=cog["name"], description=cog["description"], emoji=cog["emoji"], value=cog["id"])
            )
        
        select_menu = nextcord.ui.Select(placeholder="Ch·ªçn m·ªôt m·ª•c ƒë·ªÉ xem...", options=options, custom_id="help_menu_select")
        select_menu.callback = self.on_select_callback
        self.add_item(select_menu)

        # --- T·∫°o c√°c n√∫t b·∫•m ph√¢n trang danh m·ª•c ---
        prev_button = nextcord.ui.Button(label="‚óÄÔ∏è", style=nextcord.ButtonStyle.secondary, custom_id="prev_cat_page")
        prev_button.disabled = self.current_category_page == 0
        prev_button.callback = self.go_to_prev_page
        
        next_button = nextcord.ui.Button(label="‚ñ∂Ô∏è", style=nextcord.ButtonStyle.secondary, custom_id="next_cat_page")
        next_button.disabled = self.current_category_page >= self.total_category_pages - 1
        next_button.callback = self.go_to_next_page
        
        self.add_item(prev_button)
        self.add_item(next_button)

    async def interaction_check(self, interaction: nextcord.Interaction) -> bool:
        if interaction.user.id != self.original_author.id:
            await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i l√† menu c·ªßa b·∫°n!", ephemeral=True)
            return False
        return True

    async def go_to_prev_page(self, interaction: nextcord.Interaction):
        if self.current_category_page > 0:
            self.current_category_page -= 1
            self.update_view_components()
            # Khi chuy·ªÉn trang danh m·ª•c, quay v·ªÅ embed ch√≠nh
            main_embed = self._create_main_embed()
            await interaction.response.edit_message(embed=main_embed, view=self)

    async def go_to_next_page(self, interaction: nextcord.Interaction):
        if self.current_category_page < self.total_category_pages - 1:
            self.current_category_page += 1
            self.update_view_components()
            main_embed = self._create_main_embed()
            await interaction.response.edit_message(embed=main_embed, view=self)

    async def on_select_callback(self, interaction: nextcord.Interaction):
        try:
            selected_value = interaction.data['values'][0]
            new_embed = None

            if selected_value == "main_menu":
                new_embed = self._create_main_embed()
            else:
                for cog in self.cogs_data:
                    if cog["id"] == selected_value:
                        new_embed = self._create_cog_embed(cog)
                        break
            
            if new_embed and self.message:
                await interaction.response.edit_message(embed=new_embed, view=self)

        except Exception as e:
            logger.error(f"L·ªói trong callback c·ªßa HelpMenuView: {e}", exc_info=True)

    def _create_main_embed(self) -> nextcord.Embed:
        return nextcord.Embed(
            title=f"{ICON_HELP} Menu Tr·ª£ gi√∫p",
            description="Ch√†o m·ª´ng ƒë·∫øn v·ªõi EconZone! Vui l√≤ng ch·ªçn m·ªôt m·ª•c t·ª´ menu b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt c√°c l·ªánh.",
            color=nextcord.Color.blue()
        ).set_footer(text=f"Trang danh m·ª•c {self.current_category_page + 1}/{self.total_category_pages}")

    def _create_cog_embed(self, cog_info: Dict[str, Any]) -> nextcord.Embed:
        embed = nextcord.Embed(title=f"{cog_info['emoji']} {cog_info['name']}", description=cog_info["description"], color=nextcord.Color.blue())
        for cmd_info in cog_info["commands"]:
            command_obj = self.bot.get_command(cmd_info["name"])
            if command_obj:
                usage = f"`{COMMAND_PREFIX}{command_obj.name} {command_obj.signature}`".strip()
                help_text = cmd_info.get("desc", "Ch∆∞a c√≥ m√¥ t·∫£.")
                embed.add_field(name=f"`{COMMAND_PREFIX}{command_obj.name}`", value=f"*{help_text}*\n**C√°ch d√πng:** {usage}", inline=False)
        embed.set_footer(text=f"Trang danh m·ª•c {self.current_category_page + 1}/{self.total_category_pages}")
        return embed

class HelpSlashCommandCog(commands.Cog, name="Help Slash Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.cogs_data = [
            {
                "id": "economy", "name": "L·ªánh Kinh t·∫ø", "emoji": ICON_MONEY_BAG,
                "description": "C√°c l·ªánh li√™n quan ƒë·∫øn ti·ªÅn t·ªá, t√†i kho·∫£n.",
                "commands": [
                    {"name": "balance", "desc": "Xem s·ªë d∆∞ t·∫•t c·∫£ c√°c v√≠ c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c."},
                    {"name": "deposit", "desc": "G·ª≠i Ti·ªÅn t·ª´ V√≠ v√†o Bank."},
                    {"name": "withdraw", "desc": "R√∫t ti·ªÅn t·ª´ Bank v·ªÅ V√≠ ."},
                    {"name": "transfer", "desc": "Chuy·ªÉn ti·ªÅn t·ª´ Bank c·ªßa b·∫°n cho ng∆∞·ªùi kh√°c."}
                ]
            },
            {
                "id": "earning", "name": "L·ªánh Ki·∫øm ti·ªÅn", "emoji": "üíº",
                "description": "C√°c c√°ch ƒë·ªÉ ki·∫øm th√™m thu nh·∫≠p.",
                "commands": [
                    {"name": "work", "desc": "L√†m vi·ªác ƒë·ªÉ ki·∫øm Ecoin v√† kinh nghi·ªám."},
                    {"name": "daily", "desc": "Nh·∫≠n th∆∞·ªüng h√†ng ng√†y."},
                    {"name": "crime", "desc": "L√†m nhi·ªám v·ª• phi ph√°p, c√≥ r·ªßi ro."},
                    {"name": "fish", "desc": "C√¢u c√° ƒë·ªÉ b√°n ki·∫øm ti·ªÅn."},
                    {"name": "rob", "desc": "C∆∞·ªõp ti·ªÅn t·ª´ ng∆∞·ªùi ch∆°i kh√°c."},
                    {"name": "beg", "desc": "ƒÇn xin ƒë·ªÉ nh·∫≠n m·ªôt √≠t ti·ªÅn l·∫ª."}
                ]
            },
            {
                "id": "games", "name": "L·ªánh Tr√≤ ch∆°i", "emoji": ICON_GAME,
                "description": "C√°c tr√≤ ch∆°i may r·ªßi.",
                "commands": [
                    {"name": "coinflip", "desc": "Ch∆°i tung ƒë·ªìng xu 50/50."},
                    {"name": "dice", "desc": "ƒê·ªï x√∫c x·∫Øc, th·∫Øng n·∫øu t·ªïng l·ªõn h∆°n 7."},
                    {"name": "slots", "desc": "Quay m√°y x√®ng ƒë·ªÉ th·ª≠ v·∫≠n may."}
                ]
            },
            {
                "id": "shop", "name": "L·ªánh C·ª≠a h√†ng", "emoji": ICON_SHOP,
                "description": "C√°c l·ªánh li√™n quan ƒë·∫øn mua, b√°n v√† t√∫i ƒë·ªì.",
                "commands": [
                    {"name": "shop", "desc": "Hi·ªÉn th·ªã c√°c v·∫≠t ph·∫©m ƒëang b√°n."},
                    {"name": "buy", "desc": "Mua m·ªôt v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng."},
                    {"name": "sell", "desc": "B√°n m·ªôt v·∫≠t ph·∫©m t·ª´ t√∫i ƒë·ªì."},
                    {"name": "inventory", "desc": "Ki·ªÉm tra t√∫i ƒë·ªì c·ªßa b·∫°n."},
                    {"name": "use", "desc": "S·ª≠ d·ª•ng m·ªôt v·∫≠t ph·∫©m ti√™u th·ª•."}
                ]
            },
        ]

    @nextcord.slash_command(name="menu", description="M·ªü menu tr·ª£ gi√∫p ch√≠nh c·ªßa bot.")
    async def menu_slash_command(self, interaction: nextcord.Interaction):
        try:
            await interaction.response.defer(ephemeral=True)
            
            view = HelpMenuView(self.cogs_data, interaction.user, self.bot)
            initial_embed = view._create_main_embed()

            await interaction.followup.send(embed=initial_embed, view=view, ephemeral=True)
            view.message = await interaction.original_message()

        except nextcord.errors.HTTPException as e:
            logger.warning(f"L·ªói khi ph·∫£n h·ªìi t∆∞∆°ng t√°c /menu (c√≥ th·ªÉ do timeout): {e}")
            pass
        except Exception as e:
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong /menu: {e}", exc_info=True)

def setup(bot: commands.Bot):
    bot.add_cog(HelpSlashCommandCog(bot))
