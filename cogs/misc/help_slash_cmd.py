# bot/cogs/misc/help_slash_cmd.py
import nextcord
from nextcord.ext import commands
import traceback 
import logging 

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
# from core.utils import try_send # Hi·ªán kh√¥ng d√πng tr·ª±c ti·∫øp trong file n√†y n·ªØa
from core.config import (
    COMMAND_PREFIX, 
    WORK_COOLDOWN, DAILY_COOLDOWN, BEG_COOLDOWN, ROB_COOLDOWN, 
    CRIME_COOLDOWN, FISH_COOLDOWN, SLOTS_COOLDOWN, CF_COOLDOWN, DICE_COOLDOWN,
    BARE_COMMAND_MAP 
)
# ƒê·∫£m b·∫£o b·∫°n ƒë√£ import ƒê√öNG v√† ƒê·ª¶ c√°c icon b·∫°n s·ª≠ d·ª•ng t·ª´ core.icons
from core.icons import ( 
    ICON_HELP, ICON_COMMAND_DETAIL, ICON_BANK, ICON_MONEY_BAG, 
    ICON_GAME, ICON_SHOP, ICON_ADMIN, ICON_INFO, ICON_WARNING, ICON_ERROR 
)

logger = logging.getLogger(__name__)

# ƒê·ªïi t√™n class Cog ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt tr√™n terminal khi bot t·∫£i
class HelpSlashCommandCog(commands.Cog, name="HelpSlashRenamedCog"): 
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info(f"HelpSlashRenamedCog initialized (command will be /minhbeohelp).")

    async def _send_general_help_embed(self, interaction: nextcord.Interaction):
        """X√¢y d·ª±ng v√† g·ª≠i Embed tr·ª£ gi√∫p chung."""
        # S·ª≠ d·ª•ng interaction.application_command.name ƒë·ªÉ l·∫•y t√™n l·ªánh slash hi·ªán t·∫°i
        current_slash_command_name = interaction.application_command.name 
        logger.debug(f"Entering _send_general_help_embed for {interaction.user.name} (for /{current_slash_command_name})")
        try:
            prefix = COMMAND_PREFIX
            embed = nextcord.Embed(
                title=f"{ICON_HELP} Menu Tr·ª£ Gi√∫p - Bot Kinh T·∫ø",
                description=(
                    f"Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot Kinh T·∫ø! D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng.\n"
                    f"ƒê·ªÉ xem chi ti·∫øt m·ªôt l·ªánh, d√πng `/{current_slash_command_name} l·ªánh <t√™n_l·ªánh>` (v√≠ d·ª•: `/{current_slash_command_name} l·ªánh work`).\n"
                    f"*L∆∞u √Ω: H·∫ßu h·∫øt c√°c l·ªánh ƒë·ªÅu c√≥ t√™n g·ªçi t·∫Øt (alias) ƒë∆∞·ª£c li·ªát k√™ trong chi ti·∫øt l·ªánh.*\n"
                    f"Qu·∫£n tr·ªã vi√™n c√≥ th·ªÉ d√πng `{prefix}auto` ƒë·ªÉ b·∫≠t/t·∫Øt l·ªánh kh√¥ng c·∫ßn prefix trong m·ªôt k√™nh."
                ),
                color=nextcord.Color.dark_theme(),
            )
            
            embed.add_field(name=f"{ICON_BANK} T√†i Kho·∫£n & T·ªïng Quan",
                            value="`balance` `bank` `deposit` `withdraw` `transfer` `leaderboard` `richest` `inventory`",
                            inline=False)
            embed.add_field(name=f"{ICON_MONEY_BAG} Ki·∫øm Ti·ªÅn & C∆° H·ªôi",
                            value="`work` `daily` `beg` `crime` `fish` `rob`",
                            inline=False)
            embed.add_field(name=f"{ICON_GAME} Gi·∫£i Tr√≠ & C·ªù B·∫°c",
                            value="`slots` `coinflip` `dice`",
                            inline=False)
            embed.add_field(name=f"{ICON_SHOP} C·ª≠a H√†ng V·∫≠t Ph·∫©m",
                            value="`shop` `buy` `sell`",
                            inline=False)
            embed.add_field(name=f"{ICON_ADMIN} Qu·∫£n Tr·ªã Server (L·ªánh Prefix)",
                            value=f"`{prefix}addmoney` `{prefix}removemoney` `{prefix}auto` `{prefix}mutebot` `{prefix}unmutebot`",
                            inline=False)
            
            embed.set_footer(text=f"Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi MinhBeo8. G√µ /{current_slash_command_name} l·ªánh <t√™n_l·ªánh> ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            logger.debug(f"General help followup sent successfully to {interaction.user.name} (for /{current_slash_command_name}).")

        except Exception as e:
            logger.error(f"L·ªói trong _send_general_help_embed (for /{current_slash_command_name}):", exc_info=True)
            try:
                if not interaction.is_expired():
                    await interaction.followup.send(content=f"{ICON_ERROR} R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói khi hi·ªÉn th·ªã menu tr·ª£ gi√∫p chung.", ephemeral=True)
            except Exception as followup_e:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn l·ªói followup cho general help (for /{current_slash_command_name}): {followup_e}", exc_info=True)

    async def _send_specific_command_help_embed(self, interaction: nextcord.Interaction, command_name_input: str):
        current_slash_command_name = interaction.application_command.name
        logger.debug(f"Entering _send_specific_command_help_embed for command: '{command_name_input}' by {interaction.user.name} (for /{current_slash_command_name})")
        try:
            prefix = COMMAND_PREFIX
            cmd_name_to_find_initially = command_name_input.lower().lstrip(prefix) 
            command_obj = self.bot.get_command(cmd_name_to_find_initially)
            
            if not command_obj:
                logger.debug(f"Command '{cmd_name_to_find_initially}' not found directly. Checking BARE_COMMAND_MAP...")
                actual_command_name_from_bare_map = BARE_COMMAND_MAP.get(cmd_name_to_find_initially)
                if actual_command_name_from_bare_map:
                    logger.debug(f"Bare command alias '{cmd_name_to_find_initially}' maps to '{actual_command_name_from_bare_map}'. Trying to get this command.")
                    command_obj = self.bot.get_command(actual_command_name_from_bare_map)
            
            if not command_obj:
                logger.warning(f"Command '{cmd_name_to_find_initially}' (and its potential bare map) not found for specific help requested by {interaction.user.name} (for /{current_slash_command_name}).")
                await interaction.followup.send(content=f"{ICON_WARNING} Kh√¥ng t√¨m th·∫•y l·ªánh prefix n√†o c√≥ t√™n l√† `{command_name_input}`. H√£y ch·∫Øc ch·∫Øn b·∫°n nh·∫≠p ƒë√∫ng t√™n l·ªánh (v√≠ d·ª•: `work`, `balance` ho·∫∑c t√™n g·ªçi t·∫Øt c·ªßa n√≥).", ephemeral=True)
                return

            logger.debug(f"Found command: {command_obj.name} for {interaction.user.name}. Building embed...")
            embed = nextcord.Embed(title=f"{ICON_COMMAND_DETAIL} Chi ti·∫øt l·ªánh: {prefix}{command_obj.name}", color=nextcord.Color.green())
            
            help_text = command_obj.help 
            if not help_text:
                help_text = command_obj.short_doc or "L·ªánh n√†y ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt." 
            embed.description = help_text
            usage = f"`{prefix}{command_obj.name} {command_obj.signature}`".strip()
            embed.add_field(name="üìù C√°ch s·ª≠ d·ª•ng", value=usage, inline=False)
            if command_obj.aliases:
                aliases_str = ", ".join([f"`{prefix}{alias}`" for alias in command_obj.aliases])
                embed.add_field(name="üè∑Ô∏è T√™n g·ªçi kh√°c (Aliases)", value=aliases_str, inline=False)
            else:
                embed.add_field(name="üè∑Ô∏è T√™n g·ªçi kh√°c (Aliases)", value="L·ªánh n√†y kh√¥ng c√≥ t√™n g·ªçi t·∫Øt.", inline=False)

            manual_cooldown_commands = {
                "work": WORK_COOLDOWN, "daily": DAILY_COOLDOWN, "beg": BEG_COOLDOWN,
                "rob": ROB_COOLDOWN, "crime": CRIME_COOLDOWN, "fish": FISH_COOLDOWN,
                "slots": SLOTS_COOLDOWN, "coinflip": CF_COOLDOWN, "dice": DICE_COOLDOWN
            }
            if command_obj.name in manual_cooldown_commands:
                cd_seconds = manual_cooldown_commands[command_obj.name]
                if cd_seconds >= 3600 and cd_seconds % 3600 == 0: cd_text = f"{cd_seconds // 3600} gi·ªù"
                elif cd_seconds >= 60 and cd_seconds % 60 == 0: cd_text = f"{cd_seconds // 60} ph√∫t"
                else: cd_text = f"{cd_seconds} gi√¢y"
                embed.add_field(name="‚è≥ Th·ªùi gian ch·ªù (Cooldown)", value=cd_text, inline=False)
            if command_obj.name in ["addmoney", "removemoney"]:
                embed.add_field(name="üîë Y√™u c·∫ßu", value="Ch·ªâ Ch·ªß Server (Ng∆∞·ªùi t·∫°o server).", inline=False)
            elif command_obj.name in ["auto", "mutebot", "unmutebot"]:
                embed.add_field(name="üîë Y√™u c·∫ßu", value="Quy·ªÅn `Administrator` trong server.", inline=False)
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            logger.debug(f"Specific help followup sent successfully for '{command_obj.name}' to {interaction.user.name} (for /{current_slash_command_name}).")
        except Exception as e:
            logger.error(f"L·ªói trong _send_specific_command_help_embed cho l·ªánh '{command_name_input}' (for /{current_slash_command_name}):", exc_info=True)
            try:
                if not interaction.is_expired():
                    await interaction.followup.send(content=f"{ICON_ERROR} R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói khi hi·ªÉn th·ªã chi ti·∫øt cho l·ªánh `{command_name_input}`.", ephemeral=True)
            except Exception as followup_e:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn l·ªói followup cho specific help (for /{current_slash_command_name}): {followup_e}", exc_info=True)

    # ƒê·ªïi t√™n l·ªánh slash ·ªü ƒë√¢y ƒë·ªÉ th·ª≠ nghi·ªám
    @nextcord.slash_command(name="minhbeohelp", description=f"{ICON_INFO} Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p cho c√°c l·ªánh c·ªßa bot.")
    async def help_slash_command(self,
                                 interaction: nextcord.Interaction,
                                 command_name: str = nextcord.SlashOption(
                                     name="l·ªánh", 
                                     description="T√™n l·ªánh prefix b·∫°n mu·ªën xem chi ti·∫øt (v√≠ d·ª•: work, balance).",
                                     required=False,
                                     default=None
                                 )):
        """Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh ho·∫∑c th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh (prefix) c·ª• th·ªÉ."""
        
        # L·∫•y t√™n l·ªánh slash th·ª±c t·∫ø ƒëang ƒë∆∞·ª£c g·ªçi ƒë·ªÉ d√πng trong log v√† h∆∞·ªõng d·∫´n
        actual_slash_command_name = interaction.application_command.name 
        logger.debug(f"/{actual_slash_command_name} slash command invoked by {interaction.user.name} (ID: {interaction.user.id}). Argument 'l·ªánh': '{command_name}'")
        
        try:
            if not interaction.response.is_done():
                await interaction.response.defer(ephemeral=True)
                logger.debug(f"Interaction for /{actual_slash_command_name} by {interaction.user.name} deferred.")
            else:
                logger.debug(f"Interaction for /{actual_slash_command_name} by {interaction.user.name} was already deferred/responded.")
            
            if not command_name:
                logger.debug(f"Calling _send_general_help_embed for {interaction.user.name} (for /{actual_slash_command_name})...")
                await self._send_general_help_embed(interaction)
            else:
                logger.debug(f"Calling _send_specific_command_help_embed for '{command_name}' by {interaction.user.name} (for /{actual_slash_command_name})...")
                await self._send_specific_command_help_embed(interaction, command_name)
        except Exception as e:
            logger.critical(f"L·ªói nghi√™m tr·ªçng kh√¥ng b·∫Øt ƒë∆∞·ª£c trong /{actual_slash_command_name} b·ªüi {interaction.user.name}:", exc_info=True)
            try:
                if not interaction.is_expired():
                    # S·ª≠ d·ª•ng followup v√¨ ƒë√£ defer
                    await interaction.followup.send(content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω y√™u c·∫ßu `/{actual_slash_command_name}` c·ªßa b·∫°n.",ephemeral=True)
            except Exception as final_followup_e:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói cu·ªëi c√πng cho /{actual_slash_command_name}: {final_followup_e}", exc_info=True)

def setup(bot: commands.Bot):
    bot.add_cog(HelpSlashCommandCog(bot))
