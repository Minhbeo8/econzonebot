# bot/cogs/misc/help_slash_cmd.py
import nextcord
from nextcord.ext import commands
import traceback # ƒê·ªÉ in traceback l·ªói chi ti·∫øt

from core.utils import try_send # try_send v·∫´n h·ªØu √≠ch cho c√°c l·ªánh prefix
from core.config import (
    COMMAND_PREFIX, 
    WORK_COOLDOWN, DAILY_COOLDOWN, BEG_COOLDOWN, ROB_COOLDOWN, 
    CRIME_COOLDOWN, FISH_COOLDOWN, SLOTS_COOLDOWN, CF_COOLDOWN, DICE_COOLDOWN
)
from core.icons import ( 
    ICON_HELP, ICON_COMMAND_DETAIL, ICON_BANK, ICON_MONEY_BAG, 
    ICON_GAME, ICON_SHOP, ICON_ADMIN, ICON_INFO, ICON_WARNING, ICON_ERROR 
)

class HelpSlashCommandCog(commands.Cog, name="Help Slash Command"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    async def _send_general_help_embed(self, interaction: nextcord.Interaction):
        try:
            prefix = COMMAND_PREFIX
            embed = nextcord.Embed(
                title=f"{ICON_HELP} Menu Tr·ª£ Gi√∫p - Bot Kinh T·∫ø",
                description=(
                    f"Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot Kinh T·∫ø! D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng.\n"
                    f"ƒê·ªÉ xem chi ti·∫øt m·ªôt l·ªánh, d√πng `/help l·ªánh <t√™n_l·ªánh>` (v√≠ d·ª•: `/help l·ªánh work`).\n"
                    f"*L∆∞u √Ω: H·∫ßu h·∫øt c√°c l·ªánh ƒë·ªÅu c√≥ t√™n g·ªçi t·∫Øt (alias) ƒë∆∞·ª£c li·ªát k√™ trong chi ti·∫øt l·ªánh.*\n"
                    f"Qu·∫£n tr·ªã vi√™n c√≥ th·ªÉ d√πng `{prefix}auto` ƒë·ªÉ b·∫≠t/t·∫Øt l·ªánh kh√¥ng c·∫ßn prefix trong m·ªôt k√™nh."
                ),
                color=nextcord.Color.dark_theme(),
            )
            
            embed.add_field(name=f"{ICON_BANK} T√†i Kho·∫£n & T·ªïng Quan",
                            value="`balance` `bank` `deposit` `withdraw` `transfer` `leaderboard` `richest` `inventory`",
                            inline=False)
            embed.add_field(name=f"{ICON_MONEY_BAG} Ki·∫øm Ti·ªÅn & C∆° H·ªôi",
                            value="`work` `daily` `beg` `crime` `fish` `rob`",
                            inline=False)
            embed.add_field(name=f"{ICON_GAME} Gi·∫£i Tr√≠ & C·ªù B·∫°c",
                            value="`slots` `coinflip` `dice`",
                            inline=False)
            embed.add_field(name=f"{ICON_SHOP} C·ª≠a H√†ng V·∫≠t Ph·∫©m",
                            value="`shop` `buy` `sell`",
                            inline=False)
            embed.add_field(name=f"{ICON_ADMIN} Qu·∫£n Tr·ªã Server (L·ªánh Prefix)",
                            value=f"`{prefix}addmoney` `{prefix}removemoney` `{prefix}auto` `{prefix}mutebot` `{prefix}unmutebot`",
                            inline=False)
            
            embed.set_footer(text=f"Bot ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi MinhBeo8. G√µ /help l·ªánh <t√™n_l·ªánh> ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
            # S·ª≠ d·ª•ng interaction.followup.send tr·ª±c ti·∫øp sau khi defer
            await interaction.followup.send(embed=embed, ephemeral=True)
        except Exception as e:
            print(f"{ICON_ERROR} L·ªói trong _send_general_help_embed:")
            traceback.print_exc() # In traceback chi ti·∫øt ra console
            try:
                # C·ªë g·∫Øng g·ª≠i th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
                await interaction.followup.send(content=f"{ICON_ERROR} R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói khi hi·ªÉn th·ªã menu tr·ª£ gi√∫p chung.", ephemeral=True)
            except Exception as followup_e:
                print(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn l·ªói followup cho general help: {followup_e}")


    async def _send_specific_command_help_embed(self, interaction: nextcord.Interaction, command_name_input: str):
        try:
            prefix = COMMAND_PREFIX
            cmd_name_to_find = command_name_input.lower().lstrip(prefix) 
            command_obj = self.bot.get_command(cmd_name_to_find)
            
            if not command_obj:
                await interaction.followup.send(content=f"{ICON_WARNING} Kh√¥ng t√¨m th·∫•y l·ªánh prefix n√†o c√≥ t√™n l√† `{command_name_input}`. H√£y ch·∫Øc ch·∫Øn b·∫°n nh·∫≠p ƒë√∫ng t√™n l·ªánh (v√≠ d·ª•: `work`, `balance` ho·∫∑c t√™n g·ªçi t·∫Øt c·ªßa n√≥).", ephemeral=True)
                return

            embed = nextcord.Embed(title=f"{ICON_COMMAND_DETAIL} Chi ti·∫øt l·ªánh: {prefix}{command_obj.name}", color=nextcord.Color.green())
            
            help_text = command_obj.help 
            if not help_text:
                help_text = command_obj.short_doc or "L·ªánh n√†y ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt." 
            embed.description = help_text

            usage = f"`{prefix}{command_obj.name} {command_obj.signature}`".strip()
            embed.add_field(name="üìù C√°ch s·ª≠ d·ª•ng", value=usage, inline=False)

            if command_obj.aliases:
                aliases_str = ", ".join([f"`{prefix}{alias}`" for alias in command_obj.aliases])
                embed.add_field(name="üè∑Ô∏è T√™n g·ªçi kh√°c (Aliases)", value=aliases_str, inline=False)
            else:
                embed.add_field(name="üè∑Ô∏è T√™n g·ªçi kh√°c (Aliases)", value="L·ªánh n√†y kh√¥ng c√≥ t√™n g·ªçi t·∫Øt.", inline=False)

            manual_cooldown_commands = {
                "work": WORK_COOLDOWN, "daily": DAILY_COOLDOWN, "beg": BEG_COOLDOWN,
                "rob": ROB_COOLDOWN, "crime": CRIME_COOLDOWN, "fish": FISH_COOLDOWN,
                "slots": SLOTS_COOLDOWN, "coinflip": CF_COOLDOWN, "dice": DICE_COOLDOWN
            }
            if command_obj.name in manual_cooldown_commands:
                cd_seconds = manual_cooldown_commands[command_obj.name]
                if cd_seconds >= 3600 and cd_seconds % 3600 == 0: cd_text = f"{cd_seconds // 3600} gi·ªù"
                elif cd_seconds >= 60 and cd_seconds % 60 == 0: cd_text = f"{cd_seconds // 60} ph√∫t"
                else: cd_text = f"{cd_seconds} gi√¢y"
                embed.add_field(name="‚è≥ Th·ªùi gian ch·ªù (Cooldown)", value=cd_text, inline=False)

            if command_obj.name in ["addmoney", "removemoney"]:
                embed.add_field(name="üîë Y√™u c·∫ßu", value="Ch·ªâ Ch·ªß Server (Ng∆∞·ªùi t·∫°o server).", inline=False)
            elif command_obj.name in ["auto", "mutebot", "unmutebot"]:
                embed.add_field(name="üîë Y√™u c·∫ßu", value="Quy·ªÅn `Administrator` trong server.", inline=False)
            
            await interaction.followup.send(embed=embed, ephemeral=True)
        except Exception as e:
            print(f"{ICON_ERROR} L·ªói trong _send_specific_command_help_embed cho l·ªánh '{command_name_input}':")
            traceback.print_exc()
            try:
                await interaction.followup.send(content=f"{ICON_ERROR} R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói khi hi·ªÉn th·ªã chi ti·∫øt cho l·ªánh `{command_name_input}`.", ephemeral=True)
            except Exception as followup_e:
                print(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn l·ªói followup cho specific help: {followup_e}")


    @nextcord.slash_command(name="help", description=f"{ICON_INFO} Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p cho c√°c l·ªánh c·ªßa bot.")
    async def help_slash_command(self,
                                 interaction: nextcord.Interaction,
                                 command_name: str = nextcord.SlashOption(
                                     name="l·ªánh", 
                                     description="T√™n l·ªánh prefix b·∫°n mu·ªën xem chi ti·∫øt (v√≠ d·ª•: work, balance).",
                                     required=False,
                                     default=None
                                 )):
        """Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh ho·∫∑c th√¥ng tin chi ti·∫øt v·ªÅ m·ªôt l·ªánh (prefix) c·ª• th·ªÉ."""
        
        try:
            # Defer ph·∫£i ƒë∆∞·ª£c g·ªçi tr∆∞·ªõc b·∫•t k·ª≥ logic n√†o c√≥ th·ªÉ t·ªën th·ªùi gian
            # v√† tr∆∞·ªõc khi b·∫•t k·ª≥ ph·∫£n h·ªìi n√†o ƒë∆∞·ª£c g·ª≠i.
            if not interaction.response.is_done(): # Ch·ªâ defer n·∫øu ch∆∞a ƒë∆∞·ª£c defer ho·∫∑c ph·∫£n h·ªìi
                await interaction.response.defer(ephemeral=True)
            
            if not command_name:
                await self._send_general_help_embed(interaction)
            else:
                await self._send_specific_command_help_embed(interaction, command_name)
        except Exception as e:
            print(f"{ICON_ERROR} L·ªói nghi√™m tr·ªçng trong help_slash_command:")
            traceback.print_exc()
            # C·ªë g·∫Øng g·ª≠i m·ªôt th√¥ng b√°o l·ªói cu·ªëi c√πng n·∫øu interaction v·∫´n c√≤n active
            # v√† ch∆∞a c√≥ followup n√†o ƒë∆∞·ª£c g·ª≠i (ho·∫∑c followup tr∆∞·ªõc ƒë√≥ c≈©ng l·ªói)
            try:
                # Ki·ªÉm tra l·∫°i is_done() tr∆∞·ªõc khi g·ª≠i followup, v√¨ l·ªói c√≥ th·ªÉ x·∫£y ra sau khi ƒë√£ g·ª≠i followup th√†nh c√¥ng
                if not interaction.response.is_done(): # ƒêi·ªÅu n√†y th·ª±c ra kh√¥ng ƒë√∫ng logic l·∫Øm sau khi ƒë√£ defer
                                                    # Sau defer, is_done() s·∫Ω l√† True.
                                                    # N·∫øu mu·ªën g·ª≠i followup, kh√¥ng c·∫ßn check is_done() n·ªØa.
                    await interaction.followup.send(content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu tr·ª£ gi√∫p c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.",ephemeral=True)
                else: # N·∫øu ƒë√£ is_done (do defer), v√† c√°c h√†m con l·ªói tr∆∞·ªõc khi g·ª≠i followup
                      # th√¨ followup ·ªü h√†m con s·∫Ω kh√¥ng ƒë∆∞·ª£c g·ªçi, ta c√≥ th·ªÉ th·ª≠ g·ª≠i ·ªü ƒë√¢y.
                      # Tuy nhi√™n, n·∫øu h√†m con ƒë√£ c·ªë g·ª≠i followup v√† l·ªói, th√¨ ·ªü ƒë√¢y c≈©ng c√≥ th·ªÉ l·ªói.
                      # C√°ch an to√†n l√† c√°c h√†m con ph·∫£i t·ª± x·ª≠ l√Ω vi·ªác g·ª≠i followup b√°o l·ªói.
                      # D√≤ng n√†y c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt n·∫øu c√°c h√†m con ƒë√£ x·ª≠ l√Ω l·ªói v√† followup t·ªët.
                      if interaction.is_expired(): # Ki·ªÉm tra xem interaction ƒë√£ h·∫øt h·∫°n ch∆∞a
                          print("Interaction ƒë√£ h·∫øt h·∫°n, kh√¥ng th·ªÉ g·ª≠i followup l·ªói.")
                      else:
                          # C√≥ th·ªÉ b·ªè d√≤ng n√†y n·∫øu c√°c h√†m con ƒë√£ c√≥ try-except v√† followup.send cho l·ªói r·ªìi.
                          # await interaction.followup.send(content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu tr·ª£ gi√∫p c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.",ephemeral=True)
                          pass # ƒê·ªÉ h√†m con t·ª± x·ª≠ l√Ω l·ªói followup
            except Exception as final_error:
                print(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o l·ªói cu·ªëi c√πng cho help_slash_command: {final_error}")


def setup(bot: commands.Bot):
    bot.add_cog(HelpSlashCommandCog(bot))
