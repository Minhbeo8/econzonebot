# bot/cogs/moderation/manage_mods_cmd.py
import nextcord
from nextcord.ext import commands
import logging

# Import c√°c h√†m qu·∫£n l√Ω moderator t·ª´ database v√† c√°c icon
from core.database import add_moderator_id, remove_moderator_id, load_moderator_ids
from core.utils import try_send 
from core.icons import ICON_SUCCESS, ICON_ERROR, ICON_WARNING, ICON_INFO, ICON_ADMIN_PANEL # T·∫°o ICON_ADMIN_PANEL n·∫øu mu·ªën, v√≠ d·ª•: "üõ°Ô∏è"
from core.config import COMMAND_PREFIX # C·∫ßn cho th√¥ng b√°o l·ªói

logger = logging.getLogger(__name__)

class ManageModeratorsCog(commands.Cog, name="Manage Moderators"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info(f"{ICON_INFO} ManageModeratorsCog initialized.")

    @commands.command(name="addmod")
    @commands.is_owner() # Ch·ªâ owner c·ªßa bot m·ªõi d√πng ƒë∆∞·ª£c l·ªánh n√†y
    async def add_moderator(self, ctx: commands.Context, user: nextcord.User):
        """(Owner Only) Th√™m m·ªôt User ID v√†o danh s√°ch moderator.
        S·ª≠ d·ª•ng: !addmod <@UserMention ho·∫∑c UserID>
        """
        logger.debug(f"L·ªánh 'addmod' ƒë∆∞·ª£c g·ªçi b·ªüi {ctx.author.name} cho user {user.name} ({user.id}).")
        
        current_ids = load_moderator_ids()
        if user.id in current_ids:
            logger.info(f"OWNER ACTION: {ctx.author.display_name} ({ctx.author.id}) c·ªë g·∫Øng th√™m {user.display_name} ({user.id}) nh∆∞ng ƒë√£ l√† moderator.")
            await try_send(ctx, content=f"{ICON_INFO} {user.mention} (`{user.id}`) ƒë√£ c√≥ trong danh s√°ch moderator r·ªìi.")
            return

        if add_moderator_id(user.id): # H√†m n√†y s·∫Ω t·ª± ƒë·ªông l∆∞u
            logger.info(f"OWNER ACTION: {ctx.author.display_name} ({ctx.author.id}) ƒë√£ th√™m {user.display_name} ({user.id}) v√†o danh s√°ch moderator.")
            await try_send(ctx, content=f"{ICON_SUCCESS} ƒê√£ th√™m {user.mention} (`{user.id}`) v√†o danh s√°ch moderator th√†nh c√¥ng!")
        else:
            # add_moderator_id tr·∫£ v·ªÅ False n·∫øu c√≥ l·ªói khi l∆∞u file ho·∫∑c user_id kh√¥ng h·ª£p l·ªá
            logger.error(f"OWNER ACTION: {ctx.author.display_name} ({ctx.author.id}) kh√¥ng th·ªÉ th√™m {user.display_name} ({user.id}) v√†o danh s√°ch moderator do l·ªói l∆∞u file ho·∫∑c ID kh√¥ng h·ª£p l·ªá.")
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng th·ªÉ th√™m {user.mention} v√†o danh s√°ch moderator. Vui l√≤ng ki·ªÉm tra log c·ªßa bot.")


    @commands.command(name="removemod", aliases=["delmod", "rmmod"]) # Th√™m alias rmmod
    @commands.is_owner() 
    async def remove_moderator(self, ctx: commands.Context, user: nextcord.User):
        """(Owner Only) X√≥a m·ªôt User ID kh·ªèi danh s√°ch moderator.
        S·ª≠ d·ª•ng: !removemod <@UserMention ho·∫∑c UserID>
        """
        logger.debug(f"L·ªánh 'removemod' ƒë∆∞·ª£c g·ªçi b·ªüi {ctx.author.name} cho user {user.name} ({user.id}).")
        if remove_moderator_id(user.id): # H√†m n√†y s·∫Ω t·ª± ƒë·ªông l∆∞u
            logger.info(f"OWNER ACTION: {ctx.author.display_name} ({ctx.author.id}) ƒë√£ x√≥a {user.display_name} ({user.id}) kh·ªèi danh s√°ch moderator.")
            await try_send(ctx, content=f"{ICON_SUCCESS} ƒê√£ x√≥a {user.mention} (`{user.id}`) kh·ªèi danh s√°ch moderator th√†nh c√¥ng!")
        else:
            # remove_moderator_id tr·∫£ v·ªÅ False n·∫øu kh√¥ng t√¨m th·∫•y user ho·∫∑c l·ªói l∆∞u file
            logger.warning(f"OWNER ACTION: {ctx.author.display_name} ({ctx.author.id}) c·ªë g·∫Øng x√≥a {user.display_name} ({user.id}) nh∆∞ng kh√¥ng t√¨m th·∫•y trong danh s√°ch ho·∫∑c l·ªói l∆∞u file.")
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y {user.mention} (`{user.id}`) trong danh s√°ch moderator ho·∫∑c c√≥ l·ªói khi l∆∞u file.")

    @commands.command(name="listmods")
    @commands.is_owner() 
    async def list_moderators(self, ctx: commands.Context):
        """(Owner Only) Hi·ªÉn th·ªã danh s√°ch c√°c moderator hi·ªán t·∫°i."""
        logger.debug(f"L·ªánh 'listmods' ƒë∆∞·ª£c g·ªçi b·ªüi {ctx.author.name}.")
        moderator_ids = load_moderator_ids()
        
        if not moderator_ids:
            await try_send(ctx, content=f"{ICON_INFO} Hi·ªán t·∫°i kh√¥ng c√≥ ai trong danh s√°ch moderator (ngo√†i Owner).")
            logger.info(f"OWNER ACTION: {ctx.author.display_name} ({ctx.author.id}) xem danh s√°ch moderator (hi·ªán ƒëang tr·ªëng).")
            return

        embed = nextcord.Embed(
            title=f"{ICON_ADMIN_PANEL if 'ICON_ADMIN_PANEL' in locals() or 'ICON_ADMIN_PANEL' in globals() else 'üõ°Ô∏è'} Danh S√°ch Moderator", 
            color=nextcord.Color.blue() # Ho·∫∑c m√†u b·∫°n th√≠ch
        )
        
        description_parts = []
        for mod_id in moderator_ids:
            try:
                user_obj = await self.bot.fetch_user(mod_id) 
                description_parts.append(f"- {user_obj.mention} (`{user_obj.name}#{user_obj.discriminator}`, ID: `{mod_id}`)")
            except nextcord.NotFound:
                description_parts.append(f"- {ICON_WARNING} *Kh√¥ng t√¨m th·∫•y user v·ªõi ID:* `{mod_id}`")
                logger.warning(f"Kh√¥ng th·ªÉ fetch user cho moderator ID: {mod_id} khi listmods.")
            except Exception as e:
                description_parts.append(f"- {ICON_ERROR} *L·ªói khi l·∫•y th√¥ng tin user ID:* `{mod_id}`")
                logger.error(f"L·ªói fetch user cho moderator ID {mod_id} khi listmods: {e}", exc_info=True)

        if description_parts:
            embed.description = "\n".join(description_parts)
        else:
            embed.description = "Kh√¥ng th·ªÉ hi·ªÉn th·ªã th√¥ng tin moderator (c√≥ th·ªÉ do l·ªói fetch t·∫•t c·∫£ user ID trong danh s√°ch)."

        await try_send(ctx, embed=embed)
        logger.info(f"OWNER ACTION: {ctx.author.display_name} ({ctx.author.id}) ƒë√£ xem danh s√°ch moderator. S·ªë l∆∞·ª£ng: {len(moderator_ids)}.")

    # X·ª≠ l√Ω l·ªói chung cho c√°c l·ªánh trong Cog n√†y
    # H√†m n√†y s·∫Ω b·∫Øt l·ªói cho c·∫£ 3 l·ªánh addmod, removemod, listmods n·∫øu ch√∫ng kh√¥ng c√≥ error handler ri√™ng
    # v√† l·ªói ƒë√≥ kh√¥ng ph·∫£i l√† commands.CheckFailure (v√¨ is_owner() ƒë√£ x·ª≠ l√Ω ng·∫ßm)
    async def cog_command_error(self, ctx: commands.Context, error: commands.CommandError):
        # B·ªè qua l·ªói NotOwner v√¨ is_owner() decorator ƒë√£ x·ª≠ l√Ω (kh√¥ng cho l·ªánh ch·∫°y v√† c√≥ th·ªÉ kh√¥ng b√°o g√¨)
        # Tuy nhi√™n, ch√∫ng ta c√≥ th·ªÉ log ·ªü ƒë√¢y n·∫øu mu·ªën
        if isinstance(error, commands.NotOwner):
            logger.warning(f"User {ctx.author.name} ({ctx.author.id}) kh√¥ng ph·∫£i owner c·ªë g·∫Øng d√πng l·ªánh moderator: {ctx.command.name}")
            # Kh√¥ng c·∫ßn g·ª≠i tin nh·∫Øn v√¨ is_owner() th∆∞·ªùng ƒë√£ c√≥ c∆° ch·∫ø ri√™ng
            return

        if isinstance(error, commands.MissingRequiredArgument):
            param_name = error.param.name if hasattr(error.param, 'name') else "tham_s·ªë_b·ªã_thi·∫øu"
            await try_send(ctx, content=f"{ICON_WARNING} B·∫°n thi·∫øu tham s·ªë `{param_name}` cho l·ªánh `{ctx.command.name}`. D√πng `{COMMAND_PREFIX}help {ctx.command.name}` ƒë·ªÉ xem chi ti·∫øt.")
        elif isinstance(error, commands.UserNotFound):
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh: `{error.argument}`.")
        elif isinstance(error, commands.CheckFailure): # D√†nh cho c√°c check kh√°c is_owner n·∫øu c√≥
            logger.warning(f"CheckFailure cho l·ªánh '{ctx.command.name}' b·ªüi user {ctx.author.id}: {error}")
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
        else:
            logger.error(f"L·ªói kh√¥ng mong mu·ªën trong {ctx.command.name} c·ªßa ManageModeratorsCog: {error}", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra v·ªõi l·ªánh `{ctx.command.name}`.")


def setup(bot: commands.Bot):
    bot.add_cog(ManageModeratorsCog(bot))
