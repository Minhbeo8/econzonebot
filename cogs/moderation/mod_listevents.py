# bot/cogs/moderation/mod_listevents.py
import nextcord
from nextcord.ext import commands
from datetime import datetime, timedelta, timezone
import logging

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ 'core'
from core.database import get_guild_config, save_guild_config
from core.utils import is_bot_moderator, try_send
from core.config import COMMAND_PREFIX # ƒê·ªÉ d√πng trong help message n·∫øu c·∫ßn
from core.icons import ICON_SUCCESS, ICON_ERROR, ICON_INFO, ICON_ADMIN_PANEL

logger = logging.getLogger(__name__)

# Danh s√°ch c√°c lo·∫°i s·ª± ki·ªán ƒë∆∞·ª£c h·ªó tr·ª£ (c√≥ th·ªÉ m·ªü r·ªông sau)
SUPPORTED_EVENT_TYPES = {
    "work": "work",
    "fish": "fish",
    "daily": "daily",
    "crime": "crime",
    # Key: ng∆∞·ªùi d√πng nh·∫≠p, Value: key d√πng trong JSON (th∆∞·ªùng l√† gi·ªëng nhau)
}

class EventManagementCog(commands.Cog, name="Event Management"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info(f"{ICON_INFO} EventManagementCog initialized.")

    @commands.command(
        name="mod_startevent",
        aliases=["startevent", "event_start"],
        help="B·∫Øt ƒë·∫ßu ho·∫∑c c·∫≠p nh·∫≠t m·ªôt s·ª± ki·ªán cho server ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.\n"
             "V√≠ d·ª•: `!mod_startevent <GuildID> work 0.5 1.2 24`\n"
             "Trong ƒë√≥:\n"
             "- `<GuildID>`: ID c·ªßa server.\n"
             "- `work`: Lo·∫°i s·ª± ki·ªán (v√≠ d·ª•: work, fish, daily).\n"
             "- `0.5`: H·ªá s·ªë cooldown (0.5 = gi·∫£m 50%, 1.0 = kh√¥ng ƒë·ªïi).\n"
             "- `1.2`: H·ªá s·ªë ph·∫ßn th∆∞·ªüng (1.2 = tƒÉng 20%, 1.0 = kh√¥ng ƒë·ªïi).\n"
             "- `24`: Th·ªùi gian s·ª± ki·ªán (gi·ªù). Nh·∫≠p 0 n·∫øu mu·ªën s·ª± ki·ªán kh√¥ng t·ª± h·∫øt h·∫°n."
    )
    @commands.check(is_bot_moderator)
    async def mod_start_event(self, ctx: commands.Context,
                              guild_target: nextcord.Guild,
                              event_key: str,
                              cooldown_modifier: float,
                              reward_modifier: float,
                              duration_hours: float = 0.0):
        """
        (Moderator Only) B·∫Øt ƒë·∫ßu ho·∫∑c c·∫≠p nh·∫≠t m·ªôt s·ª± ki·ªán cho m·ªôt server.
        """
        actual_event_key = event_key.lower()
        if actual_event_key not in SUPPORTED_EVENT_TYPES:
            await try_send(ctx, content=f"{ICON_ERROR} Lo·∫°i s·ª± ki·ªán `{event_key}` kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. C√°c lo·∫°i h·ª£p l·ªá: `{', '.join(SUPPORTED_EVENT_TYPES.keys())}`.")
            return

        if guild_target is None:
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y server v·ªõi ID/T√™n b·∫°n cung c·∫•p.")
            return

        if cooldown_modifier < 0 or reward_modifier < 0:
            await try_send(ctx, content=f"{ICON_ERROR} C√°c h·ªá s·ªë ƒëi·ªÅu ch·ªânh (modifier) kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m.")
            return
        if duration_hours < 0:
            await try_send(ctx, content=f"{ICON_ERROR} Th·ªùi gian s·ª± ki·ªán kh√¥ng ƒë∆∞·ª£c l√† s·ªë √¢m.")
            return

        active_until_iso = None
        if duration_hours > 0:
            end_time = datetime.now(timezone.utc) + timedelta(hours=duration_hours)
            active_until_iso = end_time.isoformat()

        guild_config = get_guild_config(guild_target.id)

        guild_config["active_events"][actual_event_key] = {
            "cooldown_modifier": cooldown_modifier,
            "reward_modifier": reward_modifier,
            "active_until": active_until_iso
        }

        if save_guild_config(guild_target.id, guild_config):
            duration_str = f"trong {duration_hours} gi·ªù" if duration_hours > 0 else "v√¥ th·ªùi h·∫°n"
            end_time_str = f" (k·∫øt th√∫c v√†o kho·∫£ng {active_until_iso.replace('T', ' ').split('.')[0]} UTC)" if active_until_iso else ""

            log_message = (f"EVENT STARTED/UPDATED by {ctx.author.name} ({ctx.author.id}) "
                           f"for Guild: {guild_target.name} ({guild_target.id}). "
                           f"Event: {actual_event_key}, CD_Mod: {cooldown_modifier}, "
                           f"Reward_Mod: {reward_modifier}, Duration: {duration_str}{end_time_str}.")
            logger.info(log_message)

            embed = nextcord.Embed(
                title=f"{ICON_SUCCESS} S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu/c·∫≠p nh·∫≠t!",
                description=f"**Server:** {guild_target.name} (`{guild_target.id}`)\n"
                            f"**Lo·∫°i s·ª± ki·ªán:** `{actual_event_key}`\n"
                            f"**H·ªá s·ªë Cooldown:** `{cooldown_modifier}`\n"
                            f"**H·ªá s·ªë Ph·∫ßn th∆∞·ªüng:** `{reward_modifier}`\n"
                            f"**Th·ªùi gian:** {duration_str}{end_time_str}",
                color=nextcord.Color.green()
            )
            await try_send(ctx, embed=embed)
        else:
            logger.error(f"Failed to save guild config after attempting to start/update event by {ctx.author.name} for guild {guild_target.id}.")
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi l∆∞u c·∫•u h√¨nh s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.")

    @commands.command(
        name="mod_stopevent",
        aliases=["stopevent", "event_stop"],
        help="D·ª´ng m·ªôt s·ª± ki·ªán ƒëang ho·∫°t ƒë·ªông tr√™n server ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.\n"
             "V√≠ d·ª•: `!mod_stopevent <GuildID> work`"
    )
    @commands.check(is_bot_moderator)
    async def mod_stop_event(self, ctx: commands.Context,
                             guild_target: nextcord.Guild,
                             event_key: str):
        """
        (Moderator Only) D·ª´ng m·ªôt s·ª± ki·ªán ƒëang ho·∫°t ƒë·ªông cho m·ªôt server.
        """
        actual_event_key = event_key.lower()
        if actual_event_key not in SUPPORTED_EVENT_TYPES: # Ki·ªÉm tra xem c√≥ ph·∫£i l√† key ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
            await try_send(ctx, content=f"{ICON_ERROR} Lo·∫°i s·ª± ki·ªán `{event_key}` kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ho·∫∑c kh√¥ng ƒë√∫ng t√™n. C√°c lo·∫°i h·ª£p l·ªá: `{', '.join(SUPPORTED_EVENT_TYPES.keys())}`.")
            return

        if guild_target is None:
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y server v·ªõi ID/T√™n b·∫°n cung c·∫•p.")
            return

        guild_config = get_guild_config(guild_target.id)

        if actual_event_key in guild_config["active_events"]:
            del guild_config["active_events"][actual_event_key]

            if save_guild_config(guild_target.id, guild_config):
                log_message = (f"EVENT STOPPED by {ctx.author.name} ({ctx.author.id}) "
                               f"for Guild: {guild_target.name} ({guild_target.id}). "
                               f"Event: {actual_event_key}.")
                logger.info(log_message)

                embed = nextcord.Embed(
                    title=f"{ICON_SUCCESS} S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c d·ª´ng!",
                    description=f"**Server:** {guild_target.name} (`{guild_target.id}`)\n"
                                f"**Lo·∫°i s·ª± ki·ªán:** `{actual_event_key}` ƒë√£ ƒë∆∞·ª£c t·∫Øt.",
                    color=nextcord.Color.orange()
                )
                await try_send(ctx, embed=embed)
            else:
                logger.error(f"Failed to save guild config after attempting to stop event by {ctx.author.name} for guild {guild_target.id}.")
                await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra khi l∆∞u c·∫•u h√¨nh sau khi d·ª´ng s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.")
        else:
            await try_send(ctx, content=f"{ICON_INFO} Kh√¥ng c√≥ s·ª± ki·ªán `{actual_event_key}` n√†o ƒëang ho·∫°t ƒë·ªông tr√™n server {guild_target.name} ƒë·ªÉ d·ª´ng.")

    # --- L·ªÜNH M·ªöI ƒê·ªÇ LI·ªÜT K√ä S·ª∞ KI·ªÜN ---
    @commands.command(
        name="mod_listevents",
        aliases=["listevents", "event_list", "showevents"],
        help="Hi·ªÉn th·ªã danh s√°ch c√°c s·ª± ki·ªán ƒëang ƒë∆∞·ª£c c·∫•u h√¨nh cho server.\n"
             "V√≠ d·ª•: `!mod_listevents <GuildID>`"
    )
    @commands.check(is_bot_moderator)
    async def mod_list_events(self, ctx: commands.Context, guild_target: nextcord.Guild):
        """
        (Moderator Only) Hi·ªÉn th·ªã c√°c s·ª± ki·ªán ƒëang ƒë∆∞·ª£c c·∫•u h√¨nh cho m·ªôt server.
        """
        if guild_target is None:
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y server v·ªõi ID/T√™n b·∫°n cung c·∫•p.")
            return

        guild_config = get_guild_config(guild_target.id)
        active_events = guild_config.get("active_events", {}) # L·∫•y t·ª´ config, ƒë√£ ƒë∆∞·ª£c database.py ƒë·∫£m b·∫£o t·ªìn t·∫°i

        if not active_events:
            await try_send(ctx, content=f"{ICON_INFO} Hi·ªán kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c c·∫•u h√¨nh cho server {guild_target.name}.")
            return

        embed = nextcord.Embed(
            title=f"{ICON_ADMIN_PANEL or 'üéâ'} Danh S√°ch S·ª± Ki·ªán - {guild_target.name}",
            color=nextcord.Color.blue()
        )

        description_parts = []
        now_utc = datetime.now(timezone.utc)

        for event_key, event_details in active_events.items():
            cd_mod = event_details.get("cooldown_modifier", "N/A")
            reward_mod = event_details.get("reward_modifier", "N/A")
            active_until_iso = event_details.get("active_until")

            status = ""
            if active_until_iso:
                try:
                    # Chuy·ªÉn ƒë·ªïi t·ª´ ISO format v·ªÅ datetime object (aware)
                    # Python 3.11+ h·ªó tr·ª£ 'Z' tr·ª±c ti·∫øp.
                    # Cho c√°c phi√™n b·∫£n c≈© h∆°n, n·∫øu c√≥ 'Z', thay th·∫ø b·∫±ng '+00:00'
                    if active_until_iso.endswith('Z'):
                        active_until_dt = datetime.fromisoformat(active_until_iso.replace('Z', '+00:00'))
                    else:
                        active_until_dt = datetime.fromisoformat(active_until_iso)
                    
                    # ƒê·∫£m b·∫£o active_until_dt l√† timezone-aware (UTC) ƒë·ªÉ so s√°nh v·ªõi now_utc
                    if active_until_dt.tzinfo is None:
                         active_until_dt = active_until_dt.replace(tzinfo=timezone.utc)


                    if active_until_dt > now_utc:
                        time_left = active_until_dt - now_utc
                        # L√†m tr√≤n timedelta ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n, b·ªè qua microsecond
                        days, remainder = divmod(time_left.total_seconds(), 86400)
                        hours, remainder = divmod(remainder, 3600)
                        minutes, seconds = divmod(remainder, 60)
                        if days > 0:
                            time_left_str = f"{int(days)}d {int(hours)}h"
                        elif hours > 0:
                            time_left_str = f"{int(hours)}h {int(minutes)}m"
                        else:
                            time_left_str = f"{int(minutes)}m {int(seconds)}s"
                        status = f"‚è≥ H·∫øt h·∫°n sau: {time_left_str} (l√∫c {active_until_dt.strftime('%Y-%m-%d %H:%M:%S')} UTC)"
                    else:
                        status = f"‚ùå ƒê√£ h·∫øt h·∫°n (l√∫c {active_until_dt.strftime('%Y-%m-%d %H:%M:%S')} UTC)"
                except ValueError:
                    status = f"‚è∞ Th·ªùi gian k·∫øt th√∫c: {active_until_iso} (L·ªói ƒë·ªãnh d·∫°ng)"
            else:
                status = "‚ôæÔ∏è V√¥ th·ªùi h·∫°n"
            
            description_parts.append(
                f"**`{event_key.capitalize()}`**:\n"
                f"  - Cooldown Mod: `{cd_mod}`\n"
                f"  - Reward Mod: `{reward_mod}`\n"
                f"  - Tr·∫°ng th√°i: {status}"
            )

        if description_parts:
            embed.description = "\n\n".join(description_parts)
        else: # Tr∆∞·ªùng h·ª£p active_events c√≥ key nh∆∞ng value r·ªóng (√≠t khi x·∫£y ra v·ªõi logic hi·ªán t·∫°i)
            embed.description = "Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt s·ª± ki·ªán n√†o."

        log_message = (f"EVENT LIST VIEWED by {ctx.author.name} ({ctx.author.id}) "
                       f"for Guild: {guild_target.name} ({guild_target.id}). "
                       f"Found {len(active_events)} events.")
        logger.info(log_message)
        await try_send(ctx, embed=embed)


def setup(bot: commands.Bot):
    bot.add_cog(EventManagementCog(bot))
    logger.info(f"EventManagementCog has been loaded.")

