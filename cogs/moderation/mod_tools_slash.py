# bot/cogs/moderation/mod_tools_slash.py
import nextcord
from nextcord.ext import commands, application_checks
import logging

# C√°c h√†m v√† icon c·∫ßn thi·∫øt
from core.database import (
    load_economy_data,
    save_economy_data,
    get_or_create_global_user_profile,
    get_or_create_user_local_data
)
from core.utils import check_is_bot_moderator_interaction, format_large_number
from core.icons import (
    ICON_ADMIN_PANEL, ICON_SUCCESS, ICON_ERROR, ICON_PROFILE,
    ICON_TIEN_SACH, ICON_TIEN_LAU, ICON_BANK, ICON_TICKET,
    ICON_LOCAL, ICON_GLOBAL
)

logger = logging.getLogger(__name__)

class ModToolsSlashCog(commands.Cog, name="Moderator Slash Tools"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info("ModToolsSlashCog (v2) initialized.")

    # --- L·ªánh cha /mod ---
    @nextcord.slash_command(
        name="mod", 
        description="C√°c c√¥ng c·ª• d√†nh cho Moderator c·ªßa Bot"
    )
    async def mod(self, interaction: nextcord.Interaction):
        pass

    # --- L·ªánh con /mod ping ---
    @mod.subcommand(name="ping", description="Ki·ªÉm tra xem b·∫°n c√≥ quy·ªÅn Moderator c·ªßa bot kh√¥ng.")
    @application_checks.check(check_is_bot_moderator_interaction)
    async def mod_ping(self, interaction: nextcord.Interaction):
        # ... (gi·ªØ nguy√™n logic c·ªßa l·ªánh ping) ...
        logger.info(f"MODERATOR ACTION: {interaction.user.id} ƒë√£ s·ª≠ d·ª•ng '/mod ping' th√†nh c√¥ng.")
        await interaction.response.send_message(
            f"{ICON_SUCCESS} {interaction.user.mention}, b·∫°n c√≥ quy·ªÅn Moderator/Owner! C√°c l·ªánh `/mod` ƒë√£ s·∫µn s√†ng!",
            ephemeral=True
        )
    
    # --- L·ªÜNH CON M·ªöI: /mod view_user ---
    @mod.subcommand(name="view_user", description="Xem chi ti·∫øt to√†n b·ªô d·ªØ li·ªáu kinh t·∫ø c·ªßa m·ªôt ng∆∞·ªùi d√πng.")
    @application_checks.check(check_is_bot_moderator_interaction)
    async def view_user(
        self, 
        interaction: nextcord.Interaction,
        user: nextcord.User = nextcord.SlashOption(
            name="user",
            description="Ng∆∞·ªùi d√πng b·∫°n mu·ªën xem th√¥ng tin.",
            required=True
        )
    ):
        """Xem chi ti·∫øt d·ªØ li·ªáu kinh t·∫ø c·ªßa m·ªôt ng∆∞·ªùi d√πng."""
        await interaction.response.defer(ephemeral=True) # Ph·∫£n h·ªìi t·∫°m th·ªùi

        target_user = user
        # C·∫ßn guild context ƒë·ªÉ l·∫•y d·ªØ li·ªáu local
        if not interaction.guild:
            await interaction.followup.send(f"{ICON_ERROR} Vui l√≤ng d√πng l·ªánh n√†y trong m·ªôt server ƒë·ªÉ xem c·∫£ d·ªØ li·ªáu Local.", ephemeral=True)
            return
            
        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, target_user.id)
            local_data = get_or_create_user_local_data(global_profile, interaction.guild.id)
            save_economy_data(economy_data) # L∆∞u l·∫°i ph√≤ng tr∆∞·ªùng h·ª£p user m·ªõi ƒë∆∞·ª£c t·∫°o

            # Tr√≠ch xu·∫•t d·ªØ li·ªáu
            bank_balance = global_profile.get("bank_balance", 0)
            wanted_level = global_profile.get("wanted_level", 0.0)
            level_global = global_profile.get("level_global", 1)
            xp_global = global_profile.get("xp_global", 0)
            
            local_balance = local_data.get("local_balance", {})
            earned = local_balance.get("earned", 0)
            adadd = local_balance.get("adadd", 0)
            level_local = local_data.get("level_local", 1)
            xp_local = local_data.get("xp_local", 0)
            ticket_count = len(local_data.get("tickets", []))

            # T·∫°o Embed
            embed = nextcord.Embed(
                title=f"{ICON_PROFILE} D·ªØ li·ªáu Kinh t·∫ø c·ªßa {target_user.name}",
                color=nextcord.Color.orange()
            )
            embed.set_thumbnail(url=target_user.display_avatar.url)
            embed.add_field(name="User ID", value=f"`{target_user.id}`", inline=False)
            
            # D·ªØ li·ªáu Local
            embed.add_field(
                name=f"{ICON_LOCAL} D·ªØ li·ªáu t·∫°i Server: {interaction.guild.name}",
                value=(
                    f"  {ICON_TIEN_SACH} Earned: `{format_large_number(earned)}`\n"
                    f"  {ICON_TIEN_LAU} Admin-add: `{format_large_number(adadd)}`\n"
                    f"  {ICON_TICKET} Tickets: `{ticket_count}`\n"
                    f"  ‚ú® Level/XP Local: `{level_local}` / `{format_large_number(xp_local)}`"
                ),
                inline=True
            )
            
            # D·ªØ li·ªáu Global
            embed.add_field(
                name=f"{ICON_GLOBAL} D·ªØ li·ªáu To√†n c·ª•c",
                value=(
                    f"  {ICON_BANK} Bank: `{format_large_number(bank_balance)}`\n"
                    f"  - _(Ch·ªâ s·ªë ·∫©n)_ -\n"
                    f"  üïµÔ∏è Wanted Level: `{wanted_level:.2f}`\n"
                    f"  ‚ú® Level/XP Global: `{level_global}` / `{format_large_number(xp_global)}`"
                ),
                inline=True
            )

            await interaction.followup.send(embed=embed, ephemeral=True)
            logger.info(f"MODERATOR ACTION: {interaction.user.id} ƒë√£ xem d·ªØ li·ªáu c·ªßa user {target_user.id}.")

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh /mod view_user: {e}", exc_info=True)
            await interaction.followup.send(f"{ICON_ERROR} ƒê√£ x·∫£y ra l·ªói khi truy xu·∫•t d·ªØ li·ªáu.", ephemeral=True)
# --- L·ªÜNH CON M·ªöI: /mod set balance ---
    @set_group.subcommand(name="balance", description="Thi·∫øt l·∫≠p s·ªë d∆∞ ti·ªÅn t·ªá cho m·ªôt ng∆∞·ªùi d√πng.")
    @application_checks.check(check_is_bot_moderator_interaction)
    async def set_balance(
        self,
        interaction: nextcord.Interaction,
        user: nextcord.User = nextcord.SlashOption(
            name="user",
            description="Ng∆∞·ªùi d√πng c·∫ßn ch·ªânh s·ª≠a.",
            required=True,
        ),
        balance_type: str = nextcord.SlashOption(
            name="type",
            description="Lo·∫°i s·ªë d∆∞ mu·ªën thay ƒë·ªïi.",
            required=True,
            choices={"Ti·ªÅn S·∫°ch (earned)": "earned", "Ti·ªÅn L·∫≠u (adadd)": "adadd", "Bank (global)": "bank"}
        ),
        amount: int = nextcord.SlashOption(
            name="amount",
            description="S·ªë ti·ªÅn mu·ªën thi·∫øt l·∫≠p (s·ªë √¢m s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t v·ªÅ 0).",
            required=True
        )
    ):
        """Thi·∫øt l·∫≠p s·ªë d∆∞ cho m·ªôt ng∆∞·ªùi d√πng."""
        await interaction.response.defer(ephemeral=True)
        
        if not interaction.guild:
            await interaction.followup.send(f"{ICON_ERROR} Vui l√≤ng d√πng l·ªánh n√†y trong m·ªôt server.", ephemeral=True)
            return

        final_amount = max(0, amount) # ƒê·∫£m b·∫£o s·ªë ti·ªÅn kh√¥ng ph·∫£i l√† s·ªë √¢m
        
        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, user.id)
            
            original_value = 0
            
            if balance_type == "bank":
                original_value = global_profile.get("bank_balance", 0)
                global_profile["bank_balance"] = final_amount
                icon = ICON_BANK
            else: # earned ho·∫∑c adadd
                local_data = get_or_create_user_local_data(global_profile, interaction.guild.id)
                original_value = local_data["local_balance"].get(balance_type, 0)
                local_data["local_balance"][balance_type] = final_amount
                icon = ICON_TIEN_SACH if balance_type == "earned" else ICON_TIEN_LAU

            save_economy_data(economy_data)

            logger.info(f"MODERATOR ACTION: {interaction.user.id} ƒë√£ set balance '{balance_type}' c·ªßa {user.id} th√†nh {final_amount}.")

            await interaction.followup.send(
                f"{ICON_SUCCESS} ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!\n"
                f"  - **Ng∆∞·ªùi d√πng:** {user.mention}\n"
                f"  - **Lo·∫°i s·ªë d∆∞:** `{balance_type.capitalize()}` {icon}\n"
                f"  - **Gi√° tr·ªã c≈©:** `{format_large_number(original_value)}`\n"
                f"  - **Gi√° tr·ªã m·ªõi:** `{format_large_number(final_amount)}`",
                ephemeral=True
            )

        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh /mod set balance: {e}", exc_info=True)
            await interaction.followup.send(f"{ICON_ERROR} ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu.", ephemeral=True)
# --- L·ªÜNH CON M·ªöI: /mod set xp ---
    @set_group.subcommand(name="xp", description="Thi·∫øt l·∫≠p ƒëi·ªÉm kinh nghi·ªám cho m·ªôt ng∆∞·ªùi d√πng.")
    @application_checks.check(check_is_bot_moderator_interaction)
    async def set_xp(
        self,
        interaction: nextcord.Interaction,
        user: nextcord.User = nextcord.SlashOption(name="user", description="Ng∆∞·ªùi d√πng c·∫ßn ch·ªânh s·ª≠a.", required=True),
        xp_type: str = nextcord.SlashOption(
            name="type",
            description="Lo·∫°i XP mu·ªën thay ƒë·ªïi.",
            required=True,
            choices={"XP Local": "local", "XP Global": "global"}
        ),
        amount: int = nextcord.SlashOption(name="amount", description="S·ªë XP mu·ªën thi·∫øt l·∫≠p.", required=True)
    ):
        """Thi·∫øt l·∫≠p XP cho m·ªôt ng∆∞·ªùi d√πng."""
        await interaction.response.defer(ephemeral=True)
        final_amount = max(0, amount)

        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, user.id)
            
            xp_key = f"xp_{xp_type}"
            original_value = 0

            if xp_type == "global":
                original_value = global_profile.get(xp_key, 0)
                global_profile[xp_key] = final_amount
            else: # local
                if not interaction.guild:
                    await interaction.followup.send(f"{ICON_ERROR} C·∫ßn d√πng l·ªánh trong server ƒë·ªÉ set XP Local.", ephemeral=True)
                    return
                local_data = get_or_create_user_local_data(global_profile, interaction.guild.id)
                original_value = local_data.get(xp_key, 0)
                local_data[xp_key] = final_amount

            save_economy_data(economy_data)
            logger.info(f"MODERATOR ACTION: {interaction.user.id} ƒë√£ set {xp_key} c·ªßa {user.id} th√†nh {final_amount}.")
            await interaction.followup.send(
                f"{ICON_SUCCESS} ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!\n"
                f"  - **Ng∆∞·ªùi d√πng:** {user.mention}\n"
                f"  - **Lo·∫°i XP:** `{xp_type.capitalize()}`\n"
                f"  - **Gi√° tr·ªã c≈©:** `{format_large_number(original_value)}`\n"
                f"  - **Gi√° tr·ªã m·ªõi:** `{format_large_number(final_amount)}`",
                ephemeral=True
            )
        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh /mod set xp: {e}", exc_info=True)
            await interaction.followup.send(f"{ICON_ERROR} ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu.", ephemeral=True)

    # --- L·ªÜNH CON M·ªöI: /mod set wanted_level ---
    @set_group.subcommand(name="wanted_level", description="Thi·∫øt l·∫≠p ƒêi·ªÉm Nghi ng·ªù (truy n√£) cho ng∆∞·ªùi d√πng.")
    @application_checks.check(check_is_bot_moderator_interaction)
    async def set_wanted_level(
        self,
        interaction: nextcord.Interaction,
        user: nextcord.User = nextcord.SlashOption(name="user", description="Ng∆∞·ªùi d√πng c·∫ßn ch·ªânh s·ª≠a.", required=True),
        level: float = nextcord.SlashOption(name="level", description="M·ª©c ƒë·ªô truy n√£ mu·ªën thi·∫øt l·∫≠p.", required=True)
    ):
        """Thi·∫øt l·∫≠p wanted_level cho m·ªôt ng∆∞·ªùi d√πng."""
        await interaction.response.defer(ephemeral=True)
        final_level = max(0.0, level)

        try:
            economy_data = load_economy_data()
            global_profile = get_or_create_global_user_profile(economy_data, user.id)
            
            original_value = global_profile.get("wanted_level", 0.0)
            global_profile["wanted_level"] = final_level
            
            save_economy_data(economy_data)
            logger.info(f"MODERATOR ACTION: {interaction.user.id} ƒë√£ set wanted_level c·ªßa {user.id} th√†nh {final_level}.")
            await interaction.followup.send(
                f"{ICON_SUCCESS} ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!\n"
                f"  - **Ng∆∞·ªùi d√πng:** {user.mention}\n"
                f"  - **Ch·ªâ s·ªë:** `Wanted Level` üïµÔ∏è\n"
                f"  - **Gi√° tr·ªã c≈©:** `{original_value:.2f}`\n"
                f"  - **Gi√° tr·ªã m·ªõi:** `{final_level:.2f}`",
                ephemeral=True
            )
        except Exception as e:
            logger.error(f"L·ªói trong l·ªánh /mod set wanted_level: {e}", exc_info=True)
            await interaction.followup.send(f"{ICON_ERROR} ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu.", ephemeral=True)


def setup(bot: commands.Bot):
    bot.add_cog(ModToolsSlashCog(bot))
