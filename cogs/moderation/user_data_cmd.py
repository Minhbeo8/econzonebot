# bot/cogs/moderation/user_data_cmd.py
import nextcord
from nextcord.ext import commands
import logging
import json # ƒê·ªÉ format output JSON cho ƒë·∫πp n·∫øu c·∫ßn, ho·∫∑c t·∫°o Embed

from core.database import get_user_data # D√πng get_user_data ƒë·ªÉ ƒë·∫£m b·∫£o user ƒë∆∞·ª£c kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
from core.utils import try_send, is_bot_moderator # H√†m check quy·ªÅn moderator
from core.config import CURRENCY_SYMBOL, SHOP_ITEMS, COMMAND_PREFIX # C·∫ßn SHOP_ITEMS ƒë·ªÉ hi·ªÉn th·ªã t√™n v·∫≠t ph·∫©m
from core.icons import ICON_PROFILE, ICON_ERROR, ICON_WARNING, ICON_INFO, ICON_MONEY_BAG, ICON_BANK, ICON_INVENTORY

logger = logging.getLogger(__name__)

class UserDataModCog(commands.Cog, name="User Data Moderator Tools"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info(f"{ICON_INFO} UserDataModCog initialized.")

    @commands.command(name="mod_viewuser", aliases=["mod_getdata"])
    @commands.check(is_bot_moderator) # Ch·ªâ Moderator ho·∫∑c Owner m·ªõi d√πng ƒë∆∞·ª£c
    async def mod_viewuser(self, ctx: commands.Context, guild_id_str: str, target_user_identifier: str):
        """
        (Moderator/Owner Only) Xem d·ªØ li·ªáu kinh t·∫ø c·ªßa m·ªôt ng∆∞·ªùi d√πng trong m·ªôt guild c·ª• th·ªÉ.
        S·ª≠ d·ª•ng: !mod_viewuser <Guild_ID> <UserID ho·∫∑c @UserMention>
        """
        logger.debug(f"L·ªánh 'mod_viewuser' ƒë∆∞·ª£c g·ªçi b·ªüi Mod/Owner {ctx.author.name} ({ctx.author.id}) cho target '{target_user_identifier}' trong guild '{guild_id_str}'.")

        guild_id = None
        try:
            guild_id = int(guild_id_str)
        except ValueError:
            await try_send(ctx, content=f"{ICON_ERROR} Guild ID ph·∫£i l√† m·ªôt con s·ªë.")
            logger.warning(f"Mod/Owner {ctx.author.id} cung c·∫•p Guild ID kh√¥ng ph·∫£i s·ªë: '{guild_id_str}'")
            return

        target_guild = self.bot.get_guild(guild_id)
        if not target_guild:
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y server (guild) v·ªõi ID: `{guild_id}`. Bot c√≥ th·ªÉ kh√¥ng ·ªü trong server ƒë√≥.")
            logger.warning(f"Mod/Owner {ctx.author.id} y√™u c·∫ßu d·ªØ li·ªáu cho guild ID kh√¥ng t·ªìn t·∫°i ho·∫∑c bot kh√¥ng ·ªü trong: {guild_id}")
            return

        target_member = None
        try:
            # Th·ª≠ chuy·ªÉn ƒë·ªïi target_user_identifier th√†nh ID n·∫øu n√≥ l√† s·ªë
            if target_user_identifier.isdigit():
                user_id_to_fetch = int(target_user_identifier)
                target_member = target_guild.get_member(user_id_to_fetch) # Th·ª≠ l·∫•y member n·∫øu user ·ªü trong guild
                if not target_member: # N·∫øu kh√¥ng ph·∫£i member (v√≠ d·ª• user ƒë√£ r·ªùi), th·ª≠ fetch_user
                    target_member = await self.bot.fetch_user(user_id_to_fetch) 
            else:
                # N·∫øu kh√¥ng ph·∫£i s·ªë, th·ª≠ d√πng converter c·ªßa nextcord ƒë·ªÉ l·∫•y member t·ª´ mention (v√≠ d·ª•: <@!ID> ho·∫∑c <@ID>)
                # Ho·∫∑c n·∫øu h·ªç ch·ªâ nh·∫≠p t√™n (vi·ªác n√†y ph·ª©c t·∫°p h∆°n, t·∫°m th·ªùi y√™u c·∫ßu ID ho·∫∑c Mention)
                try:
                    converter = commands.MemberConverter() # Ho·∫∑c commands.UserConverter() n·∫øu mu·ªën ch·∫•p nh·∫≠n user kh√¥ng trong guild
                    target_member = await converter.convert(ctx, target_user_identifier) # C·∫ßn ctx ƒë·ªÉ convert mention
                    # N·∫øu convert t·ª´ mention trong guild kh√°c v·ªõi target_guild, c·∫ßn c·∫©n th·∫≠n
                    # ƒê·ªÉ ƒë∆°n gi·∫£n, n·∫øu l√† mention, n√≥ s·∫Ω l·∫•y t·ª´ guild c·ªßa ctx.
                    # N·∫øu mu·ªën l·∫•y member t·ª´ target_guild b·∫±ng mention, c·∫ßn ph·∫£i ctx ƒë∆∞·ª£c truy·ªÅn v√†o t·ª´ guild ƒë√≥
                    # ho·∫∑c bot ph·∫£i c√≥ c√°ch l·∫•y member t·ª´ m·ªôt guild c·ª• th·ªÉ b·∫±ng t√™n/mention.
                    # Hi·ªán t·∫°i, n·∫øu l√† mention, n√≥ s·∫Ω l√† member c·ªßa guild hi·ªán t·∫°i c·ªßa ctx.
                    # N·∫øu Guild ID kh√°c v·ªõi ctx.guild.id, th√¨ UserID l√† l·ª±a ch·ªçn t·ªët nh·∫•t.
                    if target_member.guild.id != target_guild.id and not target_user_identifier.isdigit():
                         await try_send(ctx, content=f"{ICON_WARNING} N·∫øu xem ng∆∞·ªùi d√πng ·ªü server kh√°c, vui l√≤ng cung c·∫•p User ID c·ªßa h·ªç thay v√¨ mention.")
                         logger.warning(f"Mod/Owner {ctx.author.id} d√πng mention cho user ·ªü guild kh√°c v·ªõi target_guild.")
                         return
                except commands.BadArgument: # Kh√¥ng ph·∫£i mention h·ª£p l·ªá v√† kh√¥ng ph·∫£i ID
                    await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng t·ª´ '{target_user_identifier}'. Vui l√≤ng cung c·∫•p User ID ho·∫∑c mention m·ªôt ng∆∞·ªùi d√πng h·ª£p l·ªá trong server hi·ªán t·∫°i (n·∫øu Guild ID l√† c·ªßa server n√†y).")
                    logger.warning(f"Mod/Owner {ctx.author.id} cung c·∫•p target_user_identifier kh√¥ng h·ª£p l·ªá: '{target_user_identifier}'")
                    return
        
        except ValueError: # L·ªói khi int(target_user_identifier) n·∫øu n√≥ kh√¥ng ho√†n to√†n l√† s·ªë
             await try_send(ctx, content=f"{ICON_ERROR} User ID ph·∫£i l√† d·∫°ng s·ªë n·∫øu b·∫°n kh√¥ng mention.")
             logger.warning(f"Mod/Owner {ctx.author.id} cung c·∫•p User ID kh√¥ng ph·∫£i s·ªë: '{target_user_identifier}'")
             return
        except nextcord.NotFound:
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID ƒë∆∞·ª£c cung c·∫•p trong Discord: `{target_user_identifier}`")
            logger.warning(f"Mod/Owner {ctx.author.id} cung c·∫•p User ID kh√¥ng t√¨m th·∫•y tr√™n Discord: '{target_user_identifier}'")
            return
        except Exception as e:
            await try_send(ctx, content=f"{ICON_ERROR} C√≥ l·ªói khi t√¨m ng∆∞·ªùi d√πng: {e}")
            logger.error(f"L·ªói khi t√¨m target_user cho 'mod_viewuser': {e}", exc_info=True)
            return

        if not target_member: # N·∫øu sau t·∫•t c·∫£ c√°c b∆∞·ªõc v·∫´n kh√¥ng t√¨m ƒë∆∞·ª£c
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng `{target_user_identifier}` trong server `{target_guild.name}` ho·∫∑c tr√™n Discord.")
            return

        # L·∫•y d·ªØ li·ªáu t·ª´ database.py cho guild_id v√† user_id ƒë√£ x√°c ƒë·ªãnh
        # get_user_data s·∫Ω t·ª± t·∫°o n·∫øu ch∆∞a c√≥, nh∆∞ng ·ªü ƒë√¢y ta ch·ªâ mu·ªën xem, n√™n c√≥ th·ªÉ d√πng load_data v√† truy c·∫≠p tr·ª±c ti·∫øp
        # Tuy nhi√™n, ƒë·ªÉ nh·∫•t qu√°n v√† ƒë·∫£m b·∫£o c√≥ c√°c key m·∫∑c ƒë·ªãnh, d√πng get_user_data v·∫´n t·ªët.
        full_data = get_user_data(target_guild.id, target_member.id)
        user_data = full_data.get(str(target_guild.id), {}).get(str(target_member.id))

        if not user_data: # Tr∆∞·ªùng h·ª£p n√†y √≠t x·∫£y ra n·∫øu get_user_data ho·∫°t ƒë·ªông ƒë√∫ng
            await try_send(ctx, content=f"{ICON_INFO} Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu kinh t·∫ø cho User ID: `{target_member.id}` trong Guild: `{target_guild.name}`.")
            logger.info(f"MODERATOR ACTION: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu kinh t·∫ø cho User {target_member.name} ({target_member.id}) trong guild {target_guild.name} ({target_guild.id}) khi {ctx.author.name} g·ªçi mod_viewuser.")
            return

        # T·∫°o Embed ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
        embed = nextcord.Embed(
            title=f"{ICON_PROFILE} Th√¥ng tin kinh t·∫ø c·ªßa {target_member.display_name}",
            description=f"Trong Server: `{target_guild.name}` (ID: `{target_guild.id}`)\nUser ID: `{target_member.id}`",
            color=nextcord.Color.teal()
        )
        embed.set_thumbnail(url=target_member.display_avatar.url)

        embed.add_field(name=f"{ICON_MONEY_BAG} S·ªë d∆∞ V√≠", value=f"`{user_data.get('balance', 0):,}` {CURRENCY_SYMBOL}", inline=True)
        embed.add_field(name=f"{ICON_BANK} S·ªë d∆∞ Ng√¢n H√†ng", value=f"`{user_data.get('bank_balance', 0):,}` {CURRENCY_SYMBOL}", inline=True)
        
        inventory_list = user_data.get("inventory", [])
        if inventory_list:
            item_counts = {}
            for item_id_in_inv in inventory_list:
                item_counts[item_id_in_inv] = item_counts.get(item_id_in_inv, 0) + 1
            
            inv_display_parts = []
            for item_id, count in item_counts.items():
                item_details = SHOP_ITEMS.get(item_id, {})
                item_display_name = item_details.get("name", item_id.replace("_", " ").capitalize())
                inv_display_parts.append(f"- {item_display_name} (x{count})")
            embed.add_field(name=f"{ICON_INVENTORY} T√∫i ƒê·ªì ({len(inventory_list)} v·∫≠t ph·∫©m)", value="\n".join(inv_display_parts) if inv_display_parts else "Tr·ªëng", inline=False)
        else:
            embed.add_field(name=f"{ICON_INVENTORY} T√∫i ƒê·ªì", value="Tr·ªëng", inline=False)

        # Th√™m th√¥ng tin cooldown (t√πy ch·ªçn)
        cooldown_info = []
        last_work = user_data.get('last_work', 0)
        if last_work != 0: cooldown_info.append(f"L√†m vi·ªác l·∫ßn cu·ªëi: <t:{int(last_work)}:R>")
        # ... c√≥ th·ªÉ th√™m c√°c cooldown kh√°c n·∫øu mu·ªën ...
        if cooldown_info:
            embed.add_field(name="üïí Cooldowns (G·∫ßn ƒë√¢y)", value="\n".join(cooldown_info), inline=False)
        
        await try_send(ctx, embed=embed)
        logger.info(f"MODERATOR ACTION: {ctx.author.display_name} ({ctx.author.id}) ƒë√£ xem d·ªØ li·ªáu c·ªßa user {target_member.display_name} ({target_member.id}) trong guild {target_guild.name} ({target_guild.id}).")


    @mod_viewuser.error
    async def mod_viewuser_error(self, ctx: commands.Context, error):
        if isinstance(error, commands.CheckFailure):
            logger.warning(f"User {ctx.author.name} ({ctx.author.id}) kh√¥ng c√≥ quy·ªÅn d√πng 'mod_viewuser'.")
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn (Moderator/Owner) ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
        elif isinstance(error, commands.MissingRequiredArgument):
            param_name = error.param.name if hasattr(error.param, 'name') else "tham_s·ªë_b·ªã_thi·∫øu"
            await try_send(ctx, content=f"{ICON_WARNING} B·∫°n thi·∫øu tham s·ªë `{param_name}`. S·ª≠ d·ª•ng: `{COMMAND_PREFIX}mod_viewuser <GuildID> <UserID/@UserMention>`")
        elif isinstance(error, commands.BadArgument): # V√≠ d·ª• nh∆∞ kh√¥ng convert ƒë∆∞·ª£c UserID/GuildID
             await try_send(ctx, content=f"{ICON_ERROR} Guild ID ho·∫∑c User/Mention kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        else:
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong l·ªánh 'mod_viewuser' b·ªüi {ctx.author.name}:", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra v·ªõi l·ªánh `mod_viewuser`.")


def setup(bot: commands.Bot):
    bot.add_cog(UserDataModCog(bot))
