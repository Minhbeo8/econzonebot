# bot/cogs/moderation/user_data_cmd.py
import nextcord
from nextcord.ext import commands
import logging
import json 
from typing import Optional # ƒê·ªÉ d√πng cho tham s·ªë t√πy ch·ªçn

from core.database import get_user_data 
from core.utils import try_send, is_bot_moderator 
from core.config import CURRENCY_SYMBOL, SHOP_ITEMS, COMMAND_PREFIX 
from core.icons import ICON_PROFILE, ICON_ERROR, ICON_WARNING, ICON_INFO, ICON_MONEY_BAG, ICON_BANK, ICON_INVENTORY

logger = logging.getLogger(__name__)

class UserDataModCog(commands.Cog, name="User Data Moderator Tools"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        logger.info(f"{ICON_INFO} UserDataModCog initialized.")

    @commands.command(name="mod_viewuser", aliases=["mod_getdata"])
    @commands.check(is_bot_moderator)
    async def mod_viewuser(self, ctx: commands.Context, target_user_identifier: str, guild_id_str: Optional[str] = None):
        """
        (Moderator/Owner Only) Xem d·ªØ li·ªáu kinh t·∫ø c·ªßa ng∆∞·ªùi d√πng.
        N·∫øu Guild ID ƒë∆∞·ª£c cung c·∫•p, s·∫Ω xem ·ªü guild ƒë√≥. N·∫øu kh√¥ng, xem ·ªü guild hi·ªán t·∫°i.
        S·ª≠ d·ª•ng: !mod_viewuser <UserID ho·∫∑c @UserMention> [Guild_ID_T√πy_Ch·ªçn]
        """
        logger.debug(f"L·ªánh 'mod_viewuser' ƒë∆∞·ª£c g·ªçi b·ªüi Mod/Owner {ctx.author.name} ({ctx.author.id}) cho target '{target_user_identifier}'. Guild ID cung c·∫•p: '{guild_id_str}'.")

        guild_to_check_id = None
        target_guild = None

        if guild_id_str: # N·∫øu Guild ID ƒë∆∞·ª£c cung c·∫•p
            try:
                guild_to_check_id = int(guild_id_str)
                target_guild = self.bot.get_guild(guild_to_check_id)
                if not target_guild:
                    await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y server (guild) v·ªõi ID: `{guild_to_check_id}`. Bot c√≥ th·ªÉ kh√¥ng ·ªü trong server ƒë√≥ ho·∫∑c ID sai.")
                    logger.warning(f"Mod/Owner {ctx.author.id} y√™u c·∫ßu d·ªØ li·ªáu cho guild ID kh√¥ng t·ªìn t·∫°i/bot kh√¥ng ·ªü trong: {guild_to_check_id}")
                    return
            except ValueError:
                await try_send(ctx, content=f"{ICON_ERROR} Guild ID ph·∫£i l√† m·ªôt con s·ªë n·∫øu ƒë∆∞·ª£c cung c·∫•p.")
                logger.warning(f"Mod/Owner {ctx.author.id} cung c·∫•p Guild ID kh√¥ng ph·∫£i s·ªë: '{guild_id_str}'")
                return
        else: # N·∫øu kh√¥ng cung c·∫•p Guild ID, d√πng guild hi·ªán t·∫°i
            if not ctx.guild: # L·ªánh n√†y kh√¥ng n√™n d√πng trong DM n·∫øu kh√¥ng c√≥ Guild ID
                await try_send(ctx, content=f"{ICON_ERROR} Vui l√≤ng cung c·∫•p Guild ID khi d√πng l·ªánh n√†y trong DM, ho·∫∑c d√πng trong m·ªôt server.")
                logger.warning(f"Mod/Owner {ctx.author.id} d√πng 'mod_viewuser' trong DM m√† kh√¥ng c√≥ Guild ID.")
                return
            target_guild = ctx.guild
            guild_to_check_id = target_guild.id
        
        logger.debug(f"S·∫Ω ki·ªÉm tra d·ªØ li·ªáu trong guild: {target_guild.name} ({guild_to_check_id})")

        # X·ª≠ l√Ω target_user_identifier ƒë·ªÉ l·∫•y ƒë·ªëi t∆∞·ª£ng user/member
        target_user_obj = None # S·∫Ω l√† nextcord.User ho·∫∑c nextcord.Member
        try:
            if target_user_identifier.isdigit():
                user_id_to_fetch = int(target_user_identifier)
                # ∆Øu ti√™n l·∫•y Member object n·∫øu user c√≥ trong target_guild
                member_in_target_guild = target_guild.get_member(user_id_to_fetch)
                if member_in_target_guild:
                    target_user_obj = member_in_target_guild
                else: # N·∫øu kh√¥ng ph·∫£i member c·ªßa target_guild (v√≠ d·ª• ƒë√£ r·ªùi), fetch user data chung
                    target_user_obj = await self.bot.fetch_user(user_id_to_fetch)
            else: 
                # Th·ª≠ convert t·ª´ mention. MemberConverter ho·∫°t ƒë·ªông trong ctx.guild.
                # N·∫øu target_guild kh√°c ctx.guild, c√°ch n√†y c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c cho vi·ªác l·∫•y member c·ªßa target_guild.
                # Trong tr∆∞·ªùng h·ª£p ƒë√≥, y√™u c·∫ßu User ID l√† t·ªët nh·∫•t.
                if target_guild.id == ctx.guild.id: # N·∫øu target_guild l√† guild hi·ªán t·∫°i, c√≥ th·ªÉ d√πng MemberConverter
                    converter = commands.MemberConverter()
                    target_user_obj = await converter.convert(ctx, target_user_identifier)
                else: # N·∫øu target_guild kh√°c, v√† ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p ID, y√™u c·∫ßu ID
                    await try_send(ctx, content=f"{ICON_WARNING} ƒê·ªÉ xem ng∆∞·ªùi d√πng ·ªü server kh√°c (`{target_guild.name}`), vui l√≤ng cung c·∫•p User ID c·ªßa h·ªç thay v√¨ mention.")
                    logger.warning(f"Mod/Owner {ctx.author.id} d√πng mention cho user ·ªü guild kh√°c v·ªõi target_guild m√† kh√¥ng cung c·∫•p ID.")
                    return
        except ValueError:
             await try_send(ctx, content=f"{ICON_ERROR} User ID ph·∫£i l√† d·∫°ng s·ªë n·∫øu b·∫°n kh√¥ng mention.")
             logger.warning(f"Mod/Owner {ctx.author.id} cung c·∫•p User ID kh√¥ng ph·∫£i s·ªë: '{target_user_identifier}'")
             return
        except nextcord.NotFound:
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID `{target_user_identifier}` tr√™n Discord.")
            logger.warning(f"Mod/Owner {ctx.author.id} cung c·∫•p User ID kh√¥ng t√¨m th·∫•y tr√™n Discord: '{target_user_identifier}'")
            return
        except commands.BadArgument: # L·ªói t·ª´ MemberConverter n·∫øu kh√¥ng ph·∫£i mention h·ª£p l·ªá
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng t·ª´ '{target_user_identifier}'. Vui l√≤ng cung c·∫•p User ID ho·∫∑c mention m·ªôt ng∆∞·ªùi d√πng (n·∫øu xem trong server hi·ªán t·∫°i).")
            logger.warning(f"Mod/Owner {ctx.author.id} cung c·∫•p target_user_identifier kh√¥ng h·ª£p l·ªá: '{target_user_identifier}'")
            return
        except Exception as e:
            await try_send(ctx, content=f"{ICON_ERROR} C√≥ l·ªói khi t√¨m ng∆∞·ªùi d√πng: {e}")
            logger.error(f"L·ªói khi t√¨m target_user cho 'mod_viewuser': {e}", exc_info=True)
            return

        if not target_user_obj:
            await try_send(ctx, content=f"{ICON_ERROR} Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng `{target_user_identifier}`.")
            return

        # L·∫•y d·ªØ li·ªáu t·ª´ database.py
        full_data = get_user_data(guild_to_check_id, target_user_obj.id)
        user_data = full_data.get(str(guild_to_check_id), {}).get(str(target_user_obj.id))

        if not user_data: 
            await try_send(ctx, content=f"{ICON_INFO} Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu kinh t·∫ø cho {target_user_obj.mention} trong server `{target_guild.name}`.")
            logger.info(f"MODERATOR ACTION: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu kinh t·∫ø cho User {target_user_obj.name} ({target_user_obj.id}) trong guild {target_guild.name} ({guild_to_check_id}) khi {ctx.author.name} g·ªçi mod_viewuser.")
            return

        # T·∫°o Embed ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin (gi·ªØ nguy√™n logic t·∫°o embed)
        embed = nextcord.Embed(
            title=f"{ICON_PROFILE} Th√¥ng tin kinh t·∫ø c·ªßa {target_user_obj.display_name}",
            description=f"Trong Server: `{target_guild.name}` (ID: `{target_guild.id}`)\nUser ID: `{target_user_obj.id}`",
            color=nextcord.Color.teal()
        )
        # ... (ph·∫ßn add_field cho balance, bank_balance, inventory, cooldowns gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc) ...
        embed.set_thumbnail(url=target_user_obj.display_avatar.url)
        embed.add_field(name=f"{ICON_MONEY_BAG} S·ªë d∆∞ V√≠", value=f"`{user_data.get('balance', 0):,}` {CURRENCY_SYMBOL}", inline=True)
        embed.add_field(name=f"{ICON_BANK} S·ªë d∆∞ Ng√¢n H√†ng", value=f"`{user_data.get('bank_balance', 0):,}` {CURRENCY_SYMBOL}", inline=True)
        inventory_list = user_data.get("inventory", [])
        if inventory_list:
            item_counts = {}
            for item_id_in_inv in inventory_list: item_counts[item_id_in_inv] = item_counts.get(item_id_in_inv, 0) + 1
            inv_display_parts = []
            for item_id, count in item_counts.items():
                item_details = SHOP_ITEMS.get(item_id, {}); item_display_name = item_details.get("name", item_id.replace("_", " ").capitalize())
                inv_display_parts.append(f"- {item_display_name} (x{count})")
            embed.add_field(name=f"{ICON_INVENTORY} T√∫i ƒê·ªì ({len(inventory_list)} v·∫≠t ph·∫©m)", value="\n".join(inv_display_parts) if inv_display_parts else "Tr·ªëng", inline=False)
        else:
            embed.add_field(name=f"{ICON_INVENTORY} T√∫i ƒê·ªì", value="Tr·ªëng", inline=False)
        cooldown_info = []; last_work = user_data.get('last_work', 0)
        if last_work != 0: cooldown_info.append(f"L√†m vi·ªác l·∫ßn cu·ªëi: <t:{int(last_work)}:R>")
        if cooldown_info: embed.add_field(name="üïí Cooldowns (G·∫ßn ƒë√¢y)", value="\n".join(cooldown_info), inline=False)

        await try_send(ctx, embed=embed)
        logger.info(f"MODERATOR ACTION: {ctx.author.display_name} ({ctx.author.id}) ƒë√£ xem d·ªØ li·ªáu c·ªßa user {target_user_obj.display_name} ({target_user_obj.id}) trong guild {target_guild.name} ({target_guild.id}).")

    @mod_viewuser.error
    async def mod_viewuser_error(self, ctx: commands.Context, error):
        # ... (H√†m error handler c√≥ th·ªÉ c·∫ßn c·∫≠p nh·∫≠t m·ªôt ch√∫t cho MissingRequiredArgument) ...
        if isinstance(error, commands.CheckFailure):
            logger.warning(f"User {ctx.author.name} ({ctx.author.id}) kh√¥ng c√≥ quy·ªÅn d√πng 'mod_viewuser'.")
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn (Moderator/Owner) ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
        elif isinstance(error, commands.MissingRequiredArgument):
            param_name = error.param.name if hasattr(error.param, 'name') else "tham_s·ªë_b·ªã_thi·∫øu"
            # C·∫≠p nh·∫≠t h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
            await try_send(ctx, content=f"{ICON_WARNING} B·∫°n thi·∫øu tham s·ªë `{param_name}`. S·ª≠ d·ª•ng: `{COMMAND_PREFIX}mod_viewuser <UserID ho·∫∑c @UserMention> [GuildID_T√πy_Ch·ªçn]`")
        elif isinstance(error, commands.BadArgument): 
             await try_send(ctx, content=f"{ICON_ERROR} Guild ID ho·∫∑c User/Mention kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        else:
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong l·ªánh 'mod_viewuser' b·ªüi {ctx.author.name}:", exc_info=True)
            await try_send(ctx, content=f"{ICON_ERROR} ƒê√£ c√≥ l·ªói x·∫£y ra v·ªõi l·ªánh `mod_viewuser`.")

def setup(bot: commands.Bot):
    bot.add_cog(UserDataModCog(bot))
