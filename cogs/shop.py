# bot/cogs/shop.py
import nextcord
from nextcord.ext import commands

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from core.database import get_user_data, save_data
from core.utils import try_send
from core.config import CURRENCY_SYMBOL, SHOP_ITEMS, COMMAND_PREFIX

class ShopCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command(name='shop', aliases=['store'])
    async def shop(self, ctx: commands.Context):
        """Hi·ªÉn th·ªã c√°c v·∫≠t ph·∫©m ƒëang ƒë∆∞·ª£c b√°n trong c·ª≠a h√†ng."""
        embed = nextcord.Embed(
            title="üè™ C·ª≠a H√†ng üè™",
            description=f"S·ª≠ d·ª•ng `{COMMAND_PREFIX}buy <t√™n_v·∫≠t_ph·∫©m>` ƒë·ªÉ mua ho·∫∑c `{COMMAND_PREFIX}sell <t√™n_v·∫≠t_ph·∫©m>` ƒë·ªÉ b√°n.",
            color=nextcord.Color.orange()
        )
        if not SHOP_ITEMS: # Ki·ªÉm tra n·∫øu SHOP_ITEMS r·ªóng
            embed.description = "C·ª≠a h√†ng hi·ªán ƒëang tr·ªëng ho·∫∑c ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t."
        else:
            for item_id, details in SHOP_ITEMS.items():
                # item_id l√† key (v√≠ d·ª• "laptop"), details l√† dictionary ch·ª©a th√¥ng tin
                item_name_display = item_id.replace("_", " ").capitalize() # Thay "_" b·∫±ng " " v√† vi·∫øt hoa ch·ªØ ƒë·∫ßu
                buy_price_str = f"{details['price']:,}"
                
                sell_price_val = details.get('sell_price') # D√πng .get() ƒë·ªÉ tr√°nh l·ªói n·∫øu kh√¥ng c√≥ 'sell_price'
                if sell_price_val is not None:
                    sell_price_str = f"{sell_price_val:,} {CURRENCY_SYMBOL}"
                else:
                    sell_price_str = "Kh√¥ng th·ªÉ b√°n"
                
                embed.add_field(
                    name=f"{item_name_display} - Mua: {buy_price_str} {CURRENCY_SYMBOL} | B√°n: {sell_price_str}",
                    value=details['description'],
                    inline=False
                )
        await try_send(ctx, embed=embed)

    @commands.command(name='buy')
    async def buy(self, ctx: commands.Context, *, item_name: str): # D√πng * ƒë·ªÉ nh·∫≠n t·∫•t c·∫£ c√°c t·ª´ sau l√† item_name
        """Mua m·ªôt v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng."""
        item_id_to_buy = item_name.lower().strip().replace(" ", "_") # Chu·∫©n h√≥a t√™n v·∫≠t ph·∫©m v·ªÅ d·∫°ng key trong SHOP_ITEMS

        if item_id_to_buy not in SHOP_ITEMS:
            await try_send(ctx, content=f"V·∫≠t ph·∫©m `{item_name}` kh√¥ng t·ªìn t·∫°i trong c·ª≠a h√†ng.")
            return
        
        item_details = SHOP_ITEMS[item_id_to_buy]
        price = item_details["price"]
        
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]

        if user_data.get("balance", 0) < price:
            await try_send(ctx, content=f"B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c·∫ßn **{price:,}** {CURRENCY_SYMBOL} ƒë·ªÉ mua {item_details.get('name', item_id_to_buy.capitalize())}.")
            return
            
        user_data["balance"] -= price
        # ƒê·∫£m b·∫£o 'inventory' l√† m·ªôt list tr∆∞·ªõc khi append
        if "inventory" not in user_data or not isinstance(user_data["inventory"], list):
            user_data["inventory"] = []
        user_data["inventory"].append(item_id_to_buy) # L∆∞u item_id (key) v√†o inventory
        
        save_data(data)
        item_name_display = item_id_to_buy.replace("_", " ").capitalize()
        await try_send(ctx, content=f"B·∫°n ƒë√£ mua th√†nh c√¥ng **{item_name_display}** v·ªõi gi√° **{price:,}** {CURRENCY_SYMBOL}! N√≥ ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√∫i ƒë·ªì c·ªßa b·∫°n (`{COMMAND_PREFIX}inv`).")

    @commands.command(name='sell')
    async def sell(self, ctx: commands.Context, *, item_name: str):
        """B√°n m·ªôt v·∫≠t ph·∫©m t·ª´ t√∫i ƒë·ªì c·ªßa b·∫°n ƒë·ªÉ l·∫•y ti·ªÅn."""
        item_id_to_sell = item_name.lower().strip().replace(" ", "_")

        # Ki·ªÉm tra xem v·∫≠t ph·∫©m n√†y c√≥ trong SHOP_ITEMS kh√¥ng (ƒë·ªÉ bi·∫øt gi√° b√°n)
        if item_id_to_sell not in SHOP_ITEMS:
            await try_send(ctx, content=f"Kh√¥ng th·ªÉ b√°n v·∫≠t ph·∫©m `{item_name}` n√†y ho·∫∑c n√≥ kh√¥ng c√≥ trong danh m·ª•c c·ª≠a h√†ng.")
            return

        item_details = SHOP_ITEMS[item_id_to_sell]
        sell_price = item_details.get("sell_price") # D√πng .get() ƒë·ªÉ an to√†n

        if sell_price is None: # N·∫øu v·∫≠t ph·∫©m kh√¥ng c√≥ gi√° b√°n
            await try_send(ctx, content=f"V·∫≠t ph·∫©m `{item_id_to_sell.replace('_', ' ').capitalize()}` n√†y kh√¥ng th·ªÉ b√°n l·∫°i.")
            return
            
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        
        # ƒê·∫£m b·∫£o inventory t·ªìn t·∫°i v√† l√† list
        inventory_list = user_data.get("inventory", [])
        if not isinstance(inventory_list, list): # N·∫øu inventory kh√¥ng ph·∫£i list (d·ªØ li·ªáu c≈© c√≥ th·ªÉ b·ªã l·ªói)
            inventory_list = [] # Reset th√†nh list r·ªóng
            user_data["inventory"] = inventory_list


        if item_id_to_sell not in inventory_list:
            await try_send(ctx, content=f"B·∫°n kh√¥ng c√≥ v·∫≠t ph·∫©m `{item_id_to_sell.replace('_', ' ').capitalize()}` trong t√∫i ƒë·ªì.")
            return
            
        user_data["balance"] = user_data.get("balance", 0) + sell_price
        try:
            inventory_list.remove(item_id_to_sell) # X√≥a m·ªôt instance c·ªßa v·∫≠t ph·∫©m
        except ValueError:
            # Tr∆∞·ªùng h·ª£p n√†y kh√¥ng n√™n x·∫£y ra n·∫øu check ·ªü tr√™n ƒë√£ ƒë√∫ng
            await try_send(ctx, content=f"L·ªói: Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m `{item_id_to_sell.replace('_', ' ').capitalize()}` ƒë·ªÉ x√≥a kh·ªèi t√∫i ƒë·ªì, d√π ƒë√£ ki·ªÉm tra c√≥.")
            return

        # user_data["inventory"] ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√¨ inventory_list l√† m·ªôt tham chi·∫øu
        save_data(data)
        item_name_display = item_id_to_sell.replace("_", " ").capitalize()
        await try_send(ctx, content=f"B·∫°n ƒë√£ b√°n th√†nh c√¥ng **{item_name_display}** v√† nh·∫≠n ƒë∆∞·ª£c **{sell_price:,}** {CURRENCY_SYMBOL}!")

    @commands.command(name='inventory', aliases=['inv', 'items', 'i'])
    async def inventory(self, ctx: commands.Context, user: nextcord.Member = None):
        """Hi·ªÉn th·ªã t√∫i ƒë·ªì (c√°c v·∫≠t ph·∫©m ƒëang s·ªü h·ªØu) c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi d√πng kh√°c."""
        target_user = user or ctx.author
        data = get_user_data(ctx.guild.id, target_user.id)
        # Truy c·∫≠p d·ªØ li·ªáu user c·ª• th·ªÉ t·ª´ full_data
        guild_id_str = str(ctx.guild.id)
        user_id_str = str(target_user.id)
        user_specific_data = data.get(guild_id_str, {}).get(user_id_str, {})


        if user_id_str == "config" or not isinstance(user_specific_data, dict):
            await try_send(ctx, content=f"L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t√∫i ƒë·ªì cho {target_user.mention}.")
            return

        inv_list = user_specific_data.get("inventory", []) # L·∫•y danh s√°ch inventory
        if not isinstance(inv_list, list): # ƒê·∫£m b·∫£o inv_list l√† list
            inv_list = []


        embed = nextcord.Embed(title=f"üéí T√∫i ƒê·ªì - {target_user.name} üéí", color=nextcord.Color.green())

        if not inv_list:
            embed.description = "T√∫i ƒë·ªì tr·ªëng tr∆°n."
        else:
            # ƒê·∫øm s·ªë l∆∞·ª£ng m·ªói lo·∫°i v·∫≠t ph·∫©m
            item_counts = {}
            for item_id_in_inv in inv_list:
                item_counts[item_id_in_inv] = item_counts.get(item_id_in_inv, 0) + 1
            
            description_parts = []
            for item_id, count in item_counts.items():
                # L·∫•y t√™n hi·ªÉn th·ªã t·ª´ SHOP_ITEMS n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng item_id ƒë√£ chu·∫©n h√≥a
                item_display_name = SHOP_ITEMS.get(item_id, {}).get("name", item_id.replace("_", " ").capitalize())
                description_parts.append(f"- {item_display_name} (x{count})")
            
            embed.description = "\n".join(description_parts) if description_parts else "T√∫i ƒë·ªì tr·ªëng tr∆°n."
            
        await try_send(ctx, embed=embed)

# H√†m setup ƒë·ªÉ bot c√≥ th·ªÉ load cog n√†y
def setup(bot: commands.Bot):
    bot.add_cog(ShopCog(bot))
