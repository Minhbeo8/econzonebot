# bot/cogs/shop.py
import nextcord
from nextcord.ext import commands
from typing import Optional # Kh√¥ng th·ª±c s·ª± c·∫ßn n·∫øu d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh tr·ª±c ti·∫øp

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from core.database import get_user_data, save_data
from core.utils import try_send
from core.config import CURRENCY_SYMBOL, SHOP_ITEMS, COMMAND_PREFIX
from core.icons import ICON_SHOP, ICON_INVENTORY, ICON_SUCCESS, ICON_ERROR, ICON_WARNING # Th√™m c√°c icon n·∫øu c·∫ßn

class ShopCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command(name='shop', aliases=['store'])
    async def shop(self, ctx: commands.Context):
        """Hi·ªÉn th·ªã c√°c v·∫≠t ph·∫©m ƒëang ƒë∆∞·ª£c b√°n trong c·ª≠a h√†ng.
        S·ª≠ d·ª•ng l·ªánh `buy <t√™n_v·∫≠t_ph·∫©m> [s·ªë_l∆∞·ª£ng]` ƒë·ªÉ mua (s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1).
        S·ª≠ d·ª•ng l·ªánh `sell <t√™n_v·∫≠t_ph·∫©m> [s·ªë_l∆∞·ª£ng]` ƒë·ªÉ b√°n (s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1).
        """
        embed = nextcord.Embed(
            title=f"{ICON_SHOP} C·ª≠a H√†ng üè™", # Th√™m icon cho shop
            description=f"Mua: `{COMMAND_PREFIX}buy <t√™n_v·∫≠t_ph·∫©m> [s·ªë_l∆∞·ª£ng]` (m·∫∑c ƒë·ªãnh s·ªë l∆∞·ª£ng l√† 1)\nB√°n: `{COMMAND_PREFIX}sell <t√™n_v·∫≠t_ph·∫©m> [s·ªë_l∆∞·ª£ng]` (m·∫∑c ƒë·ªãnh s·ªë l∆∞·ª£ng l√† 1)",
            color=nextcord.Color.orange()
        )
        if not SHOP_ITEMS:
            embed.description = "C·ª≠a h√†ng hi·ªán ƒëang tr·ªëng ho·∫∑c ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t."
        else:
            for item_id, details in SHOP_ITEMS.items():
                item_name_display = item_id.replace("_", " ").capitalize()
                buy_price_str = f"{details['price']:,}"
                
                sell_price_val = details.get('sell_price')
                if sell_price_val is not None:
                    sell_price_str = f"{sell_price_val:,} {CURRENCY_SYMBOL}"
                else:
                    sell_price_str = "Kh√¥ng th·ªÉ b√°n"
                
                embed.add_field(
                    name=f"{item_name_display} - Mua: {buy_price_str} {CURRENCY_SYMBOL} | B√°n: {sell_price_str}",
                    value=details['description'],
                    inline=False
                )
        await try_send(ctx, embed=embed)

    @commands.command(name='buy')
    async def buy(self, ctx: commands.Context, item_name: str, quantity: int = 1): # Thay ƒë·ªïi th·ª© t·ª± v√† th√™m gi√° tr·ªã m·∫∑c ƒë·ªãnh cho quantity
        """Mua m·ªôt ho·∫∑c nhi·ªÅu v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng. N·∫øu kh√¥ng nh·∫≠p s·ªë l∆∞·ª£ng, m·∫∑c ƒë·ªãnh l√† 1.
        V√≠ d·ª•: !buy laptop
               !buy laptop 2
        """
        if quantity <= 0:
            await try_send(ctx, content=f"{ICON_ERROR} S·ªë l∆∞·ª£ng mua ph·∫£i l·ªõn h∆°n 0.")
            return

        # item_name gi·ªù ƒë·ª©ng tr∆∞·ªõc, n√™n n√≥ s·∫Ω nh·∫≠n ph·∫ßn ch·ªØ tr∆∞·ªõc.
        # N·∫øu item_name c√≥ nhi·ªÅu t·ª´, ng∆∞·ªùi d√πng l·ªánh prefix c·∫ßn d√πng d·∫•u ngo·∫∑c k√©p: !buy "gold watch" 2
        # L·ªánh t·∫Øt (bare command) v√≠ d·ª• "buy gold watch 2" s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω:
        #   command_candidate = "buy"
        #   args_for_bare_command = "gold watch 2"
        #   message.content = "!buy gold watch 2"
        #   Nextcord s·∫Ω c·ªë g·∫Øng kh·ªõp "gold watch" v·ªõi item_name v√† "2" v·ªõi quantity.
        #   N·∫øu ng∆∞·ªùi d√πng g√µ "buy gold watch" (kh√¥ng c√≥ s·ªë l∆∞·ª£ng), quantity s·∫Ω l√† 1 (m·∫∑c ƒë·ªãnh).
        
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng g√µ "buy 2 laptop" (sai th·ª© t·ª± m·ªõi)
        # ƒê√¢y l√† m·ªôt c√°ch ƒë∆°n gi·∫£n ƒë·ªÉ th·ª≠ ƒëo√°n √Ω ng∆∞·ªùi d√πng, c√≥ th·ªÉ c·∫ßn tinh ch·ªânh
        potential_quantity_in_item_name_str = item_name.split()
        actual_item_name_parts = []
        parsed_quantity = quantity # Gi·ªØ l·∫°i quantity g·ªëc n·∫øu c√≥

        if len(potential_quantity_in_item_name_str) > 1:
            try:
                # Th·ª≠ xem t·ª´ ƒë·∫ßu ti√™n c·ªßa item_name c√≥ ph·∫£i l√† s·ªë kh√¥ng (tr∆∞·ªùng h·ª£p g√µ `buy 2 laptop`)
                # v√† quantity g·ªëc v·∫´n l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh (1)
                first_word_as_int = int(potential_quantity_in_item_name_str[0])
                if quantity == 1: # Ch·ªâ ghi ƒë√® n·∫øu quantity l√† m·∫∑c ƒë·ªãnh
                    parsed_quantity = first_word_as_int
                    actual_item_name_parts = potential_quantity_in_item_name_str[1:]
                else: # Ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p quantity ·ªü cu·ªëi, gi·ªØ nguy√™n item_name
                    actual_item_name_parts = potential_quantity_in_item_name_str
            except ValueError:
                # T·ª´ ƒë·∫ßu ti√™n kh√¥ng ph·∫£i l√† s·ªë, coi nh∆∞ to√†n b·ªô l√† item_name
                actual_item_name_parts = potential_quantity_in_item_name_str
        else:
            actual_item_name_parts = potential_quantity_in_item_name_str

        processed_item_name = " ".join(actual_item_name_parts)
        item_id_to_buy = processed_item_name.lower().strip().replace(" ", "_")

        if not item_id_to_buy: # N·∫øu sau khi x·ª≠ l√Ω item_name r·ªóng (v√≠ d·ª•: ch·ªâ nh·∫≠p s·ªë)
             await try_send(ctx, content=f"{ICON_WARNING} Vui l√≤ng nh·∫≠p t√™n v·∫≠t ph·∫©m b·∫°n mu·ªën mua. C√∫ ph√°p: `{COMMAND_PREFIX}buy <t√™n_v·∫≠t_ph·∫©m> [s·ªë_l∆∞·ª£ng]`")
             return

        if parsed_quantity <= 0: # Ki·ªÉm tra l·∫°i parsed_quantity
            await try_send(ctx, content=f"{ICON_ERROR} S·ªë l∆∞·ª£ng mua ph·∫£i l·ªõn h∆°n 0.")
            return


        if item_id_to_buy not in SHOP_ITEMS:
            await try_send(ctx, content=f"{ICON_ERROR} V·∫≠t ph·∫©m `{processed_item_name}` kh√¥ng t·ªìn t·∫°i trong c·ª≠a h√†ng.")
            return
        
        item_details = SHOP_ITEMS[item_id_to_buy]
        price_per_item = item_details["price"]
        total_price = price_per_item * parsed_quantity
        
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        item_name_display = item_id_to_buy.replace("_", " ").capitalize()

        if user_data.get("balance", 0) < total_price:
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c·∫ßn **{total_price:,}** {CURRENCY_SYMBOL} ƒë·ªÉ mua {parsed_quantity} {item_name_display}. (V√≠ b·∫°n c√≥: {user_data.get('balance', 0):,} {CURRENCY_SYMBOL})")
            return
            
        user_data["balance"] -= total_price
        if "inventory" not in user_data or not isinstance(user_data["inventory"], list):
            user_data["inventory"] = []
        
        for _ in range(parsed_quantity):
            user_data["inventory"].append(item_id_to_buy)
        
        save_data(data)
        await try_send(ctx, content=f"{ICON_SUCCESS} B·∫°n ƒë√£ mua th√†nh c√¥ng **{parsed_quantity} {item_name_display}** v·ªõi t·ªïng gi√° **{total_price:,}** {CURRENCY_SYMBOL}! Ch√∫ng ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√∫i ƒë·ªì (`{COMMAND_PREFIX}inv`).")

    @commands.command(name='sell')
    async def sell(self, ctx: commands.Context, item_name: str, quantity: int = 1): # Thay ƒë·ªïi th·ª© t·ª± v√† th√™m gi√° tr·ªã m·∫∑c ƒë·ªãnh
        """B√°n m·ªôt ho·∫∑c nhi·ªÅu v·∫≠t ph·∫©m t·ª´ t√∫i ƒë·ªì c·ªßa b·∫°n. N·∫øu kh√¥ng nh·∫≠p s·ªë l∆∞·ª£ng, m·∫∑c ƒë·ªãnh l√† 1.
        V√≠ d·ª•: !sell laptop
               !sell laptop 2
        """
        if quantity <= 0:
            await try_send(ctx, content=f"{ICON_ERROR} S·ªë l∆∞·ª£ng b√°n ph·∫£i l·ªõn h∆°n 0.")
            return

        # T∆∞∆°ng t·ª± nh∆∞ buy, x·ª≠ l√Ω tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p sai th·ª© t·ª± (v√≠ d·ª• `sell 2 laptop`)
        potential_quantity_in_item_name_str = item_name.split()
        actual_item_name_parts = []
        parsed_quantity = quantity

        if len(potential_quantity_in_item_name_str) > 1:
            try:
                first_word_as_int = int(potential_quantity_in_item_name_str[0])
                if quantity == 1: # Ch·ªâ ghi ƒë√® n·∫øu quantity l√† m·∫∑c ƒë·ªãnh
                    parsed_quantity = first_word_as_int
                    actual_item_name_parts = potential_quantity_in_item_name_str[1:]
                else:
                    actual_item_name_parts = potential_quantity_in_item_name_str
            except ValueError:
                actual_item_name_parts = potential_quantity_in_item_name_str
        else:
            actual_item_name_parts = potential_quantity_in_item_name_str
        
        processed_item_name = " ".join(actual_item_name_parts)
        item_id_to_sell = processed_item_name.lower().strip().replace(" ", "_")
        item_name_display = item_id_to_sell.replace("_", " ").capitalize()

        if not item_id_to_sell:
             await try_send(ctx, content=f"{ICON_WARNING} Vui l√≤ng nh·∫≠p t√™n v·∫≠t ph·∫©m b·∫°n mu·ªën b√°n. C√∫ ph√°p: `{COMMAND_PREFIX}sell <t√™n_v·∫≠t_ph·∫©m> [s·ªë_l∆∞·ª£ng]`")
             return
        
        if parsed_quantity <= 0: # Ki·ªÉm tra l·∫°i parsed_quantity
            await try_send(ctx, content=f"{ICON_ERROR} S·ªë l∆∞·ª£ng b√°n ph·∫£i l·ªõn h∆°n 0.")
            return


        if item_id_to_sell not in SHOP_ITEMS:
            await try_send(ctx, content=f"{ICON_ERROR} V·∫≠t ph·∫©m `{item_name_display}` kh√¥ng n·∫±m trong danh m·ª•c c√≥ th·ªÉ b√°n c·ªßa c·ª≠a h√†ng.")
            return

        item_details = SHOP_ITEMS[item_id_to_sell]
        sell_price_per_item = item_details.get("sell_price")

        if sell_price_per_item is None:
            await try_send(ctx, content=f"{ICON_INFO} V·∫≠t ph·∫©m `{item_name_display}` n√†y kh√¥ng th·ªÉ b√°n l·∫°i.")
            return
            
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        
        inventory_list = user_data.get("inventory", [])
        if not isinstance(inventory_list, list):
            inventory_list = []
            user_data["inventory"] = inventory_list

        current_item_count = inventory_list.count(item_id_to_sell)

        if current_item_count < parsed_quantity:
            await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng c√≥ ƒë·ªß **{parsed_quantity} {item_name_display}** ƒë·ªÉ b√°n. B·∫°n ch·ªâ c√≥ {current_item_count}.")
            return
        
        total_sell_price = sell_price_per_item * parsed_quantity
        user_data["balance"] = user_data.get("balance", 0) + total_sell_price
        
        for _ in range(parsed_quantity):
            try:
                inventory_list.remove(item_id_to_sell)
            except ValueError:
                await try_send(ctx, content=f"{ICON_ERROR} L·ªói khi c·ªë g·∫Øng x√≥a {item_name_display} kh·ªèi t√∫i ƒë·ªì. Vui l√≤ng th·ª≠ l·∫°i.")
                user_data["balance"] -= total_sell_price 
                save_data(data) 
                return
        
        save_data(data)
        await try_send(ctx, content=f"{ICON_SUCCESS} B·∫°n ƒë√£ b√°n th√†nh c√¥ng **{parsed_quantity} {item_name_display}** v√† nh·∫≠n ƒë∆∞·ª£c **{total_sell_price:,}** {CURRENCY_SYMBOL}!")

    @commands.command(name='inventory', aliases=['inv', 'items', 'i'])
    async def inventory(self, ctx: commands.Context, user: nextcord.Member = None):
        """Hi·ªÉn th·ªã t√∫i ƒë·ªì (c√°c v·∫≠t ph·∫©m ƒëang s·ªü h·ªØu) c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi d√πng kh√°c."""
        target_user = user or ctx.author
        data = get_user_data(ctx.guild.id, target_user.id)
        guild_id_str = str(ctx.guild.id)
        user_id_str = str(target_user.id)
        user_specific_data = data.get(guild_id_str, {}).get(user_id_str, {})

        if user_id_str == "config" or not isinstance(user_specific_data, dict):
            await try_send(ctx, content=f"{ICON_ERROR} L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t√∫i ƒë·ªì cho {target_user.mention}.")
            return

        inv_list = user_specific_data.get("inventory", [])
        if not isinstance(inv_list, list):
            inv_list = []

        embed = nextcord.Embed(title=f"{ICON_INVENTORY} T√∫i ƒê·ªì - {target_user.name} üéí", color=nextcord.Color.green()) # Th√™m icon

        if not inv_list:
            embed.description = "T√∫i ƒë·ªì tr·ªëng tr∆°n."
        else:
            item_counts = {}
            for item_id_in_inv in inv_list:
                item_counts[item_id_in_inv] = item_counts.get(item_id_in_inv, 0) + 1
            
            description_parts = []
            if item_counts:
                for item_id, count in item_counts.items():
                    item_display_name = SHOP_ITEMS.get(item_id, {}).get("name", item_id.replace("_", " ").capitalize())
                    item_price_info = SHOP_ITEMS.get(item_id, {})
                    buy_price = item_price_info.get("price", 0)
                    sell_price = item_price_info.get("sell_price")
                    
                    price_str = f"(Mua: {buy_price:,}"
                    if sell_price is not None:
                        price_str += f" | B√°n: {sell_price:,}"
                    price_str += f" {CURRENCY_SYMBOL})"
                    
                    description_parts.append(f"- {item_display_name} (x{count}) {price_str}")
                embed.description = "\n".join(description_parts)
            else:
                 embed.description = "T√∫i ƒë·ªì c√≥ v·∫ª tr·ªëng ho·∫∑c c√≥ l·ªói khi ƒë·ªçc v·∫≠t ph·∫©m."
            
        await try_send(ctx, embed=embed)

def setup(bot: commands.Bot):
    bot.add_cog(ShopCog(bot))

