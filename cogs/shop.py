# bot/cogs/shop.py
import nextcord
from nextcord.ext import commands
from typing import Optional # ƒê·ªÉ d√πng cho quantity n·∫øu mu·ªën c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from core.database import get_user_data, save_data
from core.utils import try_send
from core.config import CURRENCY_SYMBOL, SHOP_ITEMS, COMMAND_PREFIX

class ShopCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.command(name='shop', aliases=['store'])
    async def shop(self, ctx: commands.Context):
        """Hi·ªÉn th·ªã c√°c v·∫≠t ph·∫©m ƒëang ƒë∆∞·ª£c b√°n trong c·ª≠a h√†ng.
        S·ª≠ d·ª•ng l·ªánh `buy <s·ªë_l∆∞·ª£ng> <t√™n_v·∫≠t_ph·∫©m>` ƒë·ªÉ mua.
        S·ª≠ d·ª•ng l·ªánh `sell <s·ªë_l∆∞·ª£ng> <t√™n_v·∫≠t_ph·∫©m>` ƒë·ªÉ b√°n.
        """
        embed = nextcord.Embed(
            title="üè™ C·ª≠a H√†ng üè™",
            description=f"Mua: `{COMMAND_PREFIX}buy <s·ªë_l∆∞·ª£ng> <t√™n_v·∫≠t_ph·∫©m>`\nB√°n: `{COMMAND_PREFIX}sell <s·ªë_l∆∞·ª£ng> <t√™n_v·∫≠t_ph·∫©m>`",
            color=nextcord.Color.orange()
        )
        if not SHOP_ITEMS:
            embed.description = "C·ª≠a h√†ng hi·ªán ƒëang tr·ªëng ho·∫∑c ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t."
        else:
            for item_id, details in SHOP_ITEMS.items():
                item_name_display = item_id.replace("_", " ").capitalize()
                buy_price_str = f"{details['price']:,}"
                
                sell_price_val = details.get('sell_price')
                if sell_price_val is not None:
                    sell_price_str = f"{sell_price_val:,} {CURRENCY_SYMBOL}"
                else:
                    sell_price_str = "Kh√¥ng th·ªÉ b√°n"
                
                embed.add_field(
                    name=f"{item_name_display} - Mua: {buy_price_str} {CURRENCY_SYMBOL} | B√°n: {sell_price_str}",
                    value=details['description'],
                    inline=False
                )
        await try_send(ctx, embed=embed)

    @commands.command(name='buy')
    async def buy(self, ctx: commands.Context, quantity: int, *, item_name: str):
        """Mua m·ªôt ho·∫∑c nhi·ªÅu v·∫≠t ph·∫©m t·ª´ c·ª≠a h√†ng.
        V√≠ d·ª•: !buy 2 laptop
        """
        if quantity <= 0:
            await try_send(ctx, content="S·ªë l∆∞·ª£ng mua ph·∫£i l·ªõn h∆°n 0.")
            return

        item_id_to_buy = item_name.lower().strip().replace(" ", "_")

        if item_id_to_buy not in SHOP_ITEMS:
            await try_send(ctx, content=f"V·∫≠t ph·∫©m `{item_name}` kh√¥ng t·ªìn t·∫°i trong c·ª≠a h√†ng.")
            return
        
        item_details = SHOP_ITEMS[item_id_to_buy]
        price_per_item = item_details["price"]
        total_price = price_per_item * quantity
        
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        item_name_display = item_id_to_buy.replace("_", " ").capitalize()

        if user_data.get("balance", 0) < total_price:
            await try_send(ctx, content=f"B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c·∫ßn **{total_price:,}** {CURRENCY_SYMBOL} ƒë·ªÉ mua {quantity} {item_name_display}. (V√≠ b·∫°n c√≥: {user_data.get('balance', 0):,} {CURRENCY_SYMBOL})")
            return
            
        user_data["balance"] -= total_price
        if "inventory" not in user_data or not isinstance(user_data["inventory"], list):
            user_data["inventory"] = []
        
        for _ in range(quantity): # Th√™m v·∫≠t ph·∫©m v√†o t√∫i ƒë·ªì quantity l·∫ßn
            user_data["inventory"].append(item_id_to_buy)
        
        save_data(data)
        await try_send(ctx, content=f"üõçÔ∏è B·∫°n ƒë√£ mua th√†nh c√¥ng **{quantity} {item_name_display}** v·ªõi t·ªïng gi√° **{total_price:,}** {CURRENCY_SYMBOL}! Ch√∫ng ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√∫i ƒë·ªì (`{COMMAND_PREFIX}inv`).")

    @commands.command(name='sell')
    async def sell(self, ctx: commands.Context, quantity: int, *, item_name: str):
        """B√°n m·ªôt ho·∫∑c nhi·ªÅu v·∫≠t ph·∫©m t·ª´ t√∫i ƒë·ªì c·ªßa b·∫°n.
        V√≠ d·ª•: !sell 2 laptop
        """
        if quantity <= 0:
            await try_send(ctx, content="S·ªë l∆∞·ª£ng b√°n ph·∫£i l·ªõn h∆°n 0.")
            return

        item_id_to_sell = item_name.lower().strip().replace(" ", "_")
        item_name_display = item_id_to_sell.replace("_", " ").capitalize()

        if item_id_to_sell not in SHOP_ITEMS:
            await try_send(ctx, content=f"V·∫≠t ph·∫©m `{item_name_display}` kh√¥ng n·∫±m trong danh m·ª•c c√≥ th·ªÉ b√°n c·ªßa c·ª≠a h√†ng.")
            return

        item_details = SHOP_ITEMS[item_id_to_sell]
        sell_price_per_item = item_details.get("sell_price")

        if sell_price_per_item is None:
            await try_send(ctx, content=f"V·∫≠t ph·∫©m `{item_name_display}` n√†y kh√¥ng th·ªÉ b√°n l·∫°i.")
            return
            
        data = get_user_data(ctx.guild.id, ctx.author.id)
        user_data = data[str(ctx.guild.id)][str(ctx.author.id)]
        
        inventory_list = user_data.get("inventory", [])
        if not isinstance(inventory_list, list):
            inventory_list = []
            user_data["inventory"] = inventory_list

        # ƒê·∫øm s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m ng∆∞·ªùi d√πng c√≥
        current_item_count = inventory_list.count(item_id_to_sell)

        if current_item_count < quantity:
            await try_send(ctx, content=f"B·∫°n kh√¥ng c√≥ ƒë·ªß **{quantity} {item_name_display}** ƒë·ªÉ b√°n. B·∫°n ch·ªâ c√≥ {current_item_count}.")
            return
        
        total_sell_price = sell_price_per_item * quantity
        user_data["balance"] = user_data.get("balance", 0) + total_sell_price
        
        for _ in range(quantity): # X√≥a v·∫≠t ph·∫©m kh·ªèi t√∫i ƒë·ªì quantity l·∫ßn
            try:
                inventory_list.remove(item_id_to_sell)
            except ValueError:
                # L·ªói n√†y kh√¥ng n√™n x·∫£y ra n·∫øu logic ƒë·∫øm ·ªü tr√™n ƒë√∫ng
                # nh∆∞ng th√™m v√†o ƒë·ªÉ ph√≤ng tr∆∞·ªùng h·ª£p b·∫•t th∆∞·ªùng
                await try_send(ctx, content=f"L·ªói khi c·ªë g·∫Øng x√≥a {item_name_display} kh·ªèi t√∫i ƒë·ªì. Vui l√≤ng th·ª≠ l·∫°i.")
                # C√≥ th·ªÉ c·∫ßn ho√†n l·∫°i ti·ªÅn n·∫øu ƒë√£ c·ªông ·ªü tr√™n m√† x√≥a l·ªói
                user_data["balance"] -= total_sell_price # Ho√†n ti·ªÅn n·∫øu x√≥a l·ªói
                save_data(data) # L∆∞u tr·∫°ng th√°i ƒë√£ ho√†n ti·ªÅn
                return
        
        # user_data["inventory"] ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√¨ inventory_list l√† m·ªôt tham chi·∫øu ƒë·∫øn list trong user_data
        save_data(data)
        await try_send(ctx, content=f"üí∞ B·∫°n ƒë√£ b√°n th√†nh c√¥ng **{quantity} {item_name_display}** v√† nh·∫≠n ƒë∆∞·ª£c **{total_sell_price:,}** {CURRENCY_SYMBOL}!")

    @commands.command(name='inventory', aliases=['inv', 'items', 'i'])
    async def inventory(self, ctx: commands.Context, user: nextcord.Member = None):
        """Hi·ªÉn th·ªã t√∫i ƒë·ªì (c√°c v·∫≠t ph·∫©m ƒëang s·ªü h·ªØu) c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi d√πng kh√°c."""
        target_user = user or ctx.author
        data = get_user_data(ctx.guild.id, target_user.id)
        guild_id_str = str(ctx.guild.id)
        user_id_str = str(target_user.id)
        user_specific_data = data.get(guild_id_str, {}).get(user_id_str, {})

        if user_id_str == "config" or not isinstance(user_specific_data, dict):
            await try_send(ctx, content=f"L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t√∫i ƒë·ªì cho {target_user.mention}.")
            return

        inv_list = user_specific_data.get("inventory", [])
        if not isinstance(inv_list, list):
            inv_list = []

        embed = nextcord.Embed(title=f"üéí T√∫i ƒê·ªì - {target_user.name} üéí", color=nextcord.Color.green())

        if not inv_list:
            embed.description = "T√∫i ƒë·ªì tr·ªëng tr∆°n."
        else:
            item_counts = {}
            for item_id_in_inv in inv_list:
                item_counts[item_id_in_inv] = item_counts.get(item_id_in_inv, 0) + 1
            
            description_parts = []
            if item_counts:
                for item_id, count in item_counts.items():
                    item_display_name = SHOP_ITEMS.get(item_id, {}).get("name", item_id.replace("_", " ").capitalize())
                    item_price_info = SHOP_ITEMS.get(item_id, {})
                    buy_price = item_price_info.get("price", 0)
                    sell_price = item_price_info.get("sell_price")
                    
                    price_str = f"(Mua: {buy_price:,}"
                    if sell_price is not None:
                        price_str += f" | B√°n: {sell_price:,}"
                    price_str += f" {CURRENCY_SYMBOL})"
                    
                    description_parts.append(f"- {item_display_name} (x{count}) {price_str}")
                embed.description = "\n".join(description_parts)
            else: # Tr∆∞·ªùng h·ª£p inv_list kh√¥ng r·ªóng nh∆∞ng item_counts l·∫°i r·ªóng (√≠t kh·∫£ nƒÉng)
                 embed.description = "T√∫i ƒë·ªì c√≥ v·∫ª tr·ªëng ho·∫∑c c√≥ l·ªói khi ƒë·ªçc v·∫≠t ph·∫©m."
            
        await try_send(ctx, embed=embed)

# H√†m setup ƒë·ªÉ bot c√≥ th·ªÉ load cog n√†y
def setup(bot: commands.Bot):
    bot.add_cog(ShopCog(bot))
