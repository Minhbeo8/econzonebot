# bot/core/bot.py
import nextcord
from nextcord.ext import commands
import os 
import logging # S·ª≠ d·ª•ng logging

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from .config import COMMAND_PREFIX, BARE_COMMAND_MAP 
from .database import get_guild_config 
from .utils import try_send 
# ƒê·∫£m b·∫£o b·∫°n import ƒë·ªß c√°c icon c·∫ßn thi·∫øt cho on_command_error v√† on_ready
from .icons import ICON_ERROR, ICON_WARNING, ICON_INFO, ICON_LOADING, ICON_SUCCESS 

# --- Kh·ªüi t·∫°o Bot ---
intents = nextcord.Intents.default()
intents.message_content = True 
intents.members = True       
bot = commands.Bot(command_prefix=COMMAND_PREFIX, intents=intents)
# T·∫°o logger cho module n√†y (s·∫Ω c√≥ t√™n l√† 'core.bot' khi ƒë∆∞·ª£c import t·ª´ n∆°i kh√°c)
logger = logging.getLogger(__name__) 

@bot.event
async def on_ready():
    logger.info(f"--------------------------------------------------")
    logger.info(f"{ICON_SUCCESS} Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n: {bot.user.name} (ID: {bot.user.id})")
    logger.info(f"{ICON_INFO} Prefix l·ªánh: {COMMAND_PREFIX}")
    logger.info(f"Nextcord Version: {nextcord.__version__}")
    logger.info(f"Bot ƒë√£ s·∫µn s√†ng v√† ƒëang ch·ªù l·ªánh!")
    logger.info(f"{ICON_INFO} ƒê·ªÉ xem tr·ª£ gi√∫p, h√£y g√µ /menu tr√™n Discord.") # Gi·∫£ s·ª≠ l·ªánh help slash l√† /menu
    logger.info(f"--------------------------------------------------")
    
# --- H√ÄM ON_MESSAGE PHI√äN B·∫¢N ƒê·∫¶Y ƒê·ª¶ (ƒê√É C√ì LOGGER) ---
@bot.event
async def on_message(message: nextcord.Message):
    # Log m·ªçi tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c ·ªü m·ª©c DEBUG ƒë·ªÉ theo d√µi chi ti·∫øt trong file log
    logger.debug(f"ON_MESSAGE: Received message: '{message.content}' from {message.author.name} ({message.author.id}) in G:{message.guild.id if message.guild else 'DM'}/C:{message.channel.id}")

    if message.author.bot:
        logger.debug(f"ON_MESSAGE: Message from bot {message.author.name}, ignoring.")
        return

    if not message.guild: # X·ª≠ l√Ω tin nh·∫Øn ri√™ng
        logger.debug(f"ON_MESSAGE: DM message from {message.author.name}. Processing commands.")
        await bot.process_commands(message)
        logger.debug(f"ON_MESSAGE: Finished processing DM for {message.author.name}.")
        return

    content = message.content.strip()
    if not content:
        logger.debug(f"ON_MESSAGE: Empty content after strip, ignoring.")
        return

    guild_config = get_guild_config(message.guild.id)
    active_bare_channels = guild_config.get("bare_command_active_channels", [])
    
    should_process_this_message_as_command = False # Kh·ªüi t·∫°o l√† False

    if message.channel.id in active_bare_channels and not content.startswith(COMMAND_PREFIX):
        logger.debug(f"ON_MESSAGE: Auto-channel detected for '{message.channel.id}', no prefix. Attempting bare command: '{content}'")
        parts = content.split(maxsplit=1) 
        command_candidate = parts[0].lower() # Chuy·ªÉn l·ªánh t·∫Øt th√†nh ch·ªØ th∆∞·ªùng

        if command_candidate in BARE_COMMAND_MAP: # So s√°nh v·ªõi c√°c key ch·ªØ th∆∞·ªùng trong map
            actual_command_name = BARE_COMMAND_MAP[command_candidate]
            args_for_bare_command = parts[1] if len(parts) > 1 else ""
            
            if bot.get_command(actual_command_name): # Ki·ªÉm tra l·ªánh g·ªëc c√≥ t·ªìn t·∫°i kh√¥ng
                message.content = f"{COMMAND_PREFIX}{actual_command_name} {args_for_bare_command}".strip()
                should_process_this_message_as_command = True # ƒê√°nh d·∫•u ƒë·ªÉ x·ª≠ l√Ω
                # Log INFO cho h√†nh ƒë·ªông bi·∫øn ƒë·ªïi l·ªánh t·∫Øt th√†nh c√¥ng
                logger.info(f"BARE_CMD_TRANSFORM: '{command_candidate}' by {message.author.name} -> '{message.content}'")
            else:
                logger.warning(f"BARE_CMD_INVALID_MAP: L·ªánh t·∫Øt '{command_candidate}' tr·ªè ƒë·∫øn l·ªánh g·ªëc '{actual_command_name}' KH√îNG T·ªíN T·∫†I. B·ªè qua.")
                # should_process_this_message_as_command v·∫´n l√† False
        else:
            # T·ª´ kh√¥ng c√≥ trong BARE_COMMAND_MAP trong k√™nh auto
            # Ch·ªâ g·ª≠i c·∫£nh b√°o n·∫øu tin nh·∫Øn ng·∫Øn, c√≥ th·ªÉ l√† g√µ nh·∫ßm l·ªánh t·∫Øt
            if len(content.split()) <= 3: 
                 logger.debug(f"ON_MESSAGE: Potential invalid bare command '{command_candidate}' by {message.author.name} in auto-channel. Sending warning.")
                 await try_send(message.channel, content=f"{ICON_ERROR} L·ªánh t·∫Øt `{command_candidate}` kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. D√πng `/menu` ho·∫∑c `{COMMAND_PREFIX}help`.")
            # else: (tin nh·∫Øn d√†i h∆°n, coi nh∆∞ chat th∆∞·ªùng, kh√¥ng l√†m g√¨ c·∫£)
            #    logger.debug(f"ON_MESSAGE: Content '{content}' in auto-channel not a recognized bare command. Treating as normal chat.")
            # should_process_this_message_as_command v·∫´n l√† False
    
    elif content.startswith(COMMAND_PREFIX): # N·∫øu tin nh·∫Øn c√≥ prefix
        logger.debug(f"ON_MESSAGE: Message from {message.author.name} has prefix '{COMMAND_PREFIX}'. Flagged for processing: '{message.content}'")
        should_process_this_message_as_command = True # ƒê√°nh d·∫•u ƒë·ªÉ x·ª≠ l√Ω
    
    # Else: tin nh·∫Øn kh√¥ng c√≥ prefix V√Ä kh√¥ng trong k√™nh auto => chat th∆∞·ªùng, 
    # should_process_this_message_as_command gi·ªØ nguy√™n gi√° tr·ªã False ban ƒë·∫ßu c·ªßa n√≥.

    if should_process_this_message_as_command:
        logger.debug(f"ON_MESSAGE: FINAL DECISION - WILL CALL bot.process_commands for: '{message.content}' by {message.author.name}")
        await bot.process_commands(message)
        logger.debug(f"ON_MESSAGE: FINAL DECISION - FINISHED bot.process_commands for: '{message.content}' by {message.author.name}")
    # else: # Kh√¥ng c·∫ßn log cho m·ªçi tin nh·∫Øn th∆∞·ªùng ƒë·ªÉ tr√°nh spam log file tr·ª´ khi debug r·∫•t s√¢u
        # logger.debug(f"ON_MESSAGE: FINAL DECISION - Message '{content}' WILL NOT be processed as a command by {message.author.name}.")


@bot.event
async def on_command_error(ctx: commands.Context, error):
    logger.debug(f"on_command_error triggered for command '{ctx.command.name if ctx.command else 'unknown'}' by {ctx.author.name}. Error: {type(error).__name__} - {error}")
    if isinstance(error, commands.CommandNotFound):
        # logger.debug(f"CommandNotFound: {ctx.invoked_with} by {ctx.author.name}") # C√≥ th·ªÉ log n·∫øu mu·ªën
        return # B·ªè qua l·ªói kh√¥ng t√¨m th·∫•y l·ªánh m·ªôt c√°ch l·∫∑ng l·∫Ω
    elif isinstance(error, commands.MissingRequiredArgument):
        cmd_name = ctx.command.name if ctx.command else "l·ªánh n√†y"
        help_msg_for_cmd = f"G√µ `/menu l·ªánh {cmd_name}` ƒë·ªÉ xem chi ti·∫øt." if bot.get_command(cmd_name) else "" 
        await try_send(ctx, content=f"{ICON_WARNING} B·∫°n thi·∫øu tham s·ªë `{error.param.name}` cho l·ªánh `{cmd_name}`. {help_msg_for_cmd}")
    elif isinstance(error, commands.BadArgument):
        await try_send(ctx, content=f"{ICON_ERROR} ƒê·ªëi s·ªë b·∫°n cung c·∫•p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i. L·ªói chi ti·∫øt: {error}")
    elif isinstance(error, commands.CommandOnCooldown):
        await try_send(ctx, content=f"{ICON_LOADING} L·ªánh `{ctx.command.name}` ƒëang trong th·ªùi gian ch·ªù. B·∫°n c·∫ßn ƒë·ª£i **{error.retry_after:.1f} gi√¢y** n·ªØa.")
    elif isinstance(error, commands.MissingPermissions):
        perms_list = ", ".join([f"`{perm.replace('_', ' ').title()}`" for perm in error.missing_permissions])
        await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ d√πng l·ªánh n√†y. Thi·∫øu quy·ªÅn: {perms_list}.")
    elif isinstance(error, commands.NotOwner):
        await try_send(ctx, content=f"{ICON_ERROR} L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu c·ªßa Bot.")
    elif isinstance(error, commands.CheckFailure):
        logger.warning(f"CheckFailure cho l·ªánh '{ctx.command.name if ctx.command else 'unknown'}' b·ªüi user {ctx.author.id}: {error}")
        await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
    else:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong l·ªánh '{ctx.command.name if ctx.command else 'unknown'}' b·ªüi user {ctx.author.id}:", exc_info=True) # Ghi c·∫£ traceback
        await try_send(ctx, content=f"{ICON_ERROR} ·ªêi! ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau. üòµ‚Äçüí´")

# --- H√†m T·∫£i Cogs (PHI√äN B·∫¢N C·∫¨P NH·∫¨T ƒê·ªÇ H·ªñ TR·ª¢ TH∆Ø M·ª§C CON) ---
def load_all_cogs():
    logger.info(f"--------------------------------------------------")
    logger.info(f"ƒêang t·∫£i c√°c Cogs...")
    loaded_cogs_count = 0
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c 'cogs' ch√≠nh
    cogs_main_directory = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'cogs')
    
    for root, dirs, files in os.walk(cogs_main_directory):
        # B·ªè qua c√°c th∆∞ m·ª•c ƒë·∫∑c bi·ªát nh∆∞ __pycache__ ƒë·ªÉ tr√°nh l·ªói kh√¥ng c·∫ßn thi·∫øt
        dirs[:] = [d for d in dirs if d != '__pycache__']
        
        for filename in files:
            # Ch·ªâ load c√°c file Python, kh√¥ng ph·∫£i th∆∞ m·ª•c con hay file ·∫©n (b·ªè qua __init__.py)
            if filename.endswith('.py') and not filename.startswith('_'): 
                module_name_only = filename[:-3] 
                relative_path_to_cog_folder = os.path.relpath(root, cogs_main_directory)
                
                extension_path = ""
                if relative_path_to_cog_folder == ".": 
                    extension_path = f"cogs.{module_name_only}"
                else: 
                    python_module_subpath = relative_path_to_cog_folder.replace(os.sep, '.')
                    extension_path = f"cogs.{python_module_subpath}.{module_name_only}"
                
                try:
                    bot.load_extension(extension_path)
                    logger.info(f"  [+] ƒê√£ t·∫£i th√†nh c√¥ng Cog: {extension_path}")
                    loaded_cogs_count += 1
                except commands.ExtensionAlreadyLoaded: # B·∫Øt l·ªói n·∫øu Cog ƒë√£ ƒë∆∞·ª£c t·∫£i
                    logger.debug(f"  [~] Cog ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª´ tr∆∞·ªõc: {extension_path}")
                except commands.NoEntryPointError: # L·ªói Cog kh√¥ng c√≥ h√†m setup
                    logger.error(f"  [!] L·ªñI NoEntryPointError khi t·∫£i {extension_path}: File cog thi·∫øu h√†m setup(bot).")
                except Exception as e: # B·∫Øt c√°c l·ªói kh√°c khi load Cog
                    logger.error(f"  [!] L·ªñI khi t·∫£i Cog {extension_path}: Lo·∫°i l·ªói: {type(e).__name__} - {e}", exc_info=True) 
                    
    logger.info(f"--- Ho√†n t·∫•t! ƒê√£ t·∫£i {loaded_cogs_count} Cogs. ---")
    logger.info(f"--------------------------------------------------")
