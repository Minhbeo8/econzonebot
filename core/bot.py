# bot/core/bot.py
import nextcord
from nextcord.ext import commands
import os 
import logging # ƒê√£ c√≥ t·ª´ tr∆∞·ªõc

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from .config import COMMAND_PREFIX, BARE_COMMAND_MAP # BARE_COMMAND_MAP t·∫°m th·ªùi kh√¥ng d√πng trong on_message n√†y
from .database import get_guild_config 
from .utils import try_send 
from .icons import ICON_ERROR, ICON_WARNING, ICON_INFO, ICON_LOADING, ICON_SUCCESS 

# Kh·ªüi t·∫°o Bot (gi·ªØ nguy√™n)
intents = nextcord.Intents.default()
intents.message_content = True 
intents.members = True       
bot = commands.Bot(command_prefix=COMMAND_PREFIX, intents=intents)
logger = logging.getLogger(__name__) # Logger cho module n√†y (s·∫Ω c√≥ t√™n l√† core.bot)

@bot.event
async def on_ready():
    logger.info(f"--------------------------------------------------")
    logger.info(f"{ICON_SUCCESS} Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n: {bot.user.name} (ID: {bot.user.id})")
    logger.info(f"{ICON_INFO} Prefix l·ªánh: {COMMAND_PREFIX}")
    logger.info(f"Nextcord Version: {nextcord.__version__}")
    logger.info(f"Bot ƒë√£ s·∫µn s√†ng v√† ƒëang ch·ªù l·ªánh!")
    logger.info(f"{ICON_INFO} ƒê·ªÉ xem tr·ª£ gi√∫p, h√£y g√µ /menu tr√™n Discord.")
    logger.info(f"--------------------------------------------------")
    # await bot.change_presence(activity=nextcord.Game(name=f"D√πng /menu"))

# --- H√ÄM ON_MESSAGE ƒê√É ƒê∆Ø·ª¢C "SI√äU ƒê∆†N GI·∫¢N H√ìA" ƒê·ªÇ DEBUG ---
@bot.event
async def on_message(message: nextcord.Message):
    # S·ª≠ d·ª•ng print() v·ªõi prefix ƒë·∫∑c bi·ªát ƒë·ªÉ ch·∫Øc ch·∫Øn th·∫•y tr√™n console khi debug l·ªói n√†y
    print(f"SIMPLIFIED_ON_MESSAGE: >>> Received message: '{message.content}' from {message.author.name}")

    if message.author.bot:
        print(f"SIMPLIFIED_ON_MESSAGE: Message from bot, ignoring.")
        return

    # Kh√¥ng x·ª≠ l√Ω tin nh·∫Øn ri√™ng trong phi√™n b·∫£n si√™u ƒë∆°n gi·∫£n n√†y n·ªØa ƒë·ªÉ t·∫≠p trung v√†o guild
    if not message.guild:
        print(f"SIMPLIFIED_ON_MESSAGE: DM message from {message.author.name}. Ignoring for this debug version.")
        # N·∫øu b·∫°n mu·ªën test c·∫£ DM, h√£y b·ªè comment d√≤ng d∆∞·ªõi v√† comment d√≤ng print tr√™n
        # print(f"SIMPLIFIED_ON_MESSAGE: DM message from {message.author.name}. Calling process_commands.")
        # await bot.process_commands(message)
        # print(f"SIMPLIFIED_ON_MESSAGE: Finished processing DM.")
        return

    content = message.content.strip()
    if not content:
        print(f"SIMPLIFIED_ON_MESSAGE: Empty content after strip, ignoring.")
        return

    # T·∫°m th·ªùi b·ªè qua to√†n b·ªô logic x·ª≠ l√Ω l·ªánh t·∫Øt (bare commands)
    # Ch·ªâ ki·ªÉm tra n·∫øu c√≥ prefix th√¨ x·ª≠ l√Ω

    if message.content.startswith(COMMAND_PREFIX):
        print(f"SIMPLIFIED_ON_MESSAGE: Message has prefix. WILL CALL bot.process_commands for: '{message.content}'")
        await bot.process_commands(message)
        print(f"SIMPLIFIED_ON_MESSAGE: FINISHED bot.process_commands for: '{message.content}'")
    else:
        # N·∫øu kh√¥ng c√≥ prefix, trong phi√™n b·∫£n debug n√†y, ch√∫ng ta s·∫Ω b·ªè qua ho√†n to√†n
        print(f"SIMPLIFIED_ON_MESSAGE: Message does not have prefix. Ignoring as command: '{message.content}'")


@bot.event
async def on_command_error(ctx: commands.Context, error):
    logger.debug(f"on_command_error triggered for command '{ctx.command.name if ctx.command else 'unknown'}' by {ctx.author.name}. Error: {type(error).__name__} - {error}")
    if isinstance(error, commands.CommandNotFound):
        return 
    elif isinstance(error, commands.MissingRequiredArgument):
        cmd_name = ctx.command.name if ctx.command else "l·ªánh n√†y"
        help_msg_for_cmd = f"G√µ `/menu l·ªánh {cmd_name}` ƒë·ªÉ xem chi ti·∫øt." if bot.get_command(cmd_name) else "" # Gi·∫£ s·ª≠ l·ªánh help l√† /menu
        await try_send(ctx, content=f"{ICON_WARNING} B·∫°n thi·∫øu tham s·ªë `{error.param.name}` cho l·ªánh `{cmd_name}`. {help_msg_for_cmd}")
    elif isinstance(error, commands.BadArgument):
        await try_send(ctx, content=f"{ICON_ERROR} ƒê·ªëi s·ªë b·∫°n cung c·∫•p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i. L·ªói chi ti·∫øt: {error}")
    elif isinstance(error, commands.CommandOnCooldown):
        await try_send(ctx, content=f"{ICON_LOADING} L·ªánh `{ctx.command.name}` ƒëang trong th·ªùi gian ch·ªù. B·∫°n c·∫ßn ƒë·ª£i **{error.retry_after:.1f} gi√¢y** n·ªØa.")
    elif isinstance(error, commands.MissingPermissions):
        perms_list = ", ".join([f"`{perm.replace('_', ' ').title()}`" for perm in error.missing_permissions])
        await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ d√πng l·ªánh n√†y. Thi·∫øu quy·ªÅn: {perms_list}.")
    elif isinstance(error, commands.NotOwner):
        await try_send(ctx, content=f"{ICON_ERROR} L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu c·ªßa Bot.")
    elif isinstance(error, commands.CheckFailure):
        logger.warning(f"CheckFailure cho l·ªánh '{ctx.command.name if ctx.command else 'unknown'}' b·ªüi user {ctx.author.id}: {error}")
        await try_send(ctx, content=f"{ICON_ERROR} B·∫°n kh√¥ng ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
    else:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong l·ªánh '{ctx.command.name if ctx.command else 'unknown'}' b·ªüi user {ctx.author.id}:", exc_info=True)
        await try_send(ctx, content=f"{ICON_ERROR} ·ªêi! ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau. üòµ‚Äçüí´")

# --- H√†m T·∫£i Cogs (PHI√äN B·∫¢N C·∫¨P NH·∫¨T ƒê·ªÇ H·ªñ TR·ª¢ TH∆Ø M·ª§C CON) ---
def load_all_cogs():
    # ... (H√†m load_all_cogs gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n ƒë√£ c√≥ logger v√† h·ªó tr·ª£ th∆∞ m·ª•c con) ...
    logger.info(f"--------------------------------------------------")
    logger.info(f"ƒêang t·∫£i c√°c Cogs...")
    loaded_cogs_count = 0
    cogs_main_directory = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'cogs')
    for root, dirs, files in os.walk(cogs_main_directory):
        dirs[:] = [d for d in dirs if d != '__pycache__']
        for filename in files:
            if filename.endswith('.py') and not filename.startswith('_'):
                module_name_only = filename[:-3]
                relative_path_to_cog_folder = os.path.relpath(root, cogs_main_directory)
                extension_path = ""
                if relative_path_to_cog_folder == ".":
                    extension_path = f"cogs.{module_name_only}"
                else:
                    python_module_subpath = relative_path_to_cog_folder.replace(os.sep, '.')
                    extension_path = f"cogs.{python_module_subpath}.{module_name_only}"
                try:
                    bot.load_extension(extension_path)
                    logger.info(f"  [+] ƒê√£ t·∫£i th√†nh c√¥ng Cog: {extension_path}")
                    loaded_cogs_count += 1
                except commands.ExtensionAlreadyLoaded:
                    logger.debug(f"  [~] Cog ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª´ tr∆∞·ªõc: {extension_path}")
                except commands.NoEntryPointError:
                    logger.error(f"  [!] L·ªñI NoEntryPointError khi t·∫£i {extension_path}: File cog thi·∫øu h√†m setup(bot).")
                except Exception as e:
                    logger.error(f"  [!] L·ªñI khi t·∫£i Cog {extension_path}: Lo·∫°i l·ªói: {type(e).__name__} - {e}", exc_info=True) 
    logger.info(f"--- Ho√†n t·∫•t! ƒê√£ t·∫£i {loaded_cogs_count} Cogs. ---")
    logger.info(f"--------------------------------------------------")
