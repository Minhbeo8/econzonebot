# bot/core/bot.py
import nextcord
from nextcord.ext import commands
import os # Th∆∞ vi·ªán os ƒë·ªÉ l√†m vi·ªác v·ªõi h·ªá th·ªëng file (li·ªát k√™ file trong th∆∞ m·ª•c cogs)

# Import c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt t·ª´ package 'core'
from .config import COMMAND_PREFIX, BARE_COMMAND_MAP # L·∫•y prefix v√† b·∫£n ƒë·ªì l·ªánh t·∫Øt
from .database import get_guild_config # ƒê·ªÉ x·ª≠ l√Ω l·ªánh t·∫Øt v√† mute k√™nh
from .utils import try_send # ƒê·ªÉ g·ª≠i tin nh·∫Øn trong on_command_error

# --- Kh·ªüi t·∫°o Bot ---
# X√°c ƒë·ªãnh c√°c quy·ªÅn (Intents) m√† bot c·∫ßn.
# message_content l√† quy·ªÅn quan tr·ªçng ƒë·ªÉ bot c√≥ th·ªÉ ƒë·ªçc n·ªôi dung tin nh·∫Øn.
# members c≈©ng c·∫ßn thi·∫øt n·∫øu b·∫°n mu·ªën truy c·∫≠p th√¥ng tin th√†nh vi√™n (v√≠ d·ª• khi h·ªç tham gia server).
intents = nextcord.Intents.default()
intents.message_content = True # B·∫ÆT BU·ªòC ph·∫£i b·∫≠t trong Discord Developer Portal
intents.members = True       # B·∫ÆT BU·ªòC ph·∫£i b·∫≠t trong Discord Developer Portal n·∫øu d√πng

# Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng bot v·ªõi prefix v√† intents ƒë√£ ƒë·ªãnh nghƒ©a
bot = commands.Bot(command_prefix=COMMAND_PREFIX, intents=intents)

# --- C√°c S·ª± Ki·ªán (Events) c·ªßa Bot ---

@bot.event
async def on_ready():
    """
    S·ª± ki·ªán n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t khi bot ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Discord
    v√† s·∫µn s√†ng nh·∫≠n l·ªánh.
    """
    print(f'--------------------------------------------------')
    print(f'Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n: {bot.user.name} (ID: {bot.user.id})')
    print(f'Prefix l·ªánh: {COMMAND_PREFIX}')
    print(f'Nextcord Version: {nextcord.__version__}')
    print(f'Bot ƒë√£ s·∫µn s√†ng v√† ƒëang ch·ªù l·ªánh!')
    print(f'ƒê·ªÉ xem tr·ª£ gi√∫p, h√£y g√µ /help tr√™n Discord (n·∫øu cog Misc ƒë√£ ƒë∆∞·ª£c t·∫£i).')
    print(f'--------------------------------------------------')
    # B·∫°n c√≥ th·ªÉ ƒë·∫∑t tr·∫°ng th√°i cho bot ·ªü ƒë√¢y, v√≠ d·ª•:
    # await bot.change_presence(activity=nextcord.Game(name=f"{COMMAND_PREFIX}help ho·∫∑c /help"))


@bot.event
async def on_message(message: nextcord.Message):
    """
    S·ª± ki·ªán n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t m·ªói khi c√≥ m·ªôt tin nh·∫Øn m·ªõi ƒë∆∞·ª£c g·ª≠i
    trong b·∫•t k·ª≥ k√™nh n√†o m√† bot c√≥ th·ªÉ th·∫•y.
    """
    # B·ªè qua tin nh·∫Øn t·ª´ ch√≠nh bot ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
    if message.author.bot:
        return

    # N·∫øu tin nh·∫Øn kh√¥ng ph·∫£i t·ª´ m·ªôt server (v√≠ d·ª•: tin nh·∫Øn ri√™ng),
    # ch·ªâ x·ª≠ l√Ω l·ªánh b√¨nh th∆∞·ªùng v√† kh√¥ng √°p d·ª•ng logic l·ªánh t·∫Øt.
    if not message.guild:
        await bot.process_commands(message) # X·ª≠ l√Ω l·ªánh c√≥ prefix
        return

    # L·∫•y n·ªôi dung tin nh·∫Øn v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
    content = message.content.strip()
    if not content: # B·ªè qua n·∫øu tin nh·∫Øn r·ªóng sau khi strip
        return

    # X·ª≠ l√Ω l·ªánh t·∫Øt (kh√¥ng c·∫ßn prefix)
    # L·∫•y c·∫•u h√¨nh c·ªßa server t·ª´ database
    guild_config = get_guild_config(message.guild.id)
    active_bare_channels = guild_config.get("bare_command_active_channels", []) # L·∫•y danh s√°ch k√™nh ƒë∆∞·ª£c b·∫≠t l·ªánh t·∫Øt

    # Ki·ªÉm tra xem k√™nh hi·ªán t·∫°i c√≥ n·∫±m trong danh s√°ch active_bare_channels kh√¥ng
    # v√† tin nh·∫Øn c√≥ b·∫Øt ƒë·∫ßu b·∫±ng prefix kh√¥ng (n·∫øu c√≥ prefix th√¨ ƒë√≥ l√† l·ªánh th∆∞·ªùng)
    if message.channel.id in active_bare_channels and not content.startswith(COMMAND_PREFIX):
        parts = content.split(maxsplit=1) # T√°ch l·ªánh v√† c√°c ƒë·ªëi s·ªë (n·∫øu c√≥)
        command_candidate = parts[0].lower() # L·∫•y ph·∫ßn l·ªánh v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng

        if command_candidate in BARE_COMMAND_MAP: # Ki·ªÉm tra xem c√≥ trong b·∫£n ƒë·ªì l·ªánh t·∫Øt kh√¥ng
            actual_command_name = BARE_COMMAND_MAP[command_candidate] # L·∫•y t√™n l·ªánh g·ªëc
            args_for_bare_command = parts[1] if len(parts) > 1 else "" # L·∫•y ph·∫ßn ƒë·ªëi s·ªë
            
            # T·∫°o l·∫°i n·ªôi dung tin nh·∫Øn v·ªõi prefix v√† t√™n l·ªánh g·ªëc
            message.content = f"{COMMAND_PREFIX}{actual_command_name} {args_for_bare_command}".strip()
            # print(f"Bare command: '{content}' -> '{message.content}' in G:{message.guild.id} C:{message.channel.id}")
    
    # Sau khi ƒë√£ x·ª≠ l√Ω (ho·∫∑c kh√¥ng) l·ªánh t·∫Øt, cho bot x·ª≠ l√Ω c√°c l·ªánh (c√≥ prefix)
    await bot.process_commands(message)


@bot.event
async def on_command_error(ctx: commands.Context, error):
    """
    S·ª± ki·ªán n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t khi c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh th·ª±c thi m·ªôt l·ªánh.
    """
    # B·ªè qua l·ªói CommandNotFound ƒë·ªÉ tr√°nh spam console ho·∫∑c chat
    if isinstance(error, commands.CommandNotFound):
        # await try_send(ctx, content=f"L·ªánh `{ctx.invoked_with}` kh√¥ng t·ªìn t·∫°i. D√πng `/help` ƒë·ªÉ xem danh s√°ch l·ªánh.", ephemeral=True, delete_after=10)
        return # Kh√¥ng l√†m g√¨ c·∫£

    # L·ªói thi·∫øu tham s·ªë b·∫Øt bu·ªôc
    elif isinstance(error, commands.MissingRequiredArgument):
        cmd_name = ctx.command.name if ctx.command else "l·ªánh n√†y"
        # C·ªë g·∫Øng cung c·∫•p h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh n·∫øu c√≥ th·ªÉ
        help_msg_for_cmd = f"G√µ `/help t√™n_l·ªánh {cmd_name}` ƒë·ªÉ xem chi ti·∫øt." if bot.get_command(cmd_name) else ""
        await try_send(ctx, content=f"B·∫°n thi·∫øu tham s·ªë `{error.param.name}` cho l·ªánh `{cmd_name}`. {help_msg_for_cmd}")

    # L·ªói sai ki·ªÉu d·ªØ li·ªáu c·ªßa tham s·ªë
    elif isinstance(error, commands.BadArgument):
        await try_send(ctx, content=f"ƒê·ªëi s·ªë b·∫°n cung c·∫•p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i. L·ªói: {error}")

    # L·ªói l·ªánh ƒëang trong th·ªùi gian ch·ªù (cooldown)
    elif isinstance(error, commands.CommandOnCooldown):
        await try_send(ctx, content=f"L·ªánh `{ctx.command.name}` ƒëang trong th·ªùi gian ch·ªù. B·∫°n c·∫ßn ƒë·ª£i **{error.retry_after:.1f} gi√¢y** n·ªØa.")

    # L·ªói thi·∫øu quy·ªÅn h·∫°n (chung)
    elif isinstance(error, commands.MissingPermissions):
        # L·ªói n√†y s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω c·ª• th·ªÉ h∆°n ·ªü error handler c·ªßa t·ª´ng l·ªánh n·∫øu c√≥
        # (v√≠ d·ª• @auto_toggle_bare_commands.error)
        # N·∫øu kh√¥ng c√≥ error handler ri√™ng, n√≥ s·∫Ω r∆°i v√†o ƒë√¢y.
        perms_list = ", ".join([f"`{perm.replace('_', ' ').title()}`" for perm in error.missing_permissions])
        await try_send(ctx, content=f"B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ d√πng l·ªánh n√†y. Thi·∫øu quy·ªÅn: {perms_list}.")

    # L·ªói ch·ªâ ch·ªß s·ªü h·ªØu bot m·ªõi ƒë∆∞·ª£c d√πng
    elif isinstance(error, commands.NotOwner):
        await try_send(ctx, content="L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu c·ªßa Bot.")

    # L·ªói t·ª´ c√°c h√†m check (v√≠ d·ª•: is_guild_owner_check, ho·∫∑c c√°c check permission kh√°c)
    # C√°c h√†m error handler ri√™ng c·ªßa l·ªánh (v√≠ d·ª• @add_money.error) n√™n x·ª≠ l√Ω CheckFailure c·ªßa ch√≠nh n√≥.
    # ƒê√¢y l√† fallback n·∫øu kh√¥ng c√≥ error handler ri√™ng.
    elif isinstance(error, commands.CheckFailure):
        # Th√¥ng th∆∞·ªùng, c√°c h√†m check s·∫Ω c√≥ th√¥ng b√°o l·ªói ri√™ng trong error handler c·ªßa l·ªánh.
        # V√≠ d·ª•: L·ªánh addmoney c√≥ @add_money.error s·∫Ω x·ª≠ l√Ω commands.CheckFailure t·ª´ is_guild_owner_check.
        # N·∫øu l·ªói CheckFailure kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü c·∫•p l·ªánh, n√≥ s·∫Ω ƒë·∫øn ƒë√¢y.
        print(f"L·ªói CheckFailure kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω cho l·ªánh '{ctx.command.name if ctx.command else 'unknown'}': {error}")
        await try_send(ctx, content="B·∫°n kh√¥ng ƒë√°p ·ª©ng ƒëi·ªÅu ki·ªán ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.")
    
    # C√°c l·ªói kh√¥ng mong mu·ªën kh√°c
    else:
        # In l·ªói ra console ƒë·ªÉ debug
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong l·ªánh '{ctx.command.name if ctx.command else 'unknown'}':")
        print(f"Lo·∫°i l·ªói: {type(error).__name__}")
        print(f"Th√¥ng ƒëi·ªáp l·ªói: {error}")
        # G·ª≠i th√¥ng b√°o l·ªói chung cho ng∆∞·ªùi d√πng
        await try_send(ctx, content="·ªêi! ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau. üòµ‚Äçüí´")


# --- H√†m T·∫£i Cogs ---
def load_all_cogs():
    """
    T·∫£i t·∫•t c·∫£ c√°c file .py trong th∆∞ m·ª•c 'cogs' d∆∞·ªõi d·∫°ng extension (cog) cho bot.
    Th∆∞ m·ª•c 'cogs' ph·∫£i n·∫±m c√πng c·∫•p v·ªõi th∆∞ m·ª•c 'core'.
    """
    print(f'--------------------------------------------------')
    print(f'ƒêang t·∫£i c√°c Cogs...')
    loaded_cogs_count = 0
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c cogs, gi·∫£ s·ª≠ 'core' v√† 'cogs' n·∫±m trong c√πng th∆∞ m·ª•c 'bot'
    # v√† file n√†y (bot.py) n·∫±m trong 'core'
    cogs_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'cogs') # ƒêi l√™n 1 c·∫•p t·ª´ 'core', r·ªìi v√†o 'cogs'

    for filename in os.listdir(cogs_dir):
        # Ch·ªâ load c√°c file Python, kh√¥ng ph·∫£i th∆∞ m·ª•c con hay file ·∫©n
        if filename.endswith('.py') and not filename.startswith('_'):
            cog_name = filename[:-3] # B·ªè ƒëu√¥i '.py'
            try:
                # ƒê∆∞·ªùng d·∫´n ƒë·ªÉ load extension l√† 't√™n_th∆∞_m·ª•c_cogs.t√™n_file_cog'
                # V√≠ d·ª•: n·∫øu th∆∞ m·ª•c cogs t√™n l√† 'cogs', file l√† 'economy.py' -> 'cogs.economy'
                # C·∫ßn ƒë·∫£m b·∫£o th∆∞ m·ª•c 'cogs' n·∫±m trong PYTHONPATH ho·∫∑c c√πng c·∫•p v·ªõi file ch·∫°y ch√≠nh (main.py)
                # v√† main.py ch·∫°y t·ª´ th∆∞ m·ª•c cha c·ªßa 'bot'
                bot.load_extension(f'cogs.{cog_name}') # Quan tr·ªçng: 'cogs' l√† t√™n th∆∞ m·ª•c
                print(f'  [+] ƒê√£ t·∫£i th√†nh c√¥ng Cog: {cog_name}')
                loaded_cogs_count += 1
            except Exception as e:
                print(f'  [!] L·ªñI khi t·∫£i Cog {cog_name}:')
                print(f'      Lo·∫°i l·ªói: {type(e).__name__}')
                print(f'      Th√¥ng ƒëi·ªáp: {e}')
    print(f'--- Ho√†n t·∫•t! ƒê√£ t·∫£i {loaded_cogs_count} Cogs. ---')
    print(f'--------------------------------------------------')

# L∆∞u √Ω: h√†m load_all_cogs() s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ file main.py tr∆∞·ªõc khi bot.run()
