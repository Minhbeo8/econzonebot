# bot/core/logger.py
import logging
import logging.handlers
import os
from datetime import datetime
import asyncio
import aiohttp
import traceback # C·∫ßn thi·∫øt ƒë·ªÉ format traceback cho l·ªói

LOG_DIRECTORY = "logs"
GENERAL_LOG_FILENAME_FORMAT = "bot_general_{timestamp}.log"
ACTION_LOG_FILENAME_FORMAT = "player_actions_{timestamp}.log"

# --- Filter t√πy ch·ªânh cho Action Log File ---
class CogInfoFilter(logging.Filter):
    def __init__(self, prefix='cogs.', level=logging.INFO):
        super().__init__()
        self.prefix = prefix
        self.level = level
    def filter(self, record):
        return record.name.startswith(self.prefix) and record.levelno == self.level

# --- Discord Webhook Handler ---
class DiscordWebhookHandler(logging.Handler):
    def __init__(self, webhook_url: str):
        super().__init__()
        self.webhook_url = webhook_url
        self.loop = None
        try:
            self.loop = asyncio.get_running_loop()
        except RuntimeError: 
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)

    async def _send_payload_async(self, payload: dict):
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(self.webhook_url, json=payload) as response:
                    if response.status >= 400:
                        print(f"[ERROR][DiscordWebhookHandler] L·ªói khi g·ª≠i webhook: {response.status} - {await response.text()}")
            except aiohttp.ClientError as e:
                print(f"[ERROR][DiscordWebhookHandler] L·ªói k·∫øt n·ªëi khi g·ª≠i webhook: {e}")
            except Exception as e:
                print(f"[ERROR][DiscordWebhookHandler] L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i webhook: {e}")

    def emit(self, record: logging.LogRecord):
        payload = None
        log_time = datetime.fromtimestamp(record.created)

        if record.levelno >= logging.ERROR:
            message_content = record.getMessage() 
            description_parts = [
                f"**Logger:** `{record.name}`",
                f"**Th√¥ng ƒëi·ªáp:**\n```\n{message_content[:1000]}\n```"
            ]
            if record.exc_info:
                tb = "".join(traceback.format_exception(*record.exc_info))
                if len(tb) > 1000: tb = tb[:990] + "\n... (traceback b·ªã c·∫Øt b·ªõt)"
                description_parts.append(f"**Traceback:**\n```python\n{tb}\n```")
            embed_color = 0xff0000 if record.levelno == logging.ERROR else 0xcc0000
            embed = {
                "title": f"üö® L·ªói Bot: {record.levelname}",
                "description": "\n".join(description_parts),
                "color": embed_color,
                "timestamp": log_time.isoformat()
            }
            payload = {"embeds": [embed]}
        elif record.levelno == logging.INFO and record.name.startswith('cogs.'):
            formatted_time = log_time.strftime("%d/%m/%y (%H:%M:%S)")
            action_message = record.getMessage()
            final_log_string = f"[{formatted_time}] {action_message}"
            if len(final_log_string) > 1990:
                final_log_string = final_log_string[:1987] + "..."
            payload = {"content": final_log_string}
        
        if payload:
            try:
                if self.loop and self.loop.is_running():
                    asyncio.ensure_future(self._send_payload_async(payload), loop=self.loop)
                else:
                    asyncio.run(self._send_payload_async(payload)) 
            except Exception as e:
                self.handleError(record) 
                print(f"[CRITICAL][DiscordWebhookHandler] L·ªói nghi√™m tr·ªçng khi g·ª≠i log qua webhook: {e}")
                traceback.print_exc()

# --- H√†m setup_logging (C·∫¨P NH·∫¨T v·ªõi d√≤ng print debug) ---
def setup_logging():
    if not os.path.exists(LOG_DIRECTORY):
        try:
            os.makedirs(LOG_DIRECTORY)
        except OSError as e:
            print(f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c logs: {e}")
            return 

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    
    # === D√íNG PRINT DEBUG CHO WEBHOOK URL ===
    webhook_url_for_debug = os.getenv("DISCORD_WEBHOOK_URL")
    print(f"\n[DEBUG FROM LOGGER.PY] Webhook URL from env at setup_logging start: '{webhook_url_for_debug}'\n") 
    # =======================================

    general_log_filename = os.path.join(LOG_DIRECTORY, GENERAL_LOG_FILENAME_FORMAT.format(timestamp=timestamp))
    action_log_filename = os.path.join(LOG_DIRECTORY, ACTION_LOG_FILENAME_FORMAT.format(timestamp=timestamp))

    file_log_formatter = logging.Formatter(
        '%(asctime)s [%(levelname)-8s] [%(name)-35s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    console_formatter = logging.Formatter(
        '[%(levelname)-8s] [%(name)-25s] %(message)s'
    )

    root_logger = logging.getLogger() 
    root_logger.setLevel(logging.DEBUG)
    if root_logger.hasHandlers():
        root_logger.handlers.clear()

    # General File Handler
    try:
        general_file_handler = logging.handlers.RotatingFileHandler(
            filename=general_log_filename, encoding='utf-8',
            maxBytes=5*1024*1024, backupCount=5
        )
        general_file_handler.setFormatter(file_log_formatter)
        general_file_handler.setLevel(logging.DEBUG)
        root_logger.addHandler(general_file_handler)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p general_file_handler: {e}")

    # Action Log File Handler
    try:
        action_file_handler = logging.handlers.RotatingFileHandler(
            filename=action_log_filename, encoding='utf-8',
            maxBytes=2*1024*1024, backupCount=3
        )
        action_file_handler.setFormatter(file_log_formatter)
        action_file_handler.setLevel(logging.INFO)
        action_file_handler.addFilter(CogInfoFilter(prefix='cogs.', level=logging.INFO))
        root_logger.addHandler(action_file_handler)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p action_file_handler: {e}")

    # Console Handler
    try:
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(console_formatter)
        console_handler.setLevel(logging.INFO) 
        root_logger.addHandler(console_handler)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p console_handler: {e}")

    # Webhook Handler (s·ª≠ d·ª•ng webhook_url_for_debug ƒë√£ l·∫•y ·ªü tr√™n)
    if webhook_url_for_debug: # Ki·ªÉm tra l·∫°i bi·∫øn ƒë√£ l·∫•y
        try:
            webhook_handler = DiscordWebhookHandler(webhook_url_for_debug)
            webhook_handler.setLevel(logging.INFO) 
            root_logger.addHandler(webhook_handler)
            logging.getLogger("BotSetup").info("Discord Webhook logging handler ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p cho INFO (t·ª´ cogs) v√† ERROR/CRITICAL.")
        except Exception as e:
            logging.getLogger("BotSetup").error(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p DiscordWebhookHandler: {e}", exc_info=True)
    else:
        logging.getLogger("BotSetup").warning("DISCORD_WEBHOOK_URL kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong .env (ki·ªÉm tra t·ª´ logger.py). Logging qua Webhook b·ªã v√¥ hi·ªáu h√≥a.")
    
    logging.getLogger("BotSetup").info("H·ªá th·ªëng Logging ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p (ho·∫∑c c·ªë g·∫Øng thi·∫øt l·∫≠p).")
    logging.getLogger("BotSetup").debug(f"General logs s·∫Ω ƒë∆∞·ª£c ghi v√†o: {general_log_filename}")
    logging.getLogger("BotSetup").debug(f"Player action logs (INFO t·ª´ cogs) s·∫Ω ƒë∆∞·ª£c ghi v√†o: {action_log_filename}")

