# bot/core/logger.py
import logging
import logging.handlers
import os
from datetime import datetime
import asyncio
import aiohttp
import traceback # C·∫ßn thi·∫øt ƒë·ªÉ format traceback cho l·ªói

LOG_DIRECTORY = "logs"
GENERAL_LOG_FILENAME_FORMAT = "bot_general_{timestamp}.log"
ACTION_LOG_FILENAME_FORMAT = "player_actions_{timestamp}.log"

# --- Filter t√πy ch·ªânh cho Action Log File (Gi·ªØ nguy√™n) ---
class CogInfoFilter(logging.Filter):
    def __init__(self, prefix='cogs.', level=logging.INFO):
        super().__init__()
        self.prefix = prefix
        self.level = level
    def filter(self, record):
        return record.name.startswith(self.prefix) and record.levelno == self.level

# --- Discord Webhook Handler (ƒê√É S·ª¨A L·ªñI ASYNCIO.RUN) ---
class DiscordWebhookHandler(logging.Handler):
    def __init__(self, webhook_url: str):
        super().__init__()
        self.webhook_url = webhook_url
        self.loop = None # S·∫Ω ƒë∆∞·ª£c l·∫•y khi c·∫ßn thi·∫øt

    async def _send_payload_async(self, payload: dict):
        """H√†m ri√™ng ƒë·ªÉ g·ª≠i payload m·ªôt c√°ch kh√¥ng ƒë·ªìng b·ªô."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.webhook_url, json=payload) as response:
                    if response.status >= 400:
                        # Ghi l·ªói n√†y v√†o console/file log ch√≠nh qua print ƒë·ªÉ kh√¥ng t·∫°o v√≤ng l·∫∑p logging
                        print(f"[CRITICAL][WebhookSendError] L·ªói HTTP {response.status} khi g·ª≠i webhook: {await response.text()}")
                    # else:
                        # print(f"[DEBUG][WebhookSend] Webhook sent successfully, status: {response.status}") # Debug n·∫øu c·∫ßn
        except aiohttp.ClientError as e:
            print(f"[CRITICAL][WebhookSendError] L·ªói k·∫øt n·ªëi ClientError khi g·ª≠i webhook: {e}")
        except Exception as e:
            print(f"[CRITICAL][WebhookSendError] L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i webhook: {e}")
            traceback.print_exc(file=open(os.path.join(LOG_DIRECTORY, "webhook_send_errors.log"), "a", encoding="utf-8")) # Ghi traceback v√†o file ri√™ng

    def emit(self, record: logging.LogRecord):
        payload = None 
        log_time = datetime.fromtimestamp(record.created)

        try:
            if record.levelno >= logging.ERROR:
                message_content = record.getMessage() 
                description_parts = [
                    f"**Logger:** `{record.name}`",
                    f"**Th√¥ng ƒëi·ªáp:**\n```\n{message_content[:1000]}\n```" # Gi·ªõi h·∫°n message
                ]
                if record.exc_info:
                    tb = "".join(traceback.format_exception(*record.exc_info))
                    if len(tb) > 1000: tb = tb[:990] + "\n... (traceback b·ªã c·∫Øt b·ªõt)"
                    description_parts.append(f"**Traceback:**\n```python\n{tb}\n```")
                embed_color = 0xff0000 if record.levelno == logging.ERROR else 0xcc0000
                embed = {
                    "title": f"üö® L·ªói Bot: {record.levelname}",
                    "description": "\n".join(description_parts),
                    "color": embed_color,
                    "timestamp": log_time.isoformat()
                }
                payload = {"embeds": [embed]}
            elif record.levelno == logging.INFO and record.name.startswith('cogs.'):
                formatted_time = log_time.strftime("%d/%m/%y (%H:%M:%S)")
                action_message = record.getMessage()
                final_log_string = f"[{formatted_time}] {action_message}"
                if len(final_log_string) > 1990:
                    final_log_string = final_log_string[:1987] + "..."
                payload = {"content": final_log_string}
            
            if payload:
                if self.loop is None: # L·∫•y loop l·∫ßn ƒë·∫ßu n·∫øu ch∆∞a c√≥
                    try:
                        self.loop = asyncio.get_running_loop()
                    except RuntimeError:
                        # print("[WARNING][DiscordWebhookHandler] Kh√¥ng t√¨m th·∫•y event loop ƒëang ch·∫°y khi emit l·∫ßn ƒë·∫ßu.")
                        # N·∫øu kh√¥ng c√≥ loop, kh√¥ng th·ªÉ g·ª≠i async.
                        # Trong ng·ªØ c·∫£nh bot Nextcord, ƒëi·ªÅu n√†y r·∫•t hi·∫øm khi x·∫£y ra khi emit ƒë∆∞·ª£c g·ªçi.
                        # H√†m handleError s·∫Ω ƒë∆∞·ª£c g·ªçi n·∫øu c√≥ l·ªói ·ªü ƒë√¢y.
                        self.handleError(record) 
                        return

                if self.loop.is_running():
                    # S·ª≠ d·ª•ng create_task ƒë·ªÉ l√™n l·ªãch coroutine ch·∫°y tr√™n event loop
                    self.loop.create_task(self._send_payload_async(payload))
                else:
                    # print("[WARNING][DiscordWebhookHandler] Event loop kh√¥ng ·ªü tr·∫°ng th√°i running khi c·ªë g·∫Øng g·ª≠i webhook.")
                    self.handleError(record) # Log l·ªói n·∫øu loop kh√¥ng ch·∫°y
        except Exception:
            self.handleError(record) # B·∫Øt t·∫•t c·∫£ c√°c l·ªói kh√°c trong qu√° tr√¨nh chu·∫©n b·ªã payload

# --- H√†m setup_logging (Gi·ªØ nguy√™n logic thi·∫øt l·∫≠p c√°c handler kh√°c) ---
def setup_logging():
    if not os.path.exists(LOG_DIRECTORY):
        try:
            os.makedirs(LOG_DIRECTORY)
        except OSError as e:
            # D√πng print ·ªü ƒë√¢y v√¨ logger c√≥ th·ªÉ ch∆∞a s·∫µn s√†ng ho√†n to√†n
            print(f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c logs: {e}") 
            return 

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    
    # D√≤ng print debug n√†y b·∫°n c√≥ th·ªÉ gi·ªØ l·∫°i ho·∫∑c x√≥a ƒëi sau khi ƒë√£ x√°c nh·∫≠n URL webhook ƒë∆∞·ª£c ƒë·ªçc ƒë√∫ng
    webhook_url_for_debug = os.getenv("DISCORD_WEBHOOK_URL")
    print(f"\n[DEBUG FROM LOGGER.PY] Webhook URL from env at setup_logging start: '{webhook_url_for_debug}'\n") 

    general_log_filename = os.path.join(LOG_DIRECTORY, GENERAL_LOG_FILENAME_FORMAT.format(timestamp=timestamp))
    action_log_filename = os.path.join(LOG_DIRECTORY, ACTION_LOG_FILENAME_FORMAT.format(timestamp=timestamp))

    file_log_formatter = logging.Formatter(
        '%(asctime)s [%(levelname)-8s] [%(name)-35s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    console_formatter = logging.Formatter(
        '[%(levelname)-8s] [%(name)-25s] %(message)s'
    )

    root_logger = logging.getLogger() 
    root_logger.setLevel(logging.DEBUG)
    if root_logger.hasHandlers():
        root_logger.handlers.clear()

    # General File Handler
    try:
        general_file_handler = logging.handlers.RotatingFileHandler(
            filename=general_log_filename, encoding='utf-8',
            maxBytes=5*1024*1024, backupCount=5
        )
        general_file_handler.setFormatter(file_log_formatter)
        general_file_handler.setLevel(logging.DEBUG)
        root_logger.addHandler(general_file_handler)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p general_file_handler: {e}")

    # Action Log File Handler
    try:
        action_file_handler = logging.handlers.RotatingFileHandler(
            filename=action_log_filename, encoding='utf-8',
            maxBytes=2*1024*1024, backupCount=3
        )
        action_file_handler.setFormatter(file_log_formatter)
        action_file_handler.setLevel(logging.INFO)
        action_file_handler.addFilter(CogInfoFilter(prefix='cogs.', level=logging.INFO))
        root_logger.addHandler(action_file_handler)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p action_file_handler: {e}")

    # Console Handler
    try:
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(console_formatter)
        console_handler.setLevel(logging.INFO) 
        root_logger.addHandler(console_handler)
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p console_handler: {e}")

    # Webhook Handler
    webhook_url_from_env = os.getenv("DISCORD_WEBHOOK_URL") # L·∫•y l·∫°i URL, ho·∫∑c d√πng bi·∫øn ƒë√£ l·∫•y ·ªü tr√™n
    if webhook_url_from_env:
        try:
            webhook_handler = DiscordWebhookHandler(webhook_url_from_env)
            webhook_handler.setLevel(logging.INFO) 
            root_logger.addHandler(webhook_handler)
            logging.getLogger("BotSetup").info("Discord Webhook logging handler ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p cho INFO (t·ª´ cogs) v√† ERROR/CRITICAL.")
        except Exception as e:
            logging.getLogger("BotSetup").error(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p DiscordWebhookHandler: {e}", exc_info=True)
    else:
        logging.getLogger("BotSetup").warning("DISCORD_WEBHOOK_URL kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong .env (ki·ªÉm tra t·ª´ logger.py). Logging qua Webhook b·ªã v√¥ hi·ªáu h√≥a.")
    
    logging.getLogger("BotSetup").info("H·ªá th·ªëng Logging ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p (ho·∫∑c c·ªë g·∫Øng thi·∫øt l·∫≠p).")
    logging.getLogger("BotSetup").debug(f"General logs s·∫Ω ƒë∆∞·ª£c ghi v√†o: {general_log_filename}")
    logging.getLogger("BotSetup").debug(f"Player action logs (INFO t·ª´ cogs) s·∫Ω ƒë∆∞·ª£c ghi v√†o: {action_log_filename}")
