# bot/core/logger.py
import logging
import logging.handlers
import os
from datetime import datetime
import asyncio
import aiohttp
import traceback 

LOG_DIRECTORY = "logs"
GENERAL_LOG_FILENAME_FORMAT = "bot_general_{timestamp}.log"
ACTION_LOG_FILENAME_FORMAT = "player_actions_{timestamp}.log"

# --- Filter t√πy ch·ªânh cho Action Log File (Gi·ªØ nguy√™n) ---
class CogInfoFilter(logging.Filter):
    def __init__(self, prefix='cogs.', level=logging.INFO):
        super().__init__()
        self.prefix = prefix
        self.level = level
    def filter(self, record):
        return record.name.startswith(self.prefix) and record.levelno == self.level

# --- Discord Webhook Handler (Gi·ªØ nguy√™n ƒë·ªãnh nghƒ©a class) ---
class DiscordWebhookHandler(logging.Handler):
    def __init__(self, webhook_url: str, bot_event_loop=None):
        super().__init__()
        self.webhook_url = webhook_url
        self.bot_event_loop = bot_event_loop

    async def _send_payload_async(self, payload: dict):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.webhook_url, json=payload) as response:
                    if response.status >= 400:
                        print(f"[CRITICAL][WebhookSendError] L·ªói HTTP {response.status} khi g·ª≠i webhook: {await response.text()}")
        except aiohttp.ClientError as e:
            print(f"[CRITICAL][WebhookSendError] L·ªói k·∫øt n·ªëi ClientError khi g·ª≠i webhook: {e}")
        except Exception as e:
            print(f"[CRITICAL][WebhookSendError] L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i webhook: {e}")
            if not os.path.exists(LOG_DIRECTORY):
                try: os.makedirs(LOG_DIRECTORY)
                except: pass
            if os.path.exists(LOG_DIRECTORY):
                with open(os.path.join(LOG_DIRECTORY, "webhook_send_errors.log"), "a", encoding="utf-8") as f_err:
                    f_err.write(f"--- Webhook Send Error at {datetime.now()} ---\n")
                    traceback.print_exc(file=f_err)
                    f_err.write("\n")

    def emit(self, record: logging.LogRecord):
        payload = None 
        log_time = datetime.fromtimestamp(record.created)
        try: 
            if record.levelno >= logging.ERROR:
                message_content = record.getMessage() 
                description_parts = [
                    f"**Logger:** `{record.name}`",
                    f"**Th√¥ng ƒëi·ªáp:**\n```\n{message_content[:1000]}\n```"
                ]
                if record.exc_info:
                    tb = "".join(traceback.format_exception(*record.exc_info))
                    if len(tb) > 1000: tb = tb[:990] + "\n... (traceback b·ªã c·∫Øt b·ªõt)"
                    description_parts.append(f"**Traceback:**\n```python\n{tb}\n```")
                embed_color = 0xff0000 if record.levelno == logging.ERROR else 0xcc0000
                embed = {
                    "title": f"üö® L·ªói Bot: {record.levelname}",
                    "description": "\n".join(description_parts),
                    "color": embed_color,
                    "timestamp": log_time.isoformat()
                }
                payload = {"embeds": [embed]}
            elif record.levelno == logging.INFO and record.name.startswith('cogs.'):
                formatted_time = log_time.strftime("%d/%m/%y (%H:%M:%S)")
                action_message = record.getMessage()
                final_log_string = f"[{formatted_time}] {action_message}"
                if len(final_log_string) > 1990:
                    final_log_string = final_log_string[:1987] + "..."
                payload = {"content": final_log_string}
        except Exception as e_format:
            print(f"[ERROR][DiscordWebhookHandler] L·ªói khi ƒë·ªãnh d·∫°ng log record: {e_format}")
            self.handleError(record)
            return
        if payload:
            loop_to_use = self.bot_event_loop
            if loop_to_use is None: 
                try:
                    loop_to_use = asyncio.get_running_loop()
                except RuntimeError:
                    print("[WARNING][DiscordWebhookHandler] Kh√¥ng t√¨m th·∫•y event loop ƒëang ch·∫°y ƒë·ªÉ g·ª≠i webhook. Log c√≥ th·ªÉ b·ªã m·∫•t.")
                    return
            if loop_to_use and loop_to_use.is_running():
                try:
                    asyncio.run_coroutine_threadsafe(self._send_payload_async(payload), loop_to_use)
                except Exception as e_task:
                    print(f"[ERROR][DiscordWebhookHandler] L·ªói khi l√™n l·ªãch g·ª≠i webhook: {e_task}")
                    self.handleError(record)
            else:
                print("[WARNING][DiscordWebhookHandler] Event loop kh√¥ng ·ªü tr·∫°ng th√°i running ho·∫∑c kh√¥ng t·ªìn t·∫°i khi c·ªë g·∫Øng g·ª≠i webhook.")

# --- H√†m setup_logging (ƒê√É C·∫¨P NH·∫¨T ƒê·ªÇ T·∫†M V√î HI·ªÜU H√ìA WEBHOOK HANDLER) ---
def setup_logging(bot_event_loop=None): 
    if not os.path.exists(LOG_DIRECTORY):
        try:
            os.makedirs(LOG_DIRECTORY)
        except OSError as e:
            print(f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c logs: {e}") 
            return 

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    
    webhook_url_for_debug = os.getenv("DISCORD_WEBHOOK_URL")
    print(f"\n[DEBUG FROM LOGGER.PY] Webhook URL from env at setup_logging start: '{webhook_url_for_debug}'\n") 

    general_log_filename = os.path.join(LOG_DIRECTORY, GENERAL_LOG_FILENAME_FORMAT.format(timestamp=timestamp))
    action_log_filename = os.path.join(LOG_DIRECTORY, ACTION_LOG_FILENAME_FORMAT.format(timestamp=timestamp))

    file_log_formatter = logging.Formatter(
        '%(asctime)s [%(levelname)-8s] [%(name)-35s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    console_formatter = logging.Formatter(
        '[%(levelname)-8s] [%(name)-25s] %(message)s'
    )

    root_logger = logging.getLogger() 
    root_logger.setLevel(logging.DEBUG)
    if root_logger.hasHandlers():
        root_logger.handlers.clear()

    # General File Handler (Gi·ªØ nguy√™n)
    try: 
        general_file_handler = logging.handlers.RotatingFileHandler(
            filename=general_log_filename, encoding='utf-8',
            maxBytes=5*1024*1024, backupCount=5)
        general_file_handler.setFormatter(file_log_formatter)
        general_file_handler.setLevel(logging.DEBUG)
        root_logger.addHandler(general_file_handler)
    except Exception as e: print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p general_file_handler: {e}")
    
    # Action Log File Handler (Gi·ªØ nguy√™n)
    try: 
        action_file_handler = logging.handlers.RotatingFileHandler(
            filename=action_log_filename, encoding='utf-8',
            maxBytes=2*1024*1024, backupCount=3)
        action_file_handler.setFormatter(file_log_formatter)
        action_file_handler.setLevel(logging.INFO)
        action_file_handler.addFilter(CogInfoFilter(prefix='cogs.', level=logging.INFO))
        root_logger.addHandler(action_file_handler)
    except Exception as e: print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p action_file_handler: {e}")
    
    # Console Handler (Gi·ªØ nguy√™n)
    try: 
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(console_formatter)
        console_handler.setLevel(logging.INFO) 
        root_logger.addHandler(console_handler)
    except Exception as e: print(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p console_handler: {e}")

    # --- WEBHOOK HANDLER (T·∫†M TH·ªúI V√î HI·ªÜU H√ìA ƒê·ªÇ DEBUG) ---
    if webhook_url_for_debug:
        try:
            webhook_handler = DiscordWebhookHandler(webhook_url_for_debug, bot_event_loop=bot_event_loop) 
            webhook_handler.setLevel(logging.INFO) 
            
            # D√íNG N√ÄY ƒê∆Ø·ª¢C COMMENT OUT ƒê·ªÇ V√î HI·ªÜU H√ìA WEBHOOK HANDLER
            # root_logger.addHandler(webhook_handler) 
            
            # THAY B·∫∞NG TH√îNG B√ÅO N√ÄY
            logging.getLogger("BotSetup").warning("Discord Webhook logging handler ƒêANG B·ªä T·∫†M TH·ªúI V√î HI·ªÜU H√ìA cho m·ª•c ƒë√≠ch debug l·ªói g·ª≠i 2 tin nh·∫Øn.")
            # logging.getLogger("BotSetup").info("Discord Webhook logging handler ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p.") # Comment d√≤ng n√†y
        except Exception as e:
            logging.getLogger("BotSetup").error(f"L·ªói khi kh·ªüi t·∫°o DiscordWebhookHandler (d√π ƒëang b·ªã v√¥ hi·ªáu h√≥a): {e}", exc_info=True)
    else:
        logging.getLogger("BotSetup").warning("DISCORD_WEBHOOK_URL kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong .env. Logging qua Webhook b·ªã v√¥ hi·ªáu h√≥a.")
    # ---------------------------------------------------------
    
    logging.getLogger("BotSetup").info("H·ªá th·ªëng Logging ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p (ho·∫∑c c·ªë g·∫Øng thi·∫øt l·∫≠p).")
    logging.getLogger("BotSetup").debug(f"General logs s·∫Ω ƒë∆∞·ª£c ghi v√†o: {general_log_filename}")
    logging.getLogger("BotSetup").debug(f"Player action logs (INFO t·ª´ cogs) s·∫Ω ƒë∆∞·ª£c ghi v√†o: {action_log_filename}")

