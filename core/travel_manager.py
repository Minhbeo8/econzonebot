# bot/core/travel_manager.py
import nextcord
import logging
from typing import List, Dict, Any

from .database import (
    get_or_create_global_user_profile,
    get_or_create_user_local_data
)
# [S·ª¨A] X√≥a 'from .utils import try_send' ·ªü ƒë√¢y ƒë·ªÉ ph√° v·ª° tham chi·∫øu v√≤ng
from .icons import ICON_INFO, ICON_ECOVISA, ICON_BACKPACK

logger = logging.getLogger(__name__)

# --- View cho vi·ªác ch·ªçn v·∫≠t ph·∫©m t·ª´ Balo ---
class BackpackItemSelectView(nextcord.ui.View):
    def __init__(self, ctx, travel_manager_instance, items_to_choose_from: List[Dict[str, Any]], capacity: int):
        super().__init__(timeout=300)
        self.ctx = ctx
        self.travel_manager = travel_manager_instance
        self.interaction_user = ctx.author
        self.message = None
        self.chosen_items = []

        options = [
            nextcord.SelectOption(label=item.get("item_id"), description=f"V·∫≠t ph·∫©m trong t√∫i ƒë·ªì c≈© c·ªßa b·∫°n.")
            for item in items_to_choose_from
        ]
        
        item_select = nextcord.ui.Select(
            placeholder="Ch·ªçn v·∫≠t ph·∫©m ƒë·ªÉ mang theo...",
            min_values=0,
            max_values=min(capacity, len(options)),
            options=options
        )
        item_select.callback = self.on_select_items
        self.add_item(item_select)

    async def on_select_items(self, interaction: nextcord.Interaction):
        await interaction.response.defer()
        self.chosen_items = interaction.data.get("values", [])
        self.stop()

    async def interaction_check(self, interaction: nextcord.Interaction) -> bool:
        return interaction.user.id == self.interaction_user.id
        
# --- H√†m ch√≠nh x·ª≠ l√Ω s·ª± ki·ªán Du l·ªãch ---
async def handle_travel_event(ctx: nextcord.Message, bot: nextcord.Client):
    """
    H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω to√†n b·ªô logic khi ng∆∞·ªùi ch∆°i "du l·ªãch" ƒë·∫øn server m·ªõi.
    """
    # [S·ª¨A] Import try_send v√†o b√™n trong h√†m thay v√¨ ·ªü ƒë·∫ßu file
    from .utils import try_send

    author_id = ctx.author.id
    guild_id = ctx.guild.id
    
    await try_send(ctx.channel, f"üåç Ch√†o m·ª´ng {ctx.author.mention} ƒë√£ 'du l·ªãch' ƒë·∫øn **{ctx.guild.name}**! ƒêang ki·ªÉm tra h√†nh l√Ω c·ªßa b·∫°n...")

    economy_data = bot.economy_data
    global_profile = get_or_create_global_user_profile(economy_data, author_id)
    
    travel_results = []

    # --- 1. X·ª≠ l√Ω Visa ---
    # (Logic t√¨m Visa t·ªët nh·∫•t v√† √°p d·ª•ng hi·ªáu ·ª©ng s·∫Ω ·ªü ƒë√¢y)
    # V√≠ d·ª• ƒë∆°n gi·∫£n:
    # ...
    # travel_results.append(f"{ICON_ECOVISA} Nh·ªù c√≥ Visa, b·∫°n ƒë√£ mang theo X Ecoin.")

    # --- 2. X·ª≠ l√Ω Balo Du L·ªãch ---
    last_guild_id = global_profile.get("last_active_guild_id")
    if last_guild_id:
        UTILITY_ITEMS = bot.item_definitions
        backpack_to_use = next((item for item in global_profile.get("inventory_global", []) 
                                if item.get("type") == "backpack" and 
                                not item.get("used", False) and
                                item.get("source_guild_id") == last_guild_id), None)
        
        if backpack_to_use:
            old_local_data = get_or_create_user_local_data(global_profile, last_guild_id)
            old_inventory = old_local_data.get("inventory_local", [])

            if old_inventory:
                capacity = UTILITY_ITEMS.get(backpack_to_use["item_id"], {}).get("capacity", 0)
                
                view = BackpackItemSelectView(ctx, None, old_inventory, capacity)
                msg = await try_send(ctx.channel, f"{ICON_BACKPACK} B·∫°n c√≥ m·ªôt Balo t·ª´ server c≈©! H√£y ch·ªçn t·ªëi ƒëa **{capacity}** v·∫≠t ph·∫©m ƒë·ªÉ mang theo:", view=view)
                view.message = msg
                
                await view.wait()

                if view.chosen_items:
                    new_local_data = get_or_create_user_local_data(global_profile, guild_id)
                    items_moved_names = []
                    
                    for item_id_to_move in view.chosen_items:
                        item_found = next((item for item in old_inventory if item.get("item_id") == item_id_to_move), None)
                        if item_found:
                            old_inventory.remove(item_found)
                            item_found["is_foreign"] = True
                            new_local_data.setdefault("inventory_local", []).append(item_found)
                            items_moved_names.append(item_id_to_move)

                    travel_results.append(f"{ICON_BACKPACK} B·∫°n ƒë√£ mang theo c√°c v·∫≠t ph·∫©m: `{', '.join(items_moved_names)}`.")
                
                backpack_to_use["used"] = True

    # --- T·ªïng k·∫øt ---
    if not travel_results:
        travel_results.append("üòÖ Nh∆∞ng c√≥ v·∫ª nh∆∞ b·∫°n ƒë√£ ƒë·∫øn ƒë√¢y tay kh√¥ng. Ch√∫c may m·∫Øn ·ªü v√πng ƒë·∫•t m·ªõi!")
    
    summary_embed = nextcord.Embed(title=f"K·∫øt qu·∫£ chuy·∫øn du l·ªãch c·ªßa {ctx.author.name}", description="\n".join(travel_results), color=nextcord.Color.blue())
    await try_send(ctx.channel, embed=summary_embed)
